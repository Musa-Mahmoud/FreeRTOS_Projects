
FreeRTOS_Exercise6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000977c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  0800994c  0800994c  0000a94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc0  08009fc0  0000b0c0  2**0
                  CONTENTS
  4 .ARM          00000008  08009fc0  08009fc0  0000afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fc8  08009fc8  0000b0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fc8  08009fc8  0000afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fcc  08009fcc  0000afcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08009fd0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001306c  200000c0  0800a090  0000b0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001312c  0800a090  0000b12c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175a1  00000000  00000000  0000b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a80  00000000  00000000  00022691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00026118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103e  00000000  00000000  00027610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d50  00000000  00000000  0002864e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ada4  00000000  00000000  0004c39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2a4a  00000000  00000000  00067142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149b8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006028  00000000  00000000  00149bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0014fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009934 	.word	0x08009934

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	08009934 	.word	0x08009934

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f103 0208 	add.w	r2, r3, #8
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f04f 32ff 	mov.w	r2, #4294967295
 80005e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f103 0208 	add.w	r2, r3, #8
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f103 0208 	add.w	r2, r3, #8
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	601a      	str	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000688:	d103      	bne.n	8000692 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	691b      	ldr	r3, [r3, #16]
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	e00c      	b.n	80006ac <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3308      	adds	r3, #8
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	e002      	b.n	80006a0 <vListInsert+0x2e>
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d2f6      	bcs.n	800069a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	691b      	ldr	r3, [r3, #16]
 80006f0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	6892      	ldr	r2, [r2, #8]
 80006fa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	6852      	ldr	r2, [r2, #4]
 8000704:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	d103      	bne.n	8000718 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689a      	ldr	r2, [r3, #8]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000742:	2301      	movs	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d10b      	bne.n	8000768 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000754:	f383 8811 	msr	BASEPRI, r3
 8000758:	f3bf 8f6f 	isb	sy
 800075c:	f3bf 8f4f 	dsb	sy
 8000760:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d05d      	beq.n	800082a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000772:	2b00      	cmp	r3, #0
 8000774:	d059      	beq.n	800082a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077e:	2100      	movs	r1, #0
 8000780:	fba3 2302 	umull	r2, r3, r3, r2
 8000784:	2b00      	cmp	r3, #0
 8000786:	d000      	beq.n	800078a <xQueueGenericReset+0x52>
 8000788:	2101      	movs	r1, #1
 800078a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800078c:	2b00      	cmp	r3, #0
 800078e:	d14c      	bne.n	800082a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000790:	f002 fcdc 	bl	800314c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800079c:	6939      	ldr	r1, [r7, #16]
 800079e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80007a0:	fb01 f303 	mul.w	r3, r1, r3
 80007a4:	441a      	add	r2, r3
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	2200      	movs	r2, #0
 80007ae:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007c0:	3b01      	subs	r3, #1
 80007c2:	6939      	ldr	r1, [r7, #16]
 80007c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80007c6:	fb01 f303 	mul.w	r3, r1, r3
 80007ca:	441a      	add	r2, r3
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	22ff      	movs	r2, #255	@ 0xff
 80007d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	22ff      	movs	r2, #255	@ 0xff
 80007dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d114      	bne.n	8000810 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d01a      	beq.n	8000824 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	3310      	adds	r3, #16
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f9dc 	bl	8001bb0 <xTaskRemoveFromEventList>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d012      	beq.n	8000824 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80007fe:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <xQueueGenericReset+0x120>)
 8000800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	f3bf 8f4f 	dsb	sy
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	e009      	b.n	8000824 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	3310      	adds	r3, #16
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fedb 	bl	80005d0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	3324      	adds	r3, #36	@ 0x24
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fed6 	bl	80005d0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000824:	f002 fcc4 	bl	80031b0 <vPortExitCritical>
 8000828:	e001      	b.n	800082e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10b      	bne.n	800084c <xQueueGenericReset+0x114>
        __asm volatile
 8000834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000838:	f383 8811 	msr	BASEPRI, r3
 800083c:	f3bf 8f6f 	isb	sy
 8000840:	f3bf 8f4f 	dsb	sy
 8000844:	60bb      	str	r3, [r7, #8]
    }
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800084c:	697b      	ldr	r3, [r7, #20]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000ed04 	.word	0xe000ed04

0800085c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af02      	add	r7, sp, #8
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	4613      	mov	r3, r2
 8000868:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d02e      	beq.n	80008d2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000874:	2100      	movs	r1, #0
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	fba3 2302 	umull	r2, r3, r3, r2
 800087e:	2b00      	cmp	r3, #0
 8000880:	d000      	beq.n	8000884 <xQueueGenericCreate+0x28>
 8000882:	2101      	movs	r1, #1
 8000884:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000886:	2b00      	cmp	r3, #0
 8000888:	d123      	bne.n	80008d2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000892:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8000896:	d81c      	bhi.n	80008d2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	fb02 f303 	mul.w	r3, r2, r3
 80008a0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	3350      	adds	r3, #80	@ 0x50
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fd7a 	bl	80033a0 <pvPortMalloc>
 80008ac:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d01d      	beq.n	80008f0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	3350      	adds	r3, #80	@ 0x50
 80008bc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	4613      	mov	r3, r2
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f000 f815 	bl	80008fa <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80008d0:	e00e      	b.n	80008f0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10b      	bne.n	80008f0 <xQueueGenericCreate+0x94>
        __asm volatile
 80008d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008dc:	f383 8811 	msr	BASEPRI, r3
 80008e0:	f3bf 8f6f 	isb	sy
 80008e4:	f3bf 8f4f 	dsb	sy
 80008e8:	613b      	str	r3, [r7, #16]
    }
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80008f0:	69fb      	ldr	r3, [r7, #28]
    }
 80008f2:	4618      	mov	r0, r3
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d103      	bne.n	8000916 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e002      	b.n	800091c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000928:	2101      	movs	r1, #1
 800092a:	69b8      	ldr	r0, [r7, #24]
 800092c:	f7ff ff04 	bl	8000738 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	78fa      	ldrb	r2, [r7, #3]
 8000934:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	@ 0x38
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8000956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000958:	2b00      	cmp	r3, #0
 800095a:	d10b      	bne.n	8000974 <xQueueGenericSend+0x34>
        __asm volatile
 800095c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000960:	f383 8811 	msr	BASEPRI, r3
 8000964:	f3bf 8f6f 	isb	sy
 8000968:	f3bf 8f4f 	dsb	sy
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d103      	bne.n	8000982 <xQueueGenericSend+0x42>
 800097a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <xQueueGenericSend+0x46>
 8000982:	2301      	movs	r3, #1
 8000984:	e000      	b.n	8000988 <xQueueGenericSend+0x48>
 8000986:	2300      	movs	r3, #0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10b      	bne.n	80009a4 <xQueueGenericSend+0x64>
        __asm volatile
 800098c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000990:	f383 8811 	msr	BASEPRI, r3
 8000994:	f3bf 8f6f 	isb	sy
 8000998:	f3bf 8f4f 	dsb	sy
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d103      	bne.n	80009b2 <xQueueGenericSend+0x72>
 80009aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d101      	bne.n	80009b6 <xQueueGenericSend+0x76>
 80009b2:	2301      	movs	r3, #1
 80009b4:	e000      	b.n	80009b8 <xQueueGenericSend+0x78>
 80009b6:	2300      	movs	r3, #0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10b      	bne.n	80009d4 <xQueueGenericSend+0x94>
        __asm volatile
 80009bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009c0:	f383 8811 	msr	BASEPRI, r3
 80009c4:	f3bf 8f6f 	isb	sy
 80009c8:	f3bf 8f4f 	dsb	sy
 80009cc:	623b      	str	r3, [r7, #32]
    }
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80009d4:	f001 fb00 	bl	8001fd8 <xTaskGetSchedulerState>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d102      	bne.n	80009e4 <xQueueGenericSend+0xa4>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <xQueueGenericSend+0xa8>
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <xQueueGenericSend+0xaa>
 80009e8:	2300      	movs	r3, #0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10b      	bne.n	8000a06 <xQueueGenericSend+0xc6>
        __asm volatile
 80009ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009f2:	f383 8811 	msr	BASEPRI, r3
 80009f6:	f3bf 8f6f 	isb	sy
 80009fa:	f3bf 8f4f 	dsb	sy
 80009fe:	61fb      	str	r3, [r7, #28]
    }
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	e7fd      	b.n	8000a02 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a06:	f002 fba1 	bl	800314c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d302      	bcc.n	8000a1c <xQueueGenericSend+0xdc>
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d129      	bne.n	8000a70 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	68b9      	ldr	r1, [r7, #8]
 8000a20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a22:	f000 fa46 	bl	8000eb2 <prvCopyDataToQueue>
 8000a26:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d010      	beq.n	8000a52 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a32:	3324      	adds	r3, #36	@ 0x24
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 f8bb 	bl	8001bb0 <xTaskRemoveFromEventList>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d013      	beq.n	8000a68 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000a40:	4b3f      	ldr	r3, [pc, #252]	@ (8000b40 <xQueueGenericSend+0x200>)
 8000a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	f3bf 8f4f 	dsb	sy
 8000a4c:	f3bf 8f6f 	isb	sy
 8000a50:	e00a      	b.n	8000a68 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d007      	beq.n	8000a68 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000a58:	4b39      	ldr	r3, [pc, #228]	@ (8000b40 <xQueueGenericSend+0x200>)
 8000a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	f3bf 8f4f 	dsb	sy
 8000a64:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a68:	f002 fba2 	bl	80031b0 <vPortExitCritical>
                return pdPASS;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e063      	b.n	8000b38 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d103      	bne.n	8000a7e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a76:	f002 fb9b 	bl	80031b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e05c      	b.n	8000b38 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d106      	bne.n	8000a92 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 f969 	bl	8001d60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a92:	f002 fb8d 	bl	80031b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a96:	f000 fd85 	bl	80015a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a9a:	f002 fb57 	bl	800314c <vPortEnterCritical>
 8000a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aaa:	d103      	bne.n	8000ab4 <xQueueGenericSend+0x174>
 8000aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac0:	d103      	bne.n	8000aca <xQueueGenericSend+0x18a>
 8000ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000aca:	f002 fb71 	bl	80031b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ace:	1d3a      	adds	r2, r7, #4
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 f958 	bl	8001d8c <xTaskCheckForTimeOut>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d124      	bne.n	8000b2c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000ae2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ae4:	f000 fadd 	bl	80010a2 <prvIsQueueFull>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d018      	beq.n	8000b20 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000af0:	3310      	adds	r3, #16
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 ffee 	bl	8001ad8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000afc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000afe:	f000 fa68 	bl	8000fd2 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000b02:	f000 fd5d 	bl	80015c0 <xTaskResumeAll>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f47f af7c 	bne.w	8000a06 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <xQueueGenericSend+0x200>)
 8000b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	f3bf 8f4f 	dsb	sy
 8000b1a:	f3bf 8f6f 	isb	sy
 8000b1e:	e772      	b.n	8000a06 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000b20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000b22:	f000 fa56 	bl	8000fd2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b26:	f000 fd4b 	bl	80015c0 <xTaskResumeAll>
 8000b2a:	e76c      	b.n	8000a06 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000b2e:	f000 fa50 	bl	8000fd2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b32:	f000 fd45 	bl	80015c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000b36:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3738      	adds	r7, #56	@ 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	e000ed04 	.word	0xe000ed04

08000b44 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b092      	sub	sp, #72	@ 0x48
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8000b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d10b      	bne.n	8000b74 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8000b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b60:	f383 8811 	msr	BASEPRI, r3
 8000b64:	f3bf 8f6f 	isb	sy
 8000b68:	f3bf 8f4f 	dsb	sy
 8000b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d103      	bne.n	8000b82 <xQueueGenericSendFromISR+0x3e>
 8000b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <xQueueGenericSendFromISR+0x42>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <xQueueGenericSendFromISR+0x44>
 8000b86:	2300      	movs	r3, #0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10b      	bne.n	8000ba4 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8000b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b90:	f383 8811 	msr	BASEPRI, r3
 8000b94:	f3bf 8f6f 	isb	sy
 8000b98:	f3bf 8f4f 	dsb	sy
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d103      	bne.n	8000bb2 <xQueueGenericSendFromISR+0x6e>
 8000baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d101      	bne.n	8000bb6 <xQueueGenericSendFromISR+0x72>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <xQueueGenericSendFromISR+0x74>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10b      	bne.n	8000bd4 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8000bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bc0:	f383 8811 	msr	BASEPRI, r3
 8000bc4:	f3bf 8f6f 	isb	sy
 8000bc8:	f3bf 8f4f 	dsb	sy
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000bd4:	f002 fba2 	bl	800331c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000bd8:	f3ef 8211 	mrs	r2, BASEPRI
 8000bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000be0:	f383 8811 	msr	BASEPRI, r3
 8000be4:	f3bf 8f6f 	isb	sy
 8000be8:	f3bf 8f4f 	dsb	sy
 8000bec:	623a      	str	r2, [r7, #32]
 8000bee:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d302      	bcc.n	8000c06 <xQueueGenericSendFromISR+0xc2>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d147      	bne.n	8000c96 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000c0c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000c1c:	f000 f949 	bl	8000eb2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000c20:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d112      	bne.n	8000c50 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d02e      	beq.n	8000c90 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c34:	3324      	adds	r3, #36	@ 0x24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 ffba 	bl	8001bb0 <xTaskRemoveFromEventList>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d026      	beq.n	8000c90 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d023      	beq.n	8000c90 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	e01f      	b.n	8000c90 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000c50:	f000 fdc2 	bl	80017d8 <uxTaskGetNumberOfTasks>
 8000c54:	6338      	str	r0, [r7, #48]	@ 0x30
 8000c56:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d917      	bls.n	8000c90 <xQueueGenericSendFromISR+0x14c>
 8000c60:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c66:	d10b      	bne.n	8000c80 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8000c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c6c:	f383 8811 	msr	BASEPRI, r3
 8000c70:	f3bf 8f6f 	isb	sy
 8000c74:	f3bf 8f4f 	dsb	sy
 8000c78:	61bb      	str	r3, [r7, #24]
    }
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <xQueueGenericSendFromISR+0x138>
 8000c80:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000c84:	3301      	adds	r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000c90:	2301      	movs	r3, #1
 8000c92:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8000c94:	e001      	b.n	8000c9a <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c9c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000ca4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3748      	adds	r7, #72	@ 0x48
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	@ 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10b      	bne.n	8000ce2 <xQueueReceive+0x32>
        __asm volatile
 8000cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cce:	f383 8811 	msr	BASEPRI, r3
 8000cd2:	f3bf 8f6f 	isb	sy
 8000cd6:	f3bf 8f4f 	dsb	sy
 8000cda:	623b      	str	r3, [r7, #32]
    }
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	e7fd      	b.n	8000cde <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d103      	bne.n	8000cf0 <xQueueReceive+0x40>
 8000ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <xQueueReceive+0x44>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <xQueueReceive+0x46>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10b      	bne.n	8000d12 <xQueueReceive+0x62>
        __asm volatile
 8000cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cfe:	f383 8811 	msr	BASEPRI, r3
 8000d02:	f3bf 8f6f 	isb	sy
 8000d06:	f3bf 8f4f 	dsb	sy
 8000d0a:	61fb      	str	r3, [r7, #28]
    }
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	e7fd      	b.n	8000d0e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d12:	f001 f961 	bl	8001fd8 <xTaskGetSchedulerState>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <xQueueReceive+0x72>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <xQueueReceive+0x76>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <xQueueReceive+0x78>
 8000d26:	2300      	movs	r3, #0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10b      	bne.n	8000d44 <xQueueReceive+0x94>
        __asm volatile
 8000d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d30:	f383 8811 	msr	BASEPRI, r3
 8000d34:	f3bf 8f6f 	isb	sy
 8000d38:	f3bf 8f4f 	dsb	sy
 8000d3c:	61bb      	str	r3, [r7, #24]
    }
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d44:	f002 fa02 	bl	800314c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d01f      	beq.n	8000d94 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d58:	f000 f915 	bl	8000f86 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d62:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00f      	beq.n	8000d8c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d6e:	3310      	adds	r3, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 ff1d 	bl	8001bb0 <xTaskRemoveFromEventList>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d007      	beq.n	8000d8c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e70 <xQueueReceive+0x1c0>)
 8000d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	f3bf 8f4f 	dsb	sy
 8000d88:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d8c:	f002 fa10 	bl	80031b0 <vPortExitCritical>
                return pdPASS;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e069      	b.n	8000e68 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d9a:	f002 fa09 	bl	80031b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e062      	b.n	8000e68 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d106      	bne.n	8000db6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 ffd7 	bl	8001d60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000db6:	f002 f9fb 	bl	80031b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dba:	f000 fbf3 	bl	80015a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dbe:	f002 f9c5 	bl	800314c <vPortEnterCritical>
 8000dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dce:	d103      	bne.n	8000dd8 <xQueueReceive+0x128>
 8000dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d103      	bne.n	8000dee <xQueueReceive+0x13e>
 8000de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000dee:	f002 f9df 	bl	80031b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000df2:	1d3a      	adds	r2, r7, #4
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 ffc6 	bl	8001d8c <xTaskCheckForTimeOut>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d123      	bne.n	8000e4e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e08:	f000 f935 	bl	8001076 <prvIsQueueEmpty>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d017      	beq.n	8000e42 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e14:	3324      	adds	r3, #36	@ 0x24
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fe5c 	bl	8001ad8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e22:	f000 f8d6 	bl	8000fd2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e26:	f000 fbcb 	bl	80015c0 <xTaskResumeAll>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d189      	bne.n	8000d44 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <xQueueReceive+0x1c0>)
 8000e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	f3bf 8f4f 	dsb	sy
 8000e3c:	f3bf 8f6f 	isb	sy
 8000e40:	e780      	b.n	8000d44 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e44:	f000 f8c5 	bl	8000fd2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e48:	f000 fbba 	bl	80015c0 <xTaskResumeAll>
 8000e4c:	e77a      	b.n	8000d44 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e50:	f000 f8bf 	bl	8000fd2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e54:	f000 fbb4 	bl	80015c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e5a:	f000 f90c 	bl	8001076 <prvIsQueueEmpty>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f43f af6f 	beq.w	8000d44 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000e66:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3730      	adds	r7, #48	@ 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	e000ed04 	.word	0xe000ed04

08000e74 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10b      	bne.n	8000e9a <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8000e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e86:	f383 8811 	msr	BASEPRI, r3
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	f3bf 8f4f 	dsb	sy
 8000e92:	60bb      	str	r3, [r7, #8]
    }
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	e7fd      	b.n	8000e96 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8000e9a:	f002 f957 	bl	800314c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ea2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8000ea4:	f002 f984 	bl	80031b0 <vPortExitCritical>

    return uxReturn;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ec6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10d      	bne.n	8000eec <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d14d      	bne.n	8000f74 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 f899 	bl	8002014 <xTaskPriorityDisinherit>
 8000ee2:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	e043      	b.n	8000f74 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d119      	bne.n	8000f26 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6858      	ldr	r0, [r3, #4]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	461a      	mov	r2, r3
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	f007 fdc6 	bl	8008a8e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	441a      	add	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d32b      	bcc.n	8000f74 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	e026      	b.n	8000f74 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	68d8      	ldr	r0, [r3, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	f007 fdac 	bl	8008a8e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	425b      	negs	r3, r3
 8000f40:	441a      	add	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d207      	bcs.n	8000f62 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	441a      	add	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d105      	bne.n	8000f74 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000f7c:	697b      	ldr	r3, [r7, #20]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d018      	beq.n	8000fca <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	441a      	add	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d303      	bcc.n	8000fba <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68d9      	ldr	r1, [r3, #12]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f007 fd62 	bl	8008a8e <memcpy>
    }
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000fda:	f002 f8b7 	bl	800314c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000fe4:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fe6:	e011      	b.n	800100c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d012      	beq.n	8001016 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3324      	adds	r3, #36	@ 0x24
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fddb 	bl	8001bb0 <xTaskRemoveFromEventList>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001000:	f000 ff2c 	bl	8001e5c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3b01      	subs	r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800100c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dce9      	bgt.n	8000fe8 <prvUnlockQueue+0x16>
 8001014:	e000      	b.n	8001018 <prvUnlockQueue+0x46>
                    break;
 8001016:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	22ff      	movs	r2, #255	@ 0xff
 800101c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001020:	f002 f8c6 	bl	80031b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001024:	f002 f892 	bl	800314c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800102e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001030:	e011      	b.n	8001056 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d012      	beq.n	8001060 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3310      	adds	r3, #16
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fdb6 	bl	8001bb0 <xTaskRemoveFromEventList>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800104a:	f000 ff07 	bl	8001e5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	3b01      	subs	r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800105a:	2b00      	cmp	r3, #0
 800105c:	dce9      	bgt.n	8001032 <prvUnlockQueue+0x60>
 800105e:	e000      	b.n	8001062 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001060:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	22ff      	movs	r2, #255	@ 0xff
 8001066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800106a:	f002 f8a1 	bl	80031b0 <vPortExitCritical>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800107e:	f002 f865 	bl	800314c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800108a:	2301      	movs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e001      	b.n	8001094 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001094:	f002 f88c 	bl	80031b0 <vPortExitCritical>

    return xReturn;
 8001098:	68fb      	ldr	r3, [r7, #12]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010aa:	f002 f84f 	bl	800314c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d102      	bne.n	80010c0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	e001      	b.n	80010c4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010c4:	f002 f874 	bl	80031b0 <vPortExitCritical>

    return xReturn;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80010d2:	b480      	push	{r7}
 80010d4:	b087      	sub	sp, #28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10b      	bne.n	80010fc <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80010e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010e8:	f383 8811 	msr	BASEPRI, r3
 80010ec:	f3bf 8f6f 	isb	sy
 80010f0:	f3bf 8f4f 	dsb	sy
 80010f4:	60fb      	str	r3, [r7, #12]
    }
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001104:	429a      	cmp	r2, r3
 8001106:	d102      	bne.n	800110e <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e001      	b.n	8001112 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001112:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <vQueueAddToRegistry+0x2c>
        __asm volatile
 8001134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001138:	f383 8811 	msr	BASEPRI, r3
 800113c:	f3bf 8f6f 	isb	sy
 8001140:	f3bf 8f4f 	dsb	sy
 8001144:	60fb      	str	r3, [r7, #12]
    }
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d024      	beq.n	800119c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e01e      	b.n	8001196 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001158:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <vQueueAddToRegistry+0x9c>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4413      	add	r3, r2
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	d105      	bne.n	8001174 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4a13      	ldr	r2, [pc, #76]	@ (80011bc <vQueueAddToRegistry+0x9c>)
 800116e:	4413      	add	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
                    break;
 8001172:	e013      	b.n	800119c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10a      	bne.n	8001190 <vQueueAddToRegistry+0x70>
 800117a:	4a10      	ldr	r2, [pc, #64]	@ (80011bc <vQueueAddToRegistry+0x9c>)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d104      	bne.n	8001190 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <vQueueAddToRegistry+0x9c>)
 800118c:	4413      	add	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3301      	adds	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b07      	cmp	r3, #7
 800119a:	d9dd      	bls.n	8001158 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80011ae:	bf00      	nop
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200000dc 	.word	0x200000dc

080011c0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80011d0:	f001 ffbc 	bl	800314c <vPortEnterCritical>
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d103      	bne.n	80011ea <vQueueWaitForMessageRestricted+0x2a>
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f6:	d103      	bne.n	8001200 <vQueueWaitForMessageRestricted+0x40>
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001200:	f001 ffd6 	bl	80031b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001208:	2b00      	cmp	r3, #0
 800120a:	d106      	bne.n	800121a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3324      	adds	r3, #36	@ 0x24
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fc85 	bl	8001b24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff fed9 	bl	8000fd2 <prvUnlockQueue>
    }
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	@ 0x30
 800122c:	af04      	add	r7, sp, #16
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	4613      	mov	r3, r2
 8001236:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f8af 	bl	80033a0 <pvPortMalloc>
 8001242:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d013      	beq.n	8001272 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800124a:	205c      	movs	r0, #92	@ 0x5c
 800124c:	f002 f8a8 	bl	80033a0 <pvPortMalloc>
 8001250:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001258:	225c      	movs	r2, #92	@ 0x5c
 800125a:	2100      	movs	r1, #0
 800125c:	69f8      	ldr	r0, [r7, #28]
 800125e:	f007 fb9a 	bl	8008996 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	631a      	str	r2, [r3, #48]	@ 0x30
 8001268:	e005      	b.n	8001276 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f002 f954 	bl	8003518 <vPortFree>
 8001270:	e001      	b.n	8001276 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	2300      	movs	r3, #0
 8001280:	9303      	str	r3, [sp, #12]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 f80e 	bl	80012b4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001298:	69f8      	ldr	r0, [r7, #28]
 800129a:	f000 f89b 	bl	80013d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	e002      	b.n	80012aa <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80012aa:	69bb      	ldr	r3, [r7, #24]
    }
 80012ac:	4618      	mov	r0, r3
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80012c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	461a      	mov	r2, r3
 80012cc:	21a5      	movs	r1, #165	@ 0xa5
 80012ce:	f007 fb62 	bl	8008996 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80012d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80012dc:	3b01      	subs	r3, #1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	f023 0307 	bic.w	r3, r3, #7
 80012ea:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <prvInitialiseNewTask+0x5a>
        __asm volatile
 80012f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012fa:	f383 8811 	msr	BASEPRI, r3
 80012fe:	f3bf 8f6f 	isb	sy
 8001302:	f3bf 8f4f 	dsb	sy
 8001306:	617b      	str	r3, [r7, #20]
    }
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	e7fd      	b.n	800130a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01e      	beq.n	8001352 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e012      	b.n	8001340 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	7819      	ldrb	r1, [r3, #0]
 8001322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	4413      	add	r3, r2
 8001328:	3334      	adds	r3, #52	@ 0x34
 800132a:	460a      	mov	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b0f      	cmp	r3, #15
 8001344:	d9e9      	bls.n	800131a <prvInitialiseNewTask+0x66>
 8001346:	e000      	b.n	800134a <prvInitialiseNewTask+0x96>
            {
                break;
 8001348:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800134a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001354:	2b04      	cmp	r3, #4
 8001356:	d90b      	bls.n	8001370 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8001358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800135c:	f383 8811 	msr	BASEPRI, r3
 8001360:	f3bf 8f6f 	isb	sy
 8001364:	f3bf 8f4f 	dsb	sy
 8001368:	613b      	str	r3, [r7, #16]
    }
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001372:	2b04      	cmp	r3, #4
 8001374:	d901      	bls.n	800137a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001376:	2304      	movs	r3, #4
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800137a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800137c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001384:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001388:	3304      	adds	r3, #4
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f940 	bl	8000610 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001392:	3318      	adds	r3, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f93b 	bl	8000610 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800139a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800139c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800139e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a2:	f1c3 0205 	rsb	r2, r3, #5
 80013a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80013aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	68f9      	ldr	r1, [r7, #12]
 80013b4:	69b8      	ldr	r0, [r7, #24]
 80013b6:	f001 fd99 	bl	8002eec <pxPortInitialiseStack>
 80013ba:	4602      	mov	r2, r0
 80013bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013be:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80013c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013ca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80013dc:	f001 feb6 	bl	800314c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80013e0:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <prvAddNewTaskToReadyList+0x110>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a3f      	ldr	r2, [pc, #252]	@ (80014e4 <prvAddNewTaskToReadyList+0x110>)
 80013e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80013ea:	4b3f      	ldr	r3, [pc, #252]	@ (80014e8 <prvAddNewTaskToReadyList+0x114>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80013f2:	4a3d      	ldr	r2, [pc, #244]	@ (80014e8 <prvAddNewTaskToReadyList+0x114>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013f8:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <prvAddNewTaskToReadyList+0x110>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d110      	bne.n	8001422 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001400:	f000 fd50 	bl	8001ea4 <prvInitialiseTaskLists>
 8001404:	e00d      	b.n	8001422 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001406:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <prvAddNewTaskToReadyList+0x118>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800140e:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <prvAddNewTaskToReadyList+0x114>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001418:	429a      	cmp	r2, r3
 800141a:	d802      	bhi.n	8001422 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800141c:	4a32      	ldr	r2, [pc, #200]	@ (80014e8 <prvAddNewTaskToReadyList+0x114>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001422:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <prvAddNewTaskToReadyList+0x11c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a31      	ldr	r2, [pc, #196]	@ (80014f0 <prvAddNewTaskToReadyList+0x11c>)
 800142a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800142c:	4b30      	ldr	r3, [pc, #192]	@ (80014f0 <prvAddNewTaskToReadyList+0x11c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001438:	2201      	movs	r2, #1
 800143a:	409a      	lsls	r2, r3
 800143c:	4b2d      	ldr	r3, [pc, #180]	@ (80014f4 <prvAddNewTaskToReadyList+0x120>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4313      	orrs	r3, r2
 8001442:	4a2c      	ldr	r2, [pc, #176]	@ (80014f4 <prvAddNewTaskToReadyList+0x120>)
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800144a:	492b      	ldr	r1, [pc, #172]	@ (80014f8 <prvAddNewTaskToReadyList+0x124>)
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	3204      	adds	r2, #4
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1d1a      	adds	r2, r3, #4
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4a1b      	ldr	r2, [pc, #108]	@ (80014f8 <prvAddNewTaskToReadyList+0x124>)
 800148a:	441a      	add	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001494:	4918      	ldr	r1, [pc, #96]	@ (80014f8 <prvAddNewTaskToReadyList+0x124>)
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1c59      	adds	r1, r3, #1
 80014a4:	4814      	ldr	r0, [pc, #80]	@ (80014f8 <prvAddNewTaskToReadyList+0x124>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80014b2:	f001 fe7d 	bl	80031b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <prvAddNewTaskToReadyList+0x118>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00e      	beq.n	80014dc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <prvAddNewTaskToReadyList+0x114>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <prvAddNewTaskToReadyList+0x128>)
 80014ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	f3bf 8f4f 	dsb	sy
 80014d8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200001f4 	.word	0x200001f4
 80014e8:	2000011c 	.word	0x2000011c
 80014ec:	20000200 	.word	0x20000200
 80014f0:	20000210 	.word	0x20000210
 80014f4:	200001fc 	.word	0x200001fc
 80014f8:	20000120 	.word	0x20000120
 80014fc:	e000ed04 	.word	0xe000ed04

08001500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001506:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <vTaskStartScheduler+0x88>)
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	2300      	movs	r3, #0
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	2282      	movs	r2, #130	@ 0x82
 8001512:	491e      	ldr	r1, [pc, #120]	@ (800158c <vTaskStartScheduler+0x8c>)
 8001514:	481e      	ldr	r0, [pc, #120]	@ (8001590 <vTaskStartScheduler+0x90>)
 8001516:	f7ff fe87 	bl	8001228 <xTaskCreate>
 800151a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d102      	bne.n	8001528 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001522:	f001 f98d 	bl	8002840 <xTimerCreateTimerTask>
 8001526:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d116      	bne.n	800155c <vTaskStartScheduler+0x5c>
        __asm volatile
 800152e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001532:	f383 8811 	msr	BASEPRI, r3
 8001536:	f3bf 8f6f 	isb	sy
 800153a:	f3bf 8f4f 	dsb	sy
 800153e:	60bb      	str	r3, [r7, #8]
    }
 8001540:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <vTaskStartScheduler+0x94>)
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <vTaskStartScheduler+0x98>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <vTaskStartScheduler+0x9c>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001556:	f001 fd55 	bl	8003004 <xPortStartScheduler>
 800155a:	e00f      	b.n	800157c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001562:	d10b      	bne.n	800157c <vTaskStartScheduler+0x7c>
        __asm volatile
 8001564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001568:	f383 8811 	msr	BASEPRI, r3
 800156c:	f3bf 8f6f 	isb	sy
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	607b      	str	r3, [r7, #4]
    }
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <vTaskStartScheduler+0xa0>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000218 	.word	0x20000218
 800158c:	0800994c 	.word	0x0800994c
 8001590:	08001e75 	.word	0x08001e75
 8001594:	20000214 	.word	0x20000214
 8001598:	20000200 	.word	0x20000200
 800159c:	200001f8 	.word	0x200001f8
 80015a0:	20000000 	.word	0x20000000

080015a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <vTaskSuspendAll+0x18>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a03      	ldr	r2, [pc, #12]	@ (80015bc <vTaskSuspendAll+0x18>)
 80015b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	2000021c 	.word	0x2000021c

080015c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80015ce:	4b71      	ldr	r3, [pc, #452]	@ (8001794 <xTaskResumeAll+0x1d4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10b      	bne.n	80015ee <xTaskResumeAll+0x2e>
        __asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015da:	f383 8811 	msr	BASEPRI, r3
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	607b      	str	r3, [r7, #4]
    }
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	e7fd      	b.n	80015ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80015ee:	f001 fdad 	bl	800314c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80015f2:	4b68      	ldr	r3, [pc, #416]	@ (8001794 <xTaskResumeAll+0x1d4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a66      	ldr	r2, [pc, #408]	@ (8001794 <xTaskResumeAll+0x1d4>)
 80015fa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015fc:	4b65      	ldr	r3, [pc, #404]	@ (8001794 <xTaskResumeAll+0x1d4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f040 80c0 	bne.w	8001786 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001606:	4b64      	ldr	r3, [pc, #400]	@ (8001798 <xTaskResumeAll+0x1d8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80bb 	beq.w	8001786 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001610:	e08a      	b.n	8001728 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001612:	4b62      	ldr	r3, [pc, #392]	@ (800179c <xTaskResumeAll+0x1dc>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	6a12      	ldr	r2, [r2, #32]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	69d2      	ldr	r2, [r2, #28]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	3318      	adds	r3, #24
 800163c:	429a      	cmp	r2, r3
 800163e:	d103      	bne.n	8001648 <xTaskResumeAll+0x88>
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	6a1a      	ldr	r2, [r3, #32]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2200      	movs	r2, #0
 800164c:	629a      	str	r2, [r3, #40]	@ 0x28
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	1e5a      	subs	r2, r3, #1
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	68d2      	ldr	r2, [r2, #12]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	6892      	ldr	r2, [r2, #8]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	429a      	cmp	r2, r3
 800167c:	d103      	bne.n	8001686 <xTaskResumeAll+0xc6>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	1e5a      	subs	r2, r3, #1
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169a:	2201      	movs	r2, #1
 800169c:	409a      	lsls	r2, r3
 800169e:	4b40      	ldr	r3, [pc, #256]	@ (80017a0 <xTaskResumeAll+0x1e0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	4a3e      	ldr	r2, [pc, #248]	@ (80017a0 <xTaskResumeAll+0x1e0>)
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	493d      	ldr	r1, [pc, #244]	@ (80017a4 <xTaskResumeAll+0x1e4>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3304      	adds	r3, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	3204      	adds	r2, #4
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	1d1a      	adds	r2, r3, #4
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4a2e      	ldr	r2, [pc, #184]	@ (80017a4 <xTaskResumeAll+0x1e4>)
 80016ec:	441a      	add	r2, r3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	615a      	str	r2, [r3, #20]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f6:	492b      	ldr	r1, [pc, #172]	@ (80017a4 <xTaskResumeAll+0x1e4>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	1c59      	adds	r1, r3, #1
 8001706:	4827      	ldr	r0, [pc, #156]	@ (80017a4 <xTaskResumeAll+0x1e4>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4403      	add	r3, r0
 8001712:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001718:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <xTaskResumeAll+0x1e8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171e:	429a      	cmp	r2, r3
 8001720:	d302      	bcc.n	8001728 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <xTaskResumeAll+0x1ec>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001728:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <xTaskResumeAll+0x1dc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	f47f af70 	bne.w	8001612 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001738:	f000 fc32 	bl	8001fa0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800173c:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <xTaskResumeAll+0x1f0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d010      	beq.n	800176a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001748:	f000 f852 	bl	80017f0 <xTaskIncrementTick>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <xTaskResumeAll+0x1ec>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3b01      	subs	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f1      	bne.n	8001748 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <xTaskResumeAll+0x1f0>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <xTaskResumeAll+0x1ec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001772:	2301      	movs	r3, #1
 8001774:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001776:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <xTaskResumeAll+0x1f4>)
 8001778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	f3bf 8f4f 	dsb	sy
 8001782:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001786:	f001 fd13 	bl	80031b0 <vPortExitCritical>

    return xAlreadyYielded;
 800178a:	69bb      	ldr	r3, [r7, #24]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000021c 	.word	0x2000021c
 8001798:	200001f4 	.word	0x200001f4
 800179c:	200001b4 	.word	0x200001b4
 80017a0:	200001fc 	.word	0x200001fc
 80017a4:	20000120 	.word	0x20000120
 80017a8:	2000011c 	.word	0x2000011c
 80017ac:	20000208 	.word	0x20000208
 80017b0:	20000204 	.word	0x20000204
 80017b4:	e000ed04 	.word	0xe000ed04

080017b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80017be:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <xTaskGetTickCount+0x1c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200001f8 	.word	0x200001f8

080017d8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80017dc:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <uxTaskGetNumberOfTasks+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200001f4 	.word	0x200001f4

080017f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	@ 0x28
 80017f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017fa:	4b7e      	ldr	r3, [pc, #504]	@ (80019f4 <xTaskIncrementTick+0x204>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80ed 	bne.w	80019de <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001804:	4b7c      	ldr	r3, [pc, #496]	@ (80019f8 <xTaskIncrementTick+0x208>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800180c:	4a7a      	ldr	r2, [pc, #488]	@ (80019f8 <xTaskIncrementTick+0x208>)
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d121      	bne.n	800185c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001818:	4b78      	ldr	r3, [pc, #480]	@ (80019fc <xTaskIncrementTick+0x20c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <xTaskIncrementTick+0x4a>
        __asm volatile
 8001822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001826:	f383 8811 	msr	BASEPRI, r3
 800182a:	f3bf 8f6f 	isb	sy
 800182e:	f3bf 8f4f 	dsb	sy
 8001832:	607b      	str	r3, [r7, #4]
    }
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	e7fd      	b.n	8001836 <xTaskIncrementTick+0x46>
 800183a:	4b70      	ldr	r3, [pc, #448]	@ (80019fc <xTaskIncrementTick+0x20c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	4b6f      	ldr	r3, [pc, #444]	@ (8001a00 <xTaskIncrementTick+0x210>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a6d      	ldr	r2, [pc, #436]	@ (80019fc <xTaskIncrementTick+0x20c>)
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4a6d      	ldr	r2, [pc, #436]	@ (8001a00 <xTaskIncrementTick+0x210>)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a04 <xTaskIncrementTick+0x214>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a6b      	ldr	r2, [pc, #428]	@ (8001a04 <xTaskIncrementTick+0x214>)
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	f000 fba2 	bl	8001fa0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800185c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a08 <xTaskIncrementTick+0x218>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a3a      	ldr	r2, [r7, #32]
 8001862:	429a      	cmp	r2, r3
 8001864:	f0c0 80a6 	bcc.w	80019b4 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001868:	4b64      	ldr	r3, [pc, #400]	@ (80019fc <xTaskIncrementTick+0x20c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d104      	bne.n	800187c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001872:	4b65      	ldr	r3, [pc, #404]	@ (8001a08 <xTaskIncrementTick+0x218>)
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	601a      	str	r2, [r3, #0]
                    break;
 800187a:	e09b      	b.n	80019b4 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800187c:	4b5f      	ldr	r3, [pc, #380]	@ (80019fc <xTaskIncrementTick+0x20c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800188c:	6a3a      	ldr	r2, [r7, #32]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	429a      	cmp	r2, r3
 8001892:	d203      	bcs.n	800189c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001894:	4a5c      	ldr	r2, [pc, #368]	@ (8001a08 <xTaskIncrementTick+0x218>)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800189a:	e08b      	b.n	80019b4 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	68d2      	ldr	r2, [r2, #12]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	6892      	ldr	r2, [r2, #8]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	3304      	adds	r3, #4
 80018be:	429a      	cmp	r2, r3
 80018c0:	d103      	bne.n	80018ca <xTaskIncrementTick+0xda>
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d01e      	beq.n	8001920 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	6a12      	ldr	r2, [r2, #32]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	69d2      	ldr	r2, [r2, #28]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	3318      	adds	r3, #24
 8001904:	429a      	cmp	r2, r3
 8001906:	d103      	bne.n	8001910 <xTaskIncrementTick+0x120>
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2200      	movs	r2, #0
 8001914:	629a      	str	r2, [r3, #40]	@ 0x28
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001924:	2201      	movs	r2, #1
 8001926:	409a      	lsls	r2, r3
 8001928:	4b38      	ldr	r3, [pc, #224]	@ (8001a0c <xTaskIncrementTick+0x21c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4313      	orrs	r3, r2
 800192e:	4a37      	ldr	r2, [pc, #220]	@ (8001a0c <xTaskIncrementTick+0x21c>)
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001936:	4936      	ldr	r1, [pc, #216]	@ (8001a10 <xTaskIncrementTick+0x220>)
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3304      	adds	r3, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	3204      	adds	r2, #4
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4a26      	ldr	r2, [pc, #152]	@ (8001a10 <xTaskIncrementTick+0x220>)
 8001976:	441a      	add	r2, r3
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	615a      	str	r2, [r3, #20]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001980:	4923      	ldr	r1, [pc, #140]	@ (8001a10 <xTaskIncrementTick+0x220>)
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	1c59      	adds	r1, r3, #1
 8001990:	481f      	ldr	r0, [pc, #124]	@ (8001a10 <xTaskIncrementTick+0x220>)
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4403      	add	r3, r0
 800199c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <xTaskIncrementTick+0x224>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f67f af5d 	bls.w	8001868 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80019ae:	2301      	movs	r3, #1
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019b2:	e759      	b.n	8001868 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80019b4:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <xTaskIncrementTick+0x224>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ba:	4915      	ldr	r1, [pc, #84]	@ (8001a10 <xTaskIncrementTick+0x220>)
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d901      	bls.n	80019d0 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <xTaskIncrementTick+0x228>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d007      	beq.n	80019e8 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80019d8:	2301      	movs	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
 80019dc:	e004      	b.n	80019e8 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <xTaskIncrementTick+0x22c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a1c <xTaskIncrementTick+0x22c>)
 80019e6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3728      	adds	r7, #40	@ 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000021c 	.word	0x2000021c
 80019f8:	200001f8 	.word	0x200001f8
 80019fc:	200001ac 	.word	0x200001ac
 8001a00:	200001b0 	.word	0x200001b0
 8001a04:	2000020c 	.word	0x2000020c
 8001a08:	20000214 	.word	0x20000214
 8001a0c:	200001fc 	.word	0x200001fc
 8001a10:	20000120 	.word	0x20000120
 8001a14:	2000011c 	.word	0x2000011c
 8001a18:	20000208 	.word	0x20000208
 8001a1c:	20000204 	.word	0x20000204

08001a20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a26:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <vTaskSwitchContext+0xa4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001a2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <vTaskSwitchContext+0xa8>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001a34:	e040      	b.n	8001ab8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8001a36:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <vTaskSwitchContext+0xa8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a3c:	4b23      	ldr	r3, [pc, #140]	@ (8001acc <vTaskSwitchContext+0xac>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	f1c3 031f 	rsb	r3, r3, #31
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	491f      	ldr	r1, [pc, #124]	@ (8001ad0 <vTaskSwitchContext+0xb0>)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10b      	bne.n	8001a7e <vTaskSwitchContext+0x5e>
        __asm volatile
 8001a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a6a:	f383 8811 	msr	BASEPRI, r3
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	f3bf 8f4f 	dsb	sy
 8001a76:	607b      	str	r3, [r7, #4]
    }
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	e7fd      	b.n	8001a7a <vTaskSwitchContext+0x5a>
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4a11      	ldr	r2, [pc, #68]	@ (8001ad0 <vTaskSwitchContext+0xb0>)
 8001a8a:	4413      	add	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d104      	bne.n	8001aae <vTaskSwitchContext+0x8e>
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	@ (8001ad4 <vTaskSwitchContext+0xb4>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	2000021c 	.word	0x2000021c
 8001ac8:	20000208 	.word	0x20000208
 8001acc:	200001fc 	.word	0x200001fc
 8001ad0:	20000120 	.word	0x20000120
 8001ad4:	2000011c 	.word	0x2000011c

08001ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10b      	bne.n	8001b00 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8001ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aec:	f383 8811 	msr	BASEPRI, r3
 8001af0:	f3bf 8f6f 	isb	sy
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	60fb      	str	r3, [r7, #12]
    }
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <vTaskPlaceOnEventList+0x48>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3318      	adds	r3, #24
 8001b06:	4619      	mov	r1, r3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fdb2 	bl	8000672 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b0e:	2101      	movs	r1, #1
 8001b10:	6838      	ldr	r0, [r7, #0]
 8001b12:	f000 fe15 	bl	8002740 <prvAddCurrentTaskToDelayedList>
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000011c 	.word	0x2000011c

08001b24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10b      	bne.n	8001b4e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8001b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b3a:	f383 8811 	msr	BASEPRI, r3
 8001b3e:	f3bf 8f6f 	isb	sy
 8001b42:	f3bf 8f4f 	dsb	sy
 8001b46:	613b      	str	r3, [r7, #16]
    }
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <vTaskPlaceOnEventListRestricted+0x88>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	61da      	str	r2, [r3, #28]
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <vTaskPlaceOnEventListRestricted+0x88>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	6892      	ldr	r2, [r2, #8]
 8001b64:	621a      	str	r2, [r3, #32]
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <vTaskPlaceOnEventListRestricted+0x88>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	3218      	adds	r2, #24
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <vTaskPlaceOnEventListRestricted+0x88>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f103 0218 	add.w	r2, r3, #24
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <vTaskPlaceOnEventListRestricted+0x88>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	68b8      	ldr	r0, [r7, #8]
 8001ba0:	f000 fdce 	bl	8002740 <prvAddCurrentTaskToDelayedList>
    }
 8001ba4:	bf00      	nop
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000011c 	.word	0x2000011c

08001bb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b08b      	sub	sp, #44	@ 0x2c
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8001bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	60fb      	str	r3, [r7, #12]
    }
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	e7fd      	b.n	8001bda <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	6a12      	ldr	r2, [r2, #32]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	6a3a      	ldr	r2, [r7, #32]
 8001bf4:	69d2      	ldr	r2, [r2, #28]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	3318      	adds	r3, #24
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d103      	bne.n	8001c0c <xTaskRemoveFromEventList+0x5c>
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	6a1a      	ldr	r2, [r3, #32]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d48 <xTaskRemoveFromEventList+0x198>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d15e      	bne.n	8001ce2 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	6a3a      	ldr	r2, [r7, #32]
 8001c30:	68d2      	ldr	r2, [r2, #12]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	6a3a      	ldr	r2, [r7, #32]
 8001c3a:	6892      	ldr	r2, [r2, #8]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	3304      	adds	r3, #4
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d103      	bne.n	8001c52 <xTaskRemoveFromEventList+0xa2>
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	2200      	movs	r2, #0
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1e5a      	subs	r2, r3, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	2201      	movs	r2, #1
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	4b38      	ldr	r3, [pc, #224]	@ (8001d4c <xTaskRemoveFromEventList+0x19c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	4a36      	ldr	r2, [pc, #216]	@ (8001d4c <xTaskRemoveFromEventList+0x19c>)
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c78:	4935      	ldr	r1, [pc, #212]	@ (8001d50 <xTaskRemoveFromEventList+0x1a0>)
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	3304      	adds	r3, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	6a3a      	ldr	r2, [r7, #32]
 8001c9e:	3204      	adds	r2, #4
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	1d1a      	adds	r2, r3, #4
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4a26      	ldr	r2, [pc, #152]	@ (8001d50 <xTaskRemoveFromEventList+0x1a0>)
 8001cb8:	441a      	add	r2, r3
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	615a      	str	r2, [r3, #20]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc2:	4923      	ldr	r1, [pc, #140]	@ (8001d50 <xTaskRemoveFromEventList+0x1a0>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	1c59      	adds	r1, r3, #1
 8001cd2:	481f      	ldr	r0, [pc, #124]	@ (8001d50 <xTaskRemoveFromEventList+0x1a0>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4403      	add	r3, r0
 8001cde:	6019      	str	r1, [r3, #0]
 8001ce0:	e01b      	b.n	8001d1a <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <xTaskRemoveFromEventList+0x1a4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	61da      	str	r2, [r3, #28]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	621a      	str	r2, [r3, #32]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	6a3a      	ldr	r2, [r7, #32]
 8001cfc:	3218      	adds	r2, #24
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	f103 0218 	add.w	r2, r3, #24
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	4a11      	ldr	r2, [pc, #68]	@ (8001d54 <xTaskRemoveFromEventList+0x1a4>)
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <xTaskRemoveFromEventList+0x1a4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a0f      	ldr	r2, [pc, #60]	@ (8001d54 <xTaskRemoveFromEventList+0x1a4>)
 8001d18:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <xTaskRemoveFromEventList+0x1a8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d905      	bls.n	8001d34 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <xTaskRemoveFromEventList+0x1ac>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e001      	b.n	8001d38 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	372c      	adds	r7, #44	@ 0x2c
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	2000021c 	.word	0x2000021c
 8001d4c:	200001fc 	.word	0x200001fc
 8001d50:	20000120 	.word	0x20000120
 8001d54:	200001b4 	.word	0x200001b4
 8001d58:	2000011c 	.word	0x2000011c
 8001d5c:	20000208 	.word	0x20000208

08001d60 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <vTaskInternalSetTimeOutState+0x24>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <vTaskInternalSetTimeOutState+0x28>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	605a      	str	r2, [r3, #4]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	2000020c 	.word	0x2000020c
 8001d88:	200001f8 	.word	0x200001f8

08001d8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10b      	bne.n	8001db4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8001d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da0:	f383 8811 	msr	BASEPRI, r3
 8001da4:	f3bf 8f6f 	isb	sy
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	613b      	str	r3, [r7, #16]
    }
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10b      	bne.n	8001dd2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8001dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dbe:	f383 8811 	msr	BASEPRI, r3
 8001dc2:	f3bf 8f6f 	isb	sy
 8001dc6:	f3bf 8f4f 	dsb	sy
 8001dca:	60fb      	str	r3, [r7, #12]
    }
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	e7fd      	b.n	8001dce <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001dd2:	f001 f9bb 	bl	800314c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e54 <xTaskCheckForTimeOut+0xc8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dee:	d102      	bne.n	8001df6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	e026      	b.n	8001e44 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <xTaskCheckForTimeOut+0xcc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d00a      	beq.n	8001e18 <xTaskCheckForTimeOut+0x8c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d305      	bcc.n	8001e18 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e015      	b.n	8001e44 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d20b      	bcs.n	8001e3a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	1ad2      	subs	r2, r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff96 	bl	8001d60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	e004      	b.n	8001e44 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001e44:	f001 f9b4 	bl	80031b0 <vPortExitCritical>

    return xReturn;
 8001e48:	69fb      	ldr	r3, [r7, #28]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200001f8 	.word	0x200001f8
 8001e58:	2000020c 	.word	0x2000020c

08001e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <vTaskMissedYield+0x14>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20000208 	.word	0x20000208

08001e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001e7c:	f000 f852 	bl	8001f24 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <prvIdleTask+0x28>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d9f9      	bls.n	8001e7c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <prvIdleTask+0x2c>)
 8001e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001e98:	e7f0      	b.n	8001e7c <prvIdleTask+0x8>
 8001e9a:	bf00      	nop
 8001e9c:	20000120 	.word	0x20000120
 8001ea0:	e000ed04 	.word	0xe000ed04

08001ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	e00c      	b.n	8001eca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <prvInitialiseTaskLists+0x60>)
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb86 	bl	80005d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d9ef      	bls.n	8001eb0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001ed0:	480d      	ldr	r0, [pc, #52]	@ (8001f08 <prvInitialiseTaskLists+0x64>)
 8001ed2:	f7fe fb7d 	bl	80005d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001ed6:	480d      	ldr	r0, [pc, #52]	@ (8001f0c <prvInitialiseTaskLists+0x68>)
 8001ed8:	f7fe fb7a 	bl	80005d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <prvInitialiseTaskLists+0x6c>)
 8001ede:	f7fe fb77 	bl	80005d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001ee2:	480c      	ldr	r0, [pc, #48]	@ (8001f14 <prvInitialiseTaskLists+0x70>)
 8001ee4:	f7fe fb74 	bl	80005d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001ee8:	480b      	ldr	r0, [pc, #44]	@ (8001f18 <prvInitialiseTaskLists+0x74>)
 8001eea:	f7fe fb71 	bl	80005d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <prvInitialiseTaskLists+0x78>)
 8001ef0:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <prvInitialiseTaskLists+0x64>)
 8001ef2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <prvInitialiseTaskLists+0x7c>)
 8001ef6:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <prvInitialiseTaskLists+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000120 	.word	0x20000120
 8001f08:	20000184 	.word	0x20000184
 8001f0c:	20000198 	.word	0x20000198
 8001f10:	200001b4 	.word	0x200001b4
 8001f14:	200001c8 	.word	0x200001c8
 8001f18:	200001e0 	.word	0x200001e0
 8001f1c:	200001ac 	.word	0x200001ac
 8001f20:	200001b0 	.word	0x200001b0

08001f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f2a:	e019      	b.n	8001f60 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001f2c:	f001 f90e 	bl	800314c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f30:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <prvCheckTasksWaitingTermination+0x50>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fbd1 	bl	80006e4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <prvCheckTasksWaitingTermination+0x54>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	4a0b      	ldr	r2, [pc, #44]	@ (8001f78 <prvCheckTasksWaitingTermination+0x54>)
 8001f4a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <prvCheckTasksWaitingTermination+0x58>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <prvCheckTasksWaitingTermination+0x58>)
 8001f54:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001f56:	f001 f92b 	bl	80031b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f810 	bl	8001f80 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <prvCheckTasksWaitingTermination+0x58>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e1      	bne.n	8001f2c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200001c8 	.word	0x200001c8
 8001f78:	200001f4 	.word	0x200001f4
 8001f7c:	200001dc 	.word	0x200001dc

08001f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f001 fac3 	bl	8003518 <vPortFree>
            vPortFree( pxTCB );
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f001 fac0 	bl	8003518 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <prvResetNextTaskUnblockTime+0x30>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <prvResetNextTaskUnblockTime+0x34>)
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001fb6:	e005      	b.n	8001fc4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <prvResetNextTaskUnblockTime+0x30>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <prvResetNextTaskUnblockTime+0x34>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200001ac 	.word	0x200001ac
 8001fd4:	20000214 	.word	0x20000214

08001fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <xTaskGetSchedulerState+0x34>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	e008      	b.n	8001ffe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <xTaskGetSchedulerState+0x38>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	e001      	b.n	8001ffe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001ffe:	687b      	ldr	r3, [r7, #4]
    }
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000200 	.word	0x20000200
 8002010:	2000021c 	.word	0x2000021c

08002014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d065      	beq.n	80020f6 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800202a:	4b35      	ldr	r3, [pc, #212]	@ (8002100 <xTaskPriorityDisinherit+0xec>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d00b      	beq.n	800204c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	60fb      	str	r3, [r7, #12]
    }
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8002054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002058:	f383 8811 	msr	BASEPRI, r3
 800205c:	f3bf 8f6f 	isb	sy
 8002060:	f3bf 8f4f 	dsb	sy
 8002064:	60bb      	str	r3, [r7, #8]
    }
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002070:	1e5a      	subs	r2, r3, #1
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	429a      	cmp	r2, r3
 8002080:	d039      	beq.n	80020f6 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002086:	2b00      	cmp	r3, #0
 8002088:	d135      	bne.n	80020f6 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	3304      	adds	r3, #4
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fb28 	bl	80006e4 <uxListRemove>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10a      	bne.n	80020b0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	2201      	movs	r2, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43da      	mvns	r2, r3
 80020a6:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <xTaskPriorityDisinherit+0xf0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4013      	ands	r3, r2
 80020ac:	4a15      	ldr	r2, [pc, #84]	@ (8002104 <xTaskPriorityDisinherit+0xf0>)
 80020ae:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	f1c3 0205 	rsb	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	2201      	movs	r2, #1
 80020ca:	409a      	lsls	r2, r3
 80020cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <xTaskPriorityDisinherit+0xf0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002104 <xTaskPriorityDisinherit+0xf0>)
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4a09      	ldr	r2, [pc, #36]	@ (8002108 <xTaskPriorityDisinherit+0xf4>)
 80020e4:	441a      	add	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3304      	adds	r3, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4610      	mov	r0, r2
 80020ee:	f7fe fa9c 	bl	800062a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80020f2:	2301      	movs	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80020f6:	697b      	ldr	r3, [r7, #20]
    }
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000011c 	.word	0x2000011c
 8002104:	200001fc 	.word	0x200001fc
 8002108:	20000120 	.word	0x20000120

0800210c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8002120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
 8002130:	613b      	str	r3, [r7, #16]
    }
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002138:	f001 f808 	bl	800314c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800213c:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <xTaskGenericNotifyWait+0x104>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	3358      	adds	r3, #88	@ 0x58
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d024      	beq.n	8002198 <xTaskGenericNotifyWait+0x8c>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800214e:	4b30      	ldr	r3, [pc, #192]	@ (8002210 <xTaskGenericNotifyWait+0x104>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3314      	adds	r3, #20
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	43db      	mvns	r3, r3
 8002160:	4019      	ands	r1, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3314      	adds	r3, #20
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800216c:	4b28      	ldr	r3, [pc, #160]	@ (8002210 <xTaskGenericNotifyWait+0x104>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	3358      	adds	r3, #88	@ 0x58
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00b      	beq.n	8002198 <xTaskGenericNotifyWait+0x8c>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002180:	2101      	movs	r1, #1
 8002182:	6a38      	ldr	r0, [r7, #32]
 8002184:	f000 fadc 	bl	8002740 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002188:	4b22      	ldr	r3, [pc, #136]	@ (8002214 <xTaskGenericNotifyWait+0x108>)
 800218a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002198:	f001 f80a 	bl	80031b0 <vPortExitCritical>

        taskENTER_CRITICAL();
 800219c:	f000 ffd6 	bl	800314c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <xTaskGenericNotifyWait+0xac>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <xTaskGenericNotifyWait+0x104>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3314      	adds	r3, #20
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <xTaskGenericNotifyWait+0x104>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	3358      	adds	r3, #88	@ 0x58
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d002      	beq.n	80021d0 <xTaskGenericNotifyWait+0xc4>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e010      	b.n	80021f2 <xTaskGenericNotifyWait+0xe6>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <xTaskGenericNotifyWait+0x104>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3314      	adds	r3, #20
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4019      	ands	r1, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3314      	adds	r3, #20
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <xTaskGenericNotifyWait+0x104>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	3358      	adds	r3, #88	@ 0x58
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002200:	f000 ffd6 	bl	80031b0 <vPortExitCritical>

        return xReturn;
 8002204:	697b      	ldr	r3, [r7, #20]
    }
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000011c 	.word	0x2000011c
 8002214:	e000ed04 	.word	0xe000ed04

08002218 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002218:	b580      	push	{r7, lr}
 800221a:	b08e      	sub	sp, #56	@ 0x38
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002226:	2301      	movs	r3, #1
 8002228:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00b      	beq.n	8002248 <xTaskGenericNotify+0x30>
        __asm volatile
 8002230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	623b      	str	r3, [r7, #32]
    }
 8002242:	bf00      	nop
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10b      	bne.n	8002266 <xTaskGenericNotify+0x4e>
        __asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	61fb      	str	r3, [r7, #28]
    }
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	e7fd      	b.n	8002262 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800226a:	f000 ff6f 	bl	800314c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800226e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <xTaskGenericNotify+0x6c>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3314      	adds	r3, #20
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002282:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4413      	add	r3, r2
 800228a:	3358      	adds	r3, #88	@ 0x58
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4413      	add	r3, r2
 8002298:	3358      	adds	r3, #88	@ 0x58
 800229a:	2202      	movs	r2, #2
 800229c:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d841      	bhi.n	8002328 <xTaskGenericNotify+0x110>
 80022a4:	a201      	add	r2, pc, #4	@ (adr r2, 80022ac <xTaskGenericNotify+0x94>)
 80022a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022aa:	bf00      	nop
 80022ac:	08002349 	.word	0x08002349
 80022b0:	080022c1 	.word	0x080022c1
 80022b4:	080022df 	.word	0x080022df
 80022b8:	080022fb 	.word	0x080022fb
 80022bc:	0800230b 	.word	0x0800230b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80022c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3314      	adds	r3, #20
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	3314      	adds	r3, #20
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	605a      	str	r2, [r3, #4]
                    break;
 80022dc:	e037      	b.n	800234e <xTaskGenericNotify+0x136>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80022de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3314      	adds	r3, #20
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3314      	adds	r3, #20
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	605a      	str	r2, [r3, #4]
                    break;
 80022f8:	e029      	b.n	800234e <xTaskGenericNotify+0x136>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80022fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	3314      	adds	r3, #20
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	605a      	str	r2, [r3, #4]
                    break;
 8002308:	e021      	b.n	800234e <xTaskGenericNotify+0x136>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800230a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800230e:	2b02      	cmp	r3, #2
 8002310:	d007      	beq.n	8002322 <xTaskGenericNotify+0x10a>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3314      	adds	r3, #20
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002320:	e015      	b.n	800234e <xTaskGenericNotify+0x136>
                        xReturn = pdFAIL;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8002326:	e012      	b.n	800234e <xTaskGenericNotify+0x136>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002328:	4b4d      	ldr	r3, [pc, #308]	@ (8002460 <xTaskGenericNotify+0x248>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <xTaskGenericNotify+0x134>
        __asm volatile
 8002330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	61bb      	str	r3, [r7, #24]
    }
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <xTaskGenericNotify+0x12c>
                    break;
 8002348:	bf00      	nop
 800234a:	e000      	b.n	800234e <xTaskGenericNotify+0x136>

                    break;
 800234c:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800234e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002352:	2b01      	cmp	r3, #1
 8002354:	d17c      	bne.n	8002450 <xTaskGenericNotify+0x238>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002362:	68d2      	ldr	r2, [r2, #12]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800236c:	6892      	ldr	r2, [r2, #8]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002376:	3304      	adds	r3, #4
 8002378:	429a      	cmp	r2, r3
 800237a:	d103      	bne.n	8002384 <xTaskGenericNotify+0x16c>
 800237c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
 800238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002392:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8002394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	2201      	movs	r2, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	4b31      	ldr	r3, [pc, #196]	@ (8002464 <xTaskGenericNotify+0x24c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	4a30      	ldr	r2, [pc, #192]	@ (8002464 <xTaskGenericNotify+0x24c>)
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023aa:	492f      	ldr	r1, [pc, #188]	@ (8002468 <xTaskGenericNotify+0x250>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3304      	adds	r3, #4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023d0:	3204      	adds	r2, #4
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	1d1a      	adds	r2, r3, #4
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002468 <xTaskGenericNotify+0x250>)
 80023ea:	441a      	add	r2, r3
 80023ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ee:	615a      	str	r2, [r3, #20]
 80023f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f4:	491c      	ldr	r1, [pc, #112]	@ (8002468 <xTaskGenericNotify+0x250>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c59      	adds	r1, r3, #1
 8002404:	4818      	ldr	r0, [pc, #96]	@ (8002468 <xTaskGenericNotify+0x250>)
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4403      	add	r3, r0
 8002410:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <xTaskGenericNotify+0x21a>
        __asm volatile
 800241a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	617b      	str	r3, [r7, #20]
    }
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	e7fd      	b.n	800242e <xTaskGenericNotify+0x216>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002436:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <xTaskGenericNotify+0x254>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	429a      	cmp	r2, r3
 800243e:	d907      	bls.n	8002450 <xTaskGenericNotify+0x238>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <xTaskGenericNotify+0x258>)
 8002442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002450:	f000 feae 	bl	80031b0 <vPortExitCritical>

        return xReturn;
 8002454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002456:	4618      	mov	r0, r3
 8002458:	3738      	adds	r7, #56	@ 0x38
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200001f8 	.word	0x200001f8
 8002464:	200001fc 	.word	0x200001fc
 8002468:	20000120 	.word	0x20000120
 800246c:	2000011c 	.word	0x2000011c
 8002470:	e000ed04 	.word	0xe000ed04

08002474 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002474:	b580      	push	{r7, lr}
 8002476:	b092      	sub	sp, #72	@ 0x48
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002482:	2301      	movs	r3, #1
 8002484:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	e7fd      	b.n	80024be <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024c2:	f000 ff2b 	bl	800331c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 80024ca:	f3ef 8211 	mrs	r2, BASEPRI
 80024ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	623a      	str	r2, [r7, #32]
 80024e0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80024e2:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80024e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <xTaskGenericNotifyFromISR+0x88>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80024ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	3314      	adds	r3, #20
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024fa:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80024fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4413      	add	r3, r2
 8002502:	3358      	adds	r3, #88	@ 0x58
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800250a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4413      	add	r3, r2
 8002510:	3358      	adds	r3, #88	@ 0x58
 8002512:	2202      	movs	r2, #2
 8002514:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d841      	bhi.n	80025a0 <xTaskGenericNotifyFromISR+0x12c>
 800251c:	a201      	add	r2, pc, #4	@ (adr r2, 8002524 <xTaskGenericNotifyFromISR+0xb0>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	080025c1 	.word	0x080025c1
 8002528:	08002539 	.word	0x08002539
 800252c:	08002557 	.word	0x08002557
 8002530:	08002573 	.word	0x08002573
 8002534:	08002583 	.word	0x08002583
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3314      	adds	r3, #20
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	431a      	orrs	r2, r3
 8002548:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3314      	adds	r3, #20
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	605a      	str	r2, [r3, #4]
                    break;
 8002554:	e037      	b.n	80025c6 <xTaskGenericNotifyFromISR+0x152>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002556:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3314      	adds	r3, #20
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3314      	adds	r3, #20
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	605a      	str	r2, [r3, #4]
                    break;
 8002570:	e029      	b.n	80025c6 <xTaskGenericNotifyFromISR+0x152>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	3314      	adds	r3, #20
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	605a      	str	r2, [r3, #4]
                    break;
 8002580:	e021      	b.n	80025c6 <xTaskGenericNotifyFromISR+0x152>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002582:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002586:	2b02      	cmp	r3, #2
 8002588:	d007      	beq.n	800259a <xTaskGenericNotifyFromISR+0x126>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800258a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	3314      	adds	r3, #20
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002598:	e015      	b.n	80025c6 <xTaskGenericNotifyFromISR+0x152>
                        xReturn = pdFAIL;
 800259a:	2300      	movs	r3, #0
 800259c:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 800259e:	e012      	b.n	80025c6 <xTaskGenericNotifyFromISR+0x152>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80025a0:	4b60      	ldr	r3, [pc, #384]	@ (8002724 <xTaskGenericNotifyFromISR+0x2b0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <xTaskGenericNotifyFromISR+0x150>
        __asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	61bb      	str	r3, [r7, #24]
    }
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <xTaskGenericNotifyFromISR+0x148>
                    break;
 80025c0:	bf00      	nop
 80025c2:	e000      	b.n	80025c6 <xTaskGenericNotifyFromISR+0x152>
                    break;
 80025c4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80025c6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	f040 809f 	bne.w	800270e <xTaskGenericNotifyFromISR+0x29a>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80025d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <xTaskGenericNotifyFromISR+0x17c>
        __asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	617b      	str	r3, [r7, #20]
    }
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <xTaskGenericNotifyFromISR+0x178>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002728 <xTaskGenericNotifyFromISR+0x2b4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d15e      	bne.n	80026b6 <xTaskGenericNotifyFromISR+0x242>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800260e:	6892      	ldr	r2, [r2, #8]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002618:	3304      	adds	r3, #4
 800261a:	429a      	cmp	r2, r3
 800261c:	d103      	bne.n	8002626 <xTaskGenericNotifyFromISR+0x1b2>
 800261e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1e5a      	subs	r2, r3, #1
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263a:	2201      	movs	r2, #1
 800263c:	409a      	lsls	r2, r3
 800263e:	4b3b      	ldr	r3, [pc, #236]	@ (800272c <xTaskGenericNotifyFromISR+0x2b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	4a39      	ldr	r2, [pc, #228]	@ (800272c <xTaskGenericNotifyFromISR+0x2b8>)
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800264a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800264c:	4938      	ldr	r1, [pc, #224]	@ (8002730 <xTaskGenericNotifyFromISR+0x2bc>)
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	3304      	adds	r3, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800265e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002672:	3204      	adds	r2, #4
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4a29      	ldr	r2, [pc, #164]	@ (8002730 <xTaskGenericNotifyFromISR+0x2bc>)
 800268c:	441a      	add	r2, r3
 800268e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002690:	615a      	str	r2, [r3, #20]
 8002692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002696:	4926      	ldr	r1, [pc, #152]	@ (8002730 <xTaskGenericNotifyFromISR+0x2bc>)
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	1c59      	adds	r1, r3, #1
 80026a6:	4822      	ldr	r0, [pc, #136]	@ (8002730 <xTaskGenericNotifyFromISR+0x2bc>)
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4403      	add	r3, r0
 80026b2:	6019      	str	r1, [r3, #0]
 80026b4:	e01b      	b.n	80026ee <xTaskGenericNotifyFromISR+0x27a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80026b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <xTaskGenericNotifyFromISR+0x2c0>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80026bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026c0:	61da      	str	r2, [r3, #28]
 80026c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026c8:	621a      	str	r2, [r3, #32]
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026d0:	3218      	adds	r2, #24
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026d6:	f103 0218 	add.w	r2, r3, #24
 80026da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026e0:	4a14      	ldr	r2, [pc, #80]	@ (8002734 <xTaskGenericNotifyFromISR+0x2c0>)
 80026e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <xTaskGenericNotifyFromISR+0x2c0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	4a12      	ldr	r2, [pc, #72]	@ (8002734 <xTaskGenericNotifyFromISR+0x2c0>)
 80026ec:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <xTaskGenericNotifyFromISR+0x2c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d908      	bls.n	800270e <xTaskGenericNotifyFromISR+0x29a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80026fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <xTaskGenericNotifyFromISR+0x294>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <xTaskGenericNotifyFromISR+0x2c8>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002710:	613b      	str	r3, [r7, #16]
        __asm volatile
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f383 8811 	msr	BASEPRI, r3
    }
 8002718:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800271a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 800271c:	4618      	mov	r0, r3
 800271e:	3748      	adds	r7, #72	@ 0x48
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200001f8 	.word	0x200001f8
 8002728:	2000021c 	.word	0x2000021c
 800272c:	200001fc 	.word	0x200001fc
 8002730:	20000120 	.word	0x20000120
 8002734:	200001b4 	.word	0x200001b4
 8002738:	2000011c 	.word	0x2000011c
 800273c:	20000208 	.word	0x20000208

08002740 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800274a:	4b36      	ldr	r3, [pc, #216]	@ (8002824 <prvAddCurrentTaskToDelayedList+0xe4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002750:	4b35      	ldr	r3, [pc, #212]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3304      	adds	r3, #4
 8002756:	4618      	mov	r0, r3
 8002758:	f7fd ffc4 	bl	80006e4 <uxListRemove>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10b      	bne.n	800277a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002762:	4b31      	ldr	r3, [pc, #196]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	2201      	movs	r2, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	4b2e      	ldr	r3, [pc, #184]	@ (800282c <prvAddCurrentTaskToDelayedList+0xec>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4013      	ands	r3, r2
 8002776:	4a2d      	ldr	r2, [pc, #180]	@ (800282c <prvAddCurrentTaskToDelayedList+0xec>)
 8002778:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d124      	bne.n	80027cc <prvAddCurrentTaskToDelayedList+0x8c>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d021      	beq.n	80027cc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002788:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <prvAddCurrentTaskToDelayedList+0xf0>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	4b24      	ldr	r3, [pc, #144]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	6892      	ldr	r2, [r2, #8]
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	3204      	adds	r2, #4
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1d1a      	adds	r2, r3, #4
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002830 <prvAddCurrentTaskToDelayedList+0xf0>)
 80027bc:	615a      	str	r2, [r3, #20]
 80027be:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <prvAddCurrentTaskToDelayedList+0xf0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002830 <prvAddCurrentTaskToDelayedList+0xf0>)
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80027ca:	e026      	b.n	800281a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027d4:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d209      	bcs.n	80027f8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <prvAddCurrentTaskToDelayedList+0xf4>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3304      	adds	r3, #4
 80027ee:	4619      	mov	r1, r3
 80027f0:	4610      	mov	r0, r2
 80027f2:	f7fd ff3e 	bl	8000672 <vListInsert>
}
 80027f6:	e010      	b.n	800281a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <prvAddCurrentTaskToDelayedList+0xf8>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <prvAddCurrentTaskToDelayedList+0xe8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3304      	adds	r3, #4
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f7fd ff34 	bl	8000672 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800280a:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <prvAddCurrentTaskToDelayedList+0xfc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	429a      	cmp	r2, r3
 8002812:	d202      	bcs.n	800281a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002814:	4a09      	ldr	r2, [pc, #36]	@ (800283c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6013      	str	r3, [r2, #0]
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200001f8 	.word	0x200001f8
 8002828:	2000011c 	.word	0x2000011c
 800282c:	200001fc 	.word	0x200001fc
 8002830:	200001e0 	.word	0x200001e0
 8002834:	200001b0 	.word	0x200001b0
 8002838:	200001ac 	.word	0x200001ac
 800283c:	20000214 	.word	0x20000214

08002840 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800284a:	f000 faf7 	bl	8002e3c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <xTimerCreateTimerTask+0x58>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <xTimerCreateTimerTask+0x5c>)
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	2302      	movs	r3, #2
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2300      	movs	r3, #0
 8002860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002864:	490e      	ldr	r1, [pc, #56]	@ (80028a0 <xTimerCreateTimerTask+0x60>)
 8002866:	480f      	ldr	r0, [pc, #60]	@ (80028a4 <xTimerCreateTimerTask+0x64>)
 8002868:	f7fe fcde 	bl	8001228 <xTaskCreate>
 800286c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	603b      	str	r3, [r7, #0]
    }
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800288c:	687b      	ldr	r3, [r7, #4]
    }
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000250 	.word	0x20000250
 800289c:	20000254 	.word	0x20000254
 80028a0:	08009954 	.word	0x08009954
 80028a4:	08002a9d 	.word	0x08002a9d

080028a8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80028b6:	202c      	movs	r0, #44	@ 0x2c
 80028b8:	f000 fd72 	bl	80033a0 <pvPortMalloc>
 80028bc:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f805 	bl	80028ea <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80028e0:	697b      	ldr	r3, [r7, #20]
        }
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	617b      	str	r3, [r7, #20]
    }
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	e7fd      	b.n	8002912 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8002916:	f000 fa91 	bl	8002e3c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	3304      	adds	r3, #4
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fe6a 	bl	8000610 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	b2da      	uxtb	r2, r3
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	@ 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <xTimerGenericCommand+0x30>
        __asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	623b      	str	r3, [r7, #32]
    }
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <xTimerGenericCommand+0x98>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02a      	beq.n	80029ea <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	dc18      	bgt.n	80029d8 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80029a6:	f7ff fb17 	bl	8001fd8 <xTaskGetSchedulerState>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d109      	bne.n	80029c4 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80029b0:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <xTimerGenericCommand+0x98>)
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	f107 0114 	add.w	r1, r7, #20
 80029b8:	2300      	movs	r3, #0
 80029ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029bc:	f7fd ffc0 	bl	8000940 <xQueueGenericSend>
 80029c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80029c2:	e012      	b.n	80029ea <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80029c4:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <xTimerGenericCommand+0x98>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	f107 0114 	add.w	r1, r7, #20
 80029cc:	2300      	movs	r3, #0
 80029ce:	2200      	movs	r2, #0
 80029d0:	f7fd ffb6 	bl	8000940 <xQueueGenericSend>
 80029d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80029d6:	e008      	b.n	80029ea <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <xTimerGenericCommand+0x98>)
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	f107 0114 	add.w	r1, r7, #20
 80029e0:	2300      	movs	r3, #0
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	f7fe f8ae 	bl	8000b44 <xQueueGenericSendFromISR>
 80029e8:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80029ec:	4618      	mov	r0, r3
 80029ee:	3728      	adds	r7, #40	@ 0x28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000250 	.word	0x20000250

080029f8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002a04:	e008      	b.n	8002a18 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	18d1      	adds	r1, r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f8df 	bl	8002be8 <prvInsertTimerInActiveList>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ea      	bne.n	8002a06 <prvReloadTimer+0xe>
        }
    }
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a46:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <prvProcessExpiredTimer+0x5c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fe45 	bl	80006e4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff ffc3 	bl	80029f8 <prvReloadTimer>
 8002a72:	e008      	b.n	8002a86 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	4798      	blx	r3
    }
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000248 	.word	0x20000248

08002a9c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002aa4:	f107 0308 	add.w	r3, r7, #8
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f859 	bl	8002b60 <prvGetNextExpireTime>
 8002aae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f805 	bl	8002ac4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002aba:	f000 f8d7 	bl	8002c6c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002abe:	bf00      	nop
 8002ac0:	e7f0      	b.n	8002aa4 <prvTimerTask+0x8>
	...

08002ac4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002ace:	f7fe fd69 	bl	80015a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ad2:	f107 0308 	add.w	r3, r7, #8
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f866 	bl	8002ba8 <prvSampleTimeNow>
 8002adc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d130      	bne.n	8002b46 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <prvProcessTimerOrBlockTask+0x3c>
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d806      	bhi.n	8002b00 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002af2:	f7fe fd65 	bl	80015c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff9f 	bl	8002a3c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002afe:	e024      	b.n	8002b4a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b06:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <prvProcessTimerOrBlockTask+0x90>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <prvProcessTimerOrBlockTask+0x50>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <prvProcessTimerOrBlockTask+0x52>
 8002b14:	2300      	movs	r3, #0
 8002b16:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b18:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <prvProcessTimerOrBlockTask+0x94>)
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7fe fb4b 	bl	80011c0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002b2a:	f7fe fd49 	bl	80015c0 <xTaskResumeAll>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <prvProcessTimerOrBlockTask+0x98>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	f3bf 8f6f 	isb	sy
    }
 8002b44:	e001      	b.n	8002b4a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002b46:	f7fe fd3b 	bl	80015c0 <xTaskResumeAll>
    }
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000024c 	.word	0x2000024c
 8002b58:	20000250 	.word	0x20000250
 8002b5c:	e000ed04 	.word	0xe000ed04

08002b60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002b68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <prvGetNextExpireTime+0x44>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <prvGetNextExpireTime+0x16>
 8002b72:	2201      	movs	r2, #1
 8002b74:	e000      	b.n	8002b78 <prvGetNextExpireTime+0x18>
 8002b76:	2200      	movs	r2, #0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b84:	4b07      	ldr	r3, [pc, #28]	@ (8002ba4 <prvGetNextExpireTime+0x44>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	e001      	b.n	8002b94 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002b94:	68fb      	ldr	r3, [r7, #12]
    }
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000248 	.word	0x20000248

08002ba8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002bb0:	f7fe fe02 	bl	80017b8 <xTaskGetTickCount>
 8002bb4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <prvSampleTimeNow+0x3c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d205      	bcs.n	8002bcc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002bc0:	f000 f916 	bl	8002df0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e002      	b.n	8002bd2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002bd2:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <prvSampleTimeNow+0x3c>)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    }
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000258 	.word	0x20000258

08002be8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d812      	bhi.n	8002c34 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	1ad2      	subs	r2, r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d302      	bcc.n	8002c22 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e01b      	b.n	8002c5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <prvInsertTimerInActiveList+0x7c>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f7fd fd20 	bl	8000672 <vListInsert>
 8002c32:	e012      	b.n	8002c5a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d206      	bcs.n	8002c4a <prvInsertTimerInActiveList+0x62>
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e007      	b.n	8002c5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c4a:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <prvInsertTimerInActiveList+0x80>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3304      	adds	r3, #4
 8002c52:	4619      	mov	r1, r3
 8002c54:	4610      	mov	r0, r2
 8002c56:	f7fd fd0c 	bl	8000672 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002c5a:	697b      	ldr	r3, [r7, #20]
    }
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2000024c 	.word	0x2000024c
 8002c68:	20000248 	.word	0x20000248

08002c6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c72:	e0a9      	b.n	8002dc8 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f2c0 80a6 	blt.w	8002dc8 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fd29 	bl	80006e4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff87 	bl	8002ba8 <prvSampleTimeNow>
 8002c9a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	f200 808e 	bhi.w	8002dc2 <prvProcessReceivedCommands+0x156>
 8002ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cac <prvProcessReceivedCommands+0x40>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002cd1 	.word	0x08002cd1
 8002cb0:	08002cd1 	.word	0x08002cd1
 8002cb4:	08002d39 	.word	0x08002d39
 8002cb8:	08002d4d 	.word	0x08002d4d
 8002cbc:	08002d99 	.word	0x08002d99
 8002cc0:	08002cd1 	.word	0x08002cd1
 8002cc4:	08002cd1 	.word	0x08002cd1
 8002cc8:	08002d39 	.word	0x08002d39
 8002ccc:	08002d4d 	.word	0x08002d4d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	18d1      	adds	r1, r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	69f8      	ldr	r0, [r7, #28]
 8002cf0:	f7ff ff7a 	bl	8002be8 <prvInsertTimerInActiveList>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d065      	beq.n	8002dc6 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4619      	mov	r1, r3
 8002d14:	69f8      	ldr	r0, [r7, #28]
 8002d16:	f7ff fe6f 	bl	80029f8 <prvReloadTimer>
 8002d1a:	e008      	b.n	8002d2e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	69f8      	ldr	r0, [r7, #28]
 8002d34:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002d36:	e046      	b.n	8002dc6 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002d4a:	e03d      	b.n	8002dc8 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	617b      	str	r3, [r7, #20]
    }
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	18d1      	adds	r1, r2, r3
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	69f8      	ldr	r0, [r7, #28]
 8002d92:	f7ff ff29 	bl	8002be8 <prvInsertTimerInActiveList>
                        break;
 8002d96:	e017      	b.n	8002dc8 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8002da6:	69f8      	ldr	r0, [r7, #28]
 8002da8:	f000 fbb6 	bl	8003518 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002dac:	e00c      	b.n	8002dc8 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002dc0:	e002      	b.n	8002dc8 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <prvProcessReceivedCommands+0x15c>
                        break;
 8002dc6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <prvProcessReceivedCommands+0x180>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f107 0108 	add.w	r1, r7, #8
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd ff6c 	bl	8000cb0 <xQueueReceive>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f47f af4a 	bne.w	8002c74 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000250 	.word	0x20000250

08002df0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002df6:	e009      	b.n	8002e0c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <prvSwitchTimerLists+0x44>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002e02:	f04f 31ff 	mov.w	r1, #4294967295
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	f7ff fe18 	bl	8002a3c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <prvSwitchTimerLists+0x44>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002e16:	4b07      	ldr	r3, [pc, #28]	@ (8002e34 <prvSwitchTimerLists+0x44>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <prvSwitchTimerLists+0x48>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <prvSwitchTimerLists+0x44>)
 8002e22:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002e24:	4a04      	ldr	r2, [pc, #16]	@ (8002e38 <prvSwitchTimerLists+0x48>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6013      	str	r3, [r2, #0]
    }
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000248 	.word	0x20000248
 8002e38:	2000024c 	.word	0x2000024c

08002e3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002e40:	f000 f984 	bl	800314c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002e44:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <prvCheckForValidListAndQueue+0x54>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11d      	bne.n	8002e88 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002e4c:	4811      	ldr	r0, [pc, #68]	@ (8002e94 <prvCheckForValidListAndQueue+0x58>)
 8002e4e:	f7fd fbbf 	bl	80005d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002e52:	4811      	ldr	r0, [pc, #68]	@ (8002e98 <prvCheckForValidListAndQueue+0x5c>)
 8002e54:	f7fd fbbc 	bl	80005d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002e58:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <prvCheckForValidListAndQueue+0x60>)
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e94 <prvCheckForValidListAndQueue+0x58>)
 8002e5c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <prvCheckForValidListAndQueue+0x64>)
 8002e60:	4a0d      	ldr	r2, [pc, #52]	@ (8002e98 <prvCheckForValidListAndQueue+0x5c>)
 8002e62:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e64:	2200      	movs	r2, #0
 8002e66:	210c      	movs	r1, #12
 8002e68:	200a      	movs	r0, #10
 8002e6a:	f7fd fcf7 	bl	800085c <xQueueGenericCreate>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4a07      	ldr	r2, [pc, #28]	@ (8002e90 <prvCheckForValidListAndQueue+0x54>)
 8002e72:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <prvCheckForValidListAndQueue+0x54>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <prvCheckForValidListAndQueue+0x54>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4908      	ldr	r1, [pc, #32]	@ (8002ea4 <prvCheckForValidListAndQueue+0x68>)
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f94c 	bl	8001120 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e88:	f000 f992 	bl	80031b0 <vPortExitCritical>
    }
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000250 	.word	0x20000250
 8002e94:	20000220 	.word	0x20000220
 8002e98:	20000234 	.word	0x20000234
 8002e9c:	20000248 	.word	0x20000248
 8002ea0:	2000024c 	.word	0x2000024c
 8002ea4:	0800995c 	.word	0x0800995c

08002ea8 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <pvTimerGetTimerID+0x2a>
        __asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	60fb      	str	r3, [r7, #12]
    }
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	e7fd      	b.n	8002ece <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8002ed2:	f000 f93b 	bl	800314c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8002edc:	f000 f968 	bl	80031b0 <vPortExitCritical>

        return pvReturn;
 8002ee0:	693b      	ldr	r3, [r7, #16]
    }
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3b04      	subs	r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3b04      	subs	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f023 0201 	bic.w	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3b04      	subs	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f50 <pxPortInitialiseStack+0x64>)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3b14      	subs	r3, #20
 8002f26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3b04      	subs	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f06f 0202 	mvn.w	r2, #2
 8002f3a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3b20      	subs	r3, #32
 8002f40:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f42:	68fb      	ldr	r3, [r7, #12]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	08002f55 	.word	0x08002f55

08002f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f5e:	4b13      	ldr	r3, [pc, #76]	@ (8002fac <prvTaskExitError+0x58>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d00b      	beq.n	8002f80 <prvTaskExitError+0x2c>
        __asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	60fb      	str	r3, [r7, #12]
    }
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <prvTaskExitError+0x28>
        __asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	60bb      	str	r3, [r7, #8]
    }
 8002f92:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f94:	bf00      	nop
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0fc      	beq.n	8002f96 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000004 	.word	0x20000004

08002fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002fb0:	4b07      	ldr	r3, [pc, #28]	@ (8002fd0 <pxCurrentTCBConst2>)
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	6808      	ldr	r0, [r1, #0]
 8002fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fba:	f380 8809 	msr	PSP, r0
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f04f 0000 	mov.w	r0, #0
 8002fc6:	f380 8811 	msr	BASEPRI, r0
 8002fca:	4770      	bx	lr
 8002fcc:	f3af 8000 	nop.w

08002fd0 <pxCurrentTCBConst2>:
 8002fd0:	2000011c 	.word	0x2000011c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop

08002fd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002fd8:	4808      	ldr	r0, [pc, #32]	@ (8002ffc <prvPortStartFirstTask+0x24>)
 8002fda:	6800      	ldr	r0, [r0, #0]
 8002fdc:	6800      	ldr	r0, [r0, #0]
 8002fde:	f380 8808 	msr	MSP, r0
 8002fe2:	f04f 0000 	mov.w	r0, #0
 8002fe6:	f380 8814 	msr	CONTROL, r0
 8002fea:	b662      	cpsie	i
 8002fec:	b661      	cpsie	f
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	df00      	svc	0
 8002ff8:	bf00      	nop
 8002ffa:	0000      	.short	0x0000
 8002ffc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop

08003004 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800300a:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <xPortStartScheduler+0x124>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a47      	ldr	r2, [pc, #284]	@ (800312c <xPortStartScheduler+0x128>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d10b      	bne.n	800302c <xPortStartScheduler+0x28>
        __asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	613b      	str	r3, [r7, #16]
    }
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800302c:	4b3e      	ldr	r3, [pc, #248]	@ (8003128 <xPortStartScheduler+0x124>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3f      	ldr	r2, [pc, #252]	@ (8003130 <xPortStartScheduler+0x12c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10b      	bne.n	800304e <xPortStartScheduler+0x4a>
        __asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	60fb      	str	r3, [r7, #12]
    }
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	e7fd      	b.n	800304a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800304e:	4b39      	ldr	r3, [pc, #228]	@ (8003134 <xPortStartScheduler+0x130>)
 8003050:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	22ff      	movs	r2, #255	@ 0xff
 800305e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003070:	b2da      	uxtb	r2, r3
 8003072:	4b31      	ldr	r3, [pc, #196]	@ (8003138 <xPortStartScheduler+0x134>)
 8003074:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003076:	4b31      	ldr	r3, [pc, #196]	@ (800313c <xPortStartScheduler+0x138>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800307c:	e009      	b.n	8003092 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800307e:	4b2f      	ldr	r3, [pc, #188]	@ (800313c <xPortStartScheduler+0x138>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3b01      	subs	r3, #1
 8003084:	4a2d      	ldr	r2, [pc, #180]	@ (800313c <xPortStartScheduler+0x138>)
 8003086:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b80      	cmp	r3, #128	@ 0x80
 800309c:	d0ef      	beq.n	800307e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800309e:	4b27      	ldr	r3, [pc, #156]	@ (800313c <xPortStartScheduler+0x138>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1c3 0307 	rsb	r3, r3, #7
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d00b      	beq.n	80030c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	60bb      	str	r3, [r7, #8]
    }
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	e7fd      	b.n	80030be <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030c2:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <xPortStartScheduler+0x138>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <xPortStartScheduler+0x138>)
 80030ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <xPortStartScheduler+0x138>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030d4:	4a19      	ldr	r2, [pc, #100]	@ (800313c <xPortStartScheduler+0x138>)
 80030d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80030e0:	4b17      	ldr	r3, [pc, #92]	@ (8003140 <xPortStartScheduler+0x13c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a16      	ldr	r2, [pc, #88]	@ (8003140 <xPortStartScheduler+0x13c>)
 80030e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80030ec:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <xPortStartScheduler+0x13c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	@ (8003140 <xPortStartScheduler+0x13c>)
 80030f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80030f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80030f8:	f000 f8e0 	bl	80032bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80030fc:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <xPortStartScheduler+0x140>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003102:	f000 f8ff 	bl	8003304 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003106:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <xPortStartScheduler+0x144>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a0f      	ldr	r2, [pc, #60]	@ (8003148 <xPortStartScheduler+0x144>)
 800310c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003110:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003112:	f7ff ff61 	bl	8002fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003116:	f7fe fc83 	bl	8001a20 <vTaskSwitchContext>
    prvTaskExitError();
 800311a:	f7ff ff1b 	bl	8002f54 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	e000ed00 	.word	0xe000ed00
 800312c:	410fc271 	.word	0x410fc271
 8003130:	410fc270 	.word	0x410fc270
 8003134:	e000e400 	.word	0xe000e400
 8003138:	2000025c 	.word	0x2000025c
 800313c:	20000260 	.word	0x20000260
 8003140:	e000ed20 	.word	0xe000ed20
 8003144:	20000004 	.word	0x20000004
 8003148:	e000ef34 	.word	0xe000ef34

0800314c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
        __asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	607b      	str	r3, [r7, #4]
    }
 8003164:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003166:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <vPortEnterCritical+0x5c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	4a0e      	ldr	r2, [pc, #56]	@ (80031a8 <vPortEnterCritical+0x5c>)
 800316e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003170:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <vPortEnterCritical+0x5c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d110      	bne.n	800319a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003178:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <vPortEnterCritical+0x60>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <vPortEnterCritical+0x4e>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	603b      	str	r3, [r7, #0]
    }
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	e7fd      	b.n	8003196 <vPortEnterCritical+0x4a>
    }
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000004 	.word	0x20000004
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80031b6:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <vPortExitCritical+0x50>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10b      	bne.n	80031d6 <vPortExitCritical+0x26>
        __asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	607b      	str	r3, [r7, #4]
    }
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	e7fd      	b.n	80031d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <vPortExitCritical+0x50>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3b01      	subs	r3, #1
 80031dc:	4a08      	ldr	r2, [pc, #32]	@ (8003200 <vPortExitCritical+0x50>)
 80031de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80031e0:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <vPortExitCritical+0x50>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <vPortExitCritical+0x44>
 80031e8:	2300      	movs	r3, #0
 80031ea:	603b      	str	r3, [r7, #0]
        __asm volatile
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f383 8811 	msr	BASEPRI, r3
    }
 80031f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20000004 	.word	0x20000004
	...

08003210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003210:	f3ef 8009 	mrs	r0, PSP
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <pxCurrentTCBConst>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	f01e 0f10 	tst.w	lr, #16
 8003220:	bf08      	it	eq
 8003222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322a:	6010      	str	r0, [r2, #0]
 800322c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003234:	f380 8811 	msr	BASEPRI, r0
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f7fe fbee 	bl	8001a20 <vTaskSwitchContext>
 8003244:	f04f 0000 	mov.w	r0, #0
 8003248:	f380 8811 	msr	BASEPRI, r0
 800324c:	bc09      	pop	{r0, r3}
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	6808      	ldr	r0, [r1, #0]
 8003252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003256:	f01e 0f10 	tst.w	lr, #16
 800325a:	bf08      	it	eq
 800325c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003260:	f380 8809 	msr	PSP, r0
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	f3af 8000 	nop.w

08003270 <pxCurrentTCBConst>:
 8003270:	2000011c 	.word	0x2000011c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop

08003278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
        __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	607b      	str	r3, [r7, #4]
    }
 8003290:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003292:	f7fe faad 	bl	80017f0 <xTaskIncrementTick>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <SysTick_Handler+0x40>)
 800329e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	2300      	movs	r3, #0
 80032a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f383 8811 	msr	BASEPRI, r3
    }
 80032ae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <vPortSetupTimerInterrupt+0x34>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032c6:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <vPortSetupTimerInterrupt+0x38>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032cc:	4b0a      	ldr	r3, [pc, #40]	@ (80032f8 <vPortSetupTimerInterrupt+0x3c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <vPortSetupTimerInterrupt+0x40>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	4a09      	ldr	r2, [pc, #36]	@ (8003300 <vPortSetupTimerInterrupt+0x44>)
 80032da:	3b01      	subs	r3, #1
 80032dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032de:	4b04      	ldr	r3, [pc, #16]	@ (80032f0 <vPortSetupTimerInterrupt+0x34>)
 80032e0:	2207      	movs	r2, #7
 80032e2:	601a      	str	r2, [r3, #0]
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000e010 	.word	0xe000e010
 80032f4:	e000e018 	.word	0xe000e018
 80032f8:	20000058 	.word	0x20000058
 80032fc:	10624dd3 	.word	0x10624dd3
 8003300:	e000e014 	.word	0xe000e014

08003304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003314 <vPortEnableVFP+0x10>
 8003308:	6801      	ldr	r1, [r0, #0]
 800330a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800330e:	6001      	str	r1, [r0, #0]
 8003310:	4770      	bx	lr
 8003312:	0000      	.short	0x0000
 8003314:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop

0800331c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003322:	f3ef 8305 	mrs	r3, IPSR
 8003326:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d915      	bls.n	800335a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800332e:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <vPortValidateInterruptPriority+0x74>)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003338:	4b16      	ldr	r3, [pc, #88]	@ (8003394 <vPortValidateInterruptPriority+0x78>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	7afa      	ldrb	r2, [r7, #11]
 800333e:	429a      	cmp	r2, r3
 8003340:	d20b      	bcs.n	800335a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	607b      	str	r3, [r7, #4]
    }
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	e7fd      	b.n	8003356 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800335a:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <vPortValidateInterruptPriority+0x7c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <vPortValidateInterruptPriority+0x80>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d90b      	bls.n	8003382 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	603b      	str	r3, [r7, #0]
    }
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	e7fd      	b.n	800337e <vPortValidateInterruptPriority+0x62>
    }
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000e3f0 	.word	0xe000e3f0
 8003394:	2000025c 	.word	0x2000025c
 8003398:	e000ed0c 	.word	0xe000ed0c
 800339c:	20000260 	.word	0x20000260

080033a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	@ 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80033ac:	f7fe f8fa 	bl	80015a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80033b0:	4b54      	ldr	r3, [pc, #336]	@ (8003504 <pvPortMalloc+0x164>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80033b8:	f000 f90c 	bl	80035d4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d012      	beq.n	80033e8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80033c2:	2208      	movs	r2, #8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	3308      	adds	r3, #8
 80033ce:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d804      	bhi.n	80033e4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	e001      	b.n	80033e8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db71      	blt.n	80034d2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d06e      	beq.n	80034d2 <pvPortMalloc+0x132>
 80033f4:	4b44      	ldr	r3, [pc, #272]	@ (8003508 <pvPortMalloc+0x168>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d869      	bhi.n	80034d2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80033fe:	4b43      	ldr	r3, [pc, #268]	@ (800350c <pvPortMalloc+0x16c>)
 8003400:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003402:	4b42      	ldr	r3, [pc, #264]	@ (800350c <pvPortMalloc+0x16c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003408:	e004      	b.n	8003414 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	429a      	cmp	r2, r3
 800341c:	d903      	bls.n	8003426 <pvPortMalloc+0x86>
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f1      	bne.n	800340a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003426:	4b37      	ldr	r3, [pc, #220]	@ (8003504 <pvPortMalloc+0x164>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342c:	429a      	cmp	r2, r3
 800342e:	d050      	beq.n	80034d2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2208      	movs	r2, #8
 8003436:	4413      	add	r3, r2
 8003438:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	1ad2      	subs	r2, r2, r3
 800344a:	2308      	movs	r3, #8
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	429a      	cmp	r2, r3
 8003450:	d920      	bls.n	8003494 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <pvPortMalloc+0xdc>
        __asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	613b      	str	r3, [r7, #16]
    }
 8003476:	bf00      	nop
 8003478:	bf00      	nop
 800347a:	e7fd      	b.n	8003478 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	1ad2      	subs	r2, r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f000 f8fc 	bl	800368c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003494:	4b1c      	ldr	r3, [pc, #112]	@ (8003508 <pvPortMalloc+0x168>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	4a1a      	ldr	r2, [pc, #104]	@ (8003508 <pvPortMalloc+0x168>)
 80034a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034a2:	4b19      	ldr	r3, [pc, #100]	@ (8003508 <pvPortMalloc+0x168>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003510 <pvPortMalloc+0x170>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d203      	bcs.n	80034b6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80034ae:	4b16      	ldr	r3, [pc, #88]	@ (8003508 <pvPortMalloc+0x168>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <pvPortMalloc+0x170>)
 80034b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80034c8:	4b12      	ldr	r3, [pc, #72]	@ (8003514 <pvPortMalloc+0x174>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a11      	ldr	r2, [pc, #68]	@ (8003514 <pvPortMalloc+0x174>)
 80034d0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80034d2:	f7fe f875 	bl	80015c0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <pvPortMalloc+0x158>
        __asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	60fb      	str	r3, [r7, #12]
    }
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	e7fd      	b.n	80034f4 <pvPortMalloc+0x154>
    return pvReturn;
 80034f8:	69fb      	ldr	r3, [r7, #28]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3728      	adds	r7, #40	@ 0x28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20012e6c 	.word	0x20012e6c
 8003508:	20012e70 	.word	0x20012e70
 800350c:	20012e64 	.word	0x20012e64
 8003510:	20012e74 	.word	0x20012e74
 8003514:	20012e78 	.word	0x20012e78

08003518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d04b      	beq.n	80035c2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800352a:	2308      	movs	r3, #8
 800352c:	425b      	negs	r3, r3
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4413      	add	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0b      	blt.n	8003558 <vPortFree+0x40>
        __asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60fb      	str	r3, [r7, #12]
    }
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00b      	beq.n	8003578 <vPortFree+0x60>
        __asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	60bb      	str	r3, [r7, #8]
    }
 8003572:	bf00      	nop
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	0fdb      	lsrs	r3, r3, #31
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01c      	beq.n	80035c2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d118      	bne.n	80035c2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800359c:	f7fe f802 	bl	80015a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <vPortFree+0xb4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	4a08      	ldr	r2, [pc, #32]	@ (80035cc <vPortFree+0xb4>)
 80035ac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80035ae:	6938      	ldr	r0, [r7, #16]
 80035b0:	f000 f86c 	bl	800368c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <vPortFree+0xb8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3301      	adds	r3, #1
 80035ba:	4a05      	ldr	r2, [pc, #20]	@ (80035d0 <vPortFree+0xb8>)
 80035bc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80035be:	f7fd ffff 	bl	80015c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20012e70 	.word	0x20012e70
 80035d0:	20012e7c 	.word	0x20012e7c

080035d4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80035da:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80035de:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80035e0:	4b25      	ldr	r3, [pc, #148]	@ (8003678 <prvHeapInit+0xa4>)
 80035e2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00c      	beq.n	8003608 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3307      	adds	r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0307 	bic.w	r3, r3, #7
 80035fa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	4a1d      	ldr	r2, [pc, #116]	@ (8003678 <prvHeapInit+0xa4>)
 8003604:	4413      	add	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800360c:	4a1b      	ldr	r2, [pc, #108]	@ (800367c <prvHeapInit+0xa8>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003612:	4b1a      	ldr	r3, [pc, #104]	@ (800367c <prvHeapInit+0xa8>)
 8003614:	2200      	movs	r2, #0
 8003616:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	4413      	add	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003620:	2208      	movs	r2, #8
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0307 	bic.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a13      	ldr	r2, [pc, #76]	@ (8003680 <prvHeapInit+0xac>)
 8003634:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <prvHeapInit+0xac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800363e:	4b10      	ldr	r3, [pc, #64]	@ (8003680 <prvHeapInit+0xac>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	1ad2      	subs	r2, r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003654:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <prvHeapInit+0xac>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <prvHeapInit+0xb0>)
 8003662:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a07      	ldr	r2, [pc, #28]	@ (8003688 <prvHeapInit+0xb4>)
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	20000264 	.word	0x20000264
 800367c:	20012e64 	.word	0x20012e64
 8003680:	20012e6c 	.word	0x20012e6c
 8003684:	20012e74 	.word	0x20012e74
 8003688:	20012e70 	.word	0x20012e70

0800368c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003694:	4b28      	ldr	r3, [pc, #160]	@ (8003738 <prvInsertBlockIntoFreeList+0xac>)
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e002      	b.n	80036a0 <prvInsertBlockIntoFreeList+0x14>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d8f7      	bhi.n	800369a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d108      	bne.n	80036ce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	441a      	add	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	441a      	add	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d118      	bne.n	8003714 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4b15      	ldr	r3, [pc, #84]	@ (800373c <prvInsertBlockIntoFreeList+0xb0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d00d      	beq.n	800370a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e008      	b.n	800371c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800370a:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <prvInsertBlockIntoFreeList+0xb0>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e003      	b.n	800371c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d002      	beq.n	800372a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20012e64 	.word	0x20012e64
 800373c:	20012e6c 	.word	0x20012e6c

08003740 <DateTime_voidShowDateTime>:
static const char *WeekDays[NUM_DAYS_IN_WEEK] = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};

/* Public Functions */

void DateTime_voidShowDateTime(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08e      	sub	sp, #56	@ 0x38
 8003744:	af04      	add	r7, sp, #16
	static char Local_TimeStr[50U];
	static char Local_DateStr[50U];

	const char *Local_pcTimeFormat;
	char *Local_pTime = Local_TimeStr;
 8003746:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <DateTime_voidShowDateTime+0xa4>)
 8003748:	623b      	str	r3, [r7, #32]
	char *Local_pDate = Local_DateStr;
 800374a:	4b27      	ldr	r3, [pc, #156]	@ (80037e8 <DateTime_voidShowDateTime+0xa8>)
 800374c:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef Local_Date;
	RTC_TimeTypeDef Local_Time;

	(void) HAL_RTC_GetTime(&hrtc, &Local_Time, RTC_FORMAT_BIN);
 800374e:	1d3b      	adds	r3, r7, #4
 8003750:	2200      	movs	r2, #0
 8003752:	4619      	mov	r1, r3
 8003754:	4825      	ldr	r0, [pc, #148]	@ (80037ec <DateTime_voidShowDateTime+0xac>)
 8003756:	f003 fb00 	bl	8006d5a <HAL_RTC_GetTime>
	(void) HAL_RTC_GetDate(&hrtc, &Local_Date, RTC_FORMAT_BIN);
 800375a:	f107 0318 	add.w	r3, r7, #24
 800375e:	2200      	movs	r2, #0
 8003760:	4619      	mov	r1, r3
 8003762:	4822      	ldr	r0, [pc, #136]	@ (80037ec <DateTime_voidShowDateTime+0xac>)
 8003764:	f003 fbdb 	bl	8006f1e <HAL_RTC_GetDate>

	/* Prepare the format */
	Local_pcTimeFormat = (RTC_HOURFORMAT12_AM == Local_Time.TimeFormat) ? "AM" : "PM";
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <DateTime_voidShowDateTime+0x32>
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <DateTime_voidShowDateTime+0xb0>)
 8003770:	e000      	b.n	8003774 <DateTime_voidShowDateTime+0x34>
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <DateTime_voidShowDateTime+0xb4>)
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Conver the time format into formatted sting: HH:MM:SS [AM/PM] */
	(void) sprintf((char *) Local_TimeStr,
			"%s: %02d:%02d:%02d [%s]",
			"\r\nCurrent Date & Time", Local_Time.Hours, Local_Time.Minutes,
 8003776:	793b      	ldrb	r3, [r7, #4]
	(void) sprintf((char *) Local_TimeStr,
 8003778:	4618      	mov	r0, r3
			"\r\nCurrent Date & Time", Local_Time.Hours, Local_Time.Minutes,
 800377a:	797b      	ldrb	r3, [r7, #5]
	(void) sprintf((char *) Local_TimeStr,
 800377c:	461a      	mov	r2, r3
			Local_Time.Seconds, Local_pcTimeFormat);
 800377e:	79bb      	ldrb	r3, [r7, #6]
	(void) sprintf((char *) Local_TimeStr,
 8003780:	4619      	mov	r1, r3
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	9302      	str	r3, [sp, #8]
 8003786:	9101      	str	r1, [sp, #4]
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	4603      	mov	r3, r0
 800378c:	4a1a      	ldr	r2, [pc, #104]	@ (80037f8 <DateTime_voidShowDateTime+0xb8>)
 800378e:	491b      	ldr	r1, [pc, #108]	@ (80037fc <DateTime_voidShowDateTime+0xbc>)
 8003790:	4814      	ldr	r0, [pc, #80]	@ (80037e4 <DateTime_voidShowDateTime+0xa4>)
 8003792:	f005 f89d 	bl	80088d0 <siprintf>

	/* Print the current time */
	(void) xQueueSend(TxQueueHandle, (const void *) &Local_pTime, portMAX_DELAY);
 8003796:	4b1a      	ldr	r3, [pc, #104]	@ (8003800 <DateTime_voidShowDateTime+0xc0>)
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	f107 0120 	add.w	r1, r7, #32
 800379e:	2300      	movs	r3, #0
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	f7fd f8cc 	bl	8000940 <xQueueGenericSend>

	/* Conver the date format into formatted sting: Day - Month - year */
	(void) sprintf((char *) Local_DateStr,
			"\t%s %02d/%02d/20%02d\r\n", WeekDays[Local_Date.WeekDay - 1U],
 80037a8:	7e3b      	ldrb	r3, [r7, #24]
 80037aa:	3b01      	subs	r3, #1
	(void) sprintf((char *) Local_DateStr,
 80037ac:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <DateTime_voidShowDateTime+0xc4>)
 80037ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
			Local_Date.Date, Local_Date.Month, Local_Date.Year);
 80037b2:	7ebb      	ldrb	r3, [r7, #26]
	(void) sprintf((char *) Local_DateStr,
 80037b4:	4618      	mov	r0, r3
			Local_Date.Date, Local_Date.Month, Local_Date.Year);
 80037b6:	7e7b      	ldrb	r3, [r7, #25]
 80037b8:	7ef9      	ldrb	r1, [r7, #27]
	(void) sprintf((char *) Local_DateStr,
 80037ba:	9101      	str	r1, [sp, #4]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	4603      	mov	r3, r0
 80037c0:	4911      	ldr	r1, [pc, #68]	@ (8003808 <DateTime_voidShowDateTime+0xc8>)
 80037c2:	4809      	ldr	r0, [pc, #36]	@ (80037e8 <DateTime_voidShowDateTime+0xa8>)
 80037c4:	f005 f884 	bl	80088d0 <siprintf>

	/* Print the current date */
	(void) xQueueSend(TxQueueHandle, (const void *) &Local_pDate, portMAX_DELAY);
 80037c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <DateTime_voidShowDateTime+0xc0>)
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	f107 011c 	add.w	r1, r7, #28
 80037d0:	2300      	movs	r3, #0
 80037d2:	f04f 32ff 	mov.w	r2, #4294967295
 80037d6:	f7fd f8b3 	bl	8000940 <xQueueGenericSend>
}
 80037da:	bf00      	nop
 80037dc:	3728      	adds	r7, #40	@ 0x28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20012e80 	.word	0x20012e80
 80037e8:	20012eb4 	.word	0x20012eb4
 80037ec:	20012ef4 	.word	0x20012ef4
 80037f0:	08009980 	.word	0x08009980
 80037f4:	08009984 	.word	0x08009984
 80037f8:	08009988 	.word	0x08009988
 80037fc:	080099a0 	.word	0x080099a0
 8003800:	20012f74 	.word	0x20012f74
 8003804:	20000008 	.word	0x20000008
 8003808:	080099b8 	.word	0x080099b8

0800380c <DateTime_voidConfigDate>:

void DateTime_voidConfigDate(uint8_t Copy_u8WeekDay, uint8_t Copy_u8Day, uint8_t Copy_u8Mon, uint8_t Copy_u8Year)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	461a      	mov	r2, r3
 800381a:	4623      	mov	r3, r4
 800381c:	71fb      	strb	r3, [r7, #7]
 800381e:	4603      	mov	r3, r0
 8003820:	71bb      	strb	r3, [r7, #6]
 8003822:	460b      	mov	r3, r1
 8003824:	717b      	strb	r3, [r7, #5]
 8003826:	4613      	mov	r3, r2
 8003828:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef Local_Date;

	Local_Date.WeekDay = Copy_u8WeekDay;
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	733b      	strb	r3, [r7, #12]
	Local_Date.Date = Copy_u8Day;
 800382e:	79bb      	ldrb	r3, [r7, #6]
 8003830:	73bb      	strb	r3, [r7, #14]
	Local_Date.Month = Copy_u8Mon;
 8003832:	797b      	ldrb	r3, [r7, #5]
 8003834:	737b      	strb	r3, [r7, #13]
	Local_Date.Year = Copy_u8Year;
 8003836:	793b      	ldrb	r3, [r7, #4]
 8003838:	73fb      	strb	r3, [r7, #15]

	(void) HAL_RTC_SetDate(&hrtc, &Local_Date, RTC_FORMAT_BIN);
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	2200      	movs	r2, #0
 8003840:	4619      	mov	r1, r3
 8003842:	4803      	ldr	r0, [pc, #12]	@ (8003850 <DateTime_voidConfigDate+0x44>)
 8003844:	f003 fae7 	bl	8006e16 <HAL_RTC_SetDate>
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	bd90      	pop	{r4, r7, pc}
 8003850:	20012ef4 	.word	0x20012ef4

08003854 <DateTime_voidConfigTime>:

void DateTime_voidConfigTime(uint8_t Copy_u8Hour12Fmt, uint8_t Copy_u8Hour, uint8_t Copy_u8Min, uint8_t Copy_u8Sec)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b089      	sub	sp, #36	@ 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	4604      	mov	r4, r0
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4623      	mov	r3, r4
 8003864:	71fb      	strb	r3, [r7, #7]
 8003866:	4603      	mov	r3, r0
 8003868:	71bb      	strb	r3, [r7, #6]
 800386a:	460b      	mov	r3, r1
 800386c:	717b      	strb	r3, [r7, #5]
 800386e:	4613      	mov	r3, r2
 8003870:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef Local_Time = {0U};
 8003872:	f107 030c 	add.w	r3, r7, #12
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	609a      	str	r2, [r3, #8]
 800387e:	60da      	str	r2, [r3, #12]
 8003880:	611a      	str	r2, [r3, #16]

	Local_Time.TimeFormat = Copy_u8Hour12Fmt;
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	73fb      	strb	r3, [r7, #15]
	Local_Time.Hours = Copy_u8Hour;
 8003886:	79bb      	ldrb	r3, [r7, #6]
 8003888:	733b      	strb	r3, [r7, #12]
	Local_Time.Minutes = Copy_u8Min;
 800388a:	797b      	ldrb	r3, [r7, #5]
 800388c:	737b      	strb	r3, [r7, #13]
	Local_Time.Seconds = Copy_u8Sec;
 800388e:	793b      	ldrb	r3, [r7, #4]
 8003890:	73bb      	strb	r3, [r7, #14]

	(void) HAL_RTC_SetTime(&hrtc, &Local_Time, RTC_FORMAT_BIN);
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	2200      	movs	r2, #0
 8003898:	4619      	mov	r1, r3
 800389a:	4803      	ldr	r0, [pc, #12]	@ (80038a8 <DateTime_voidConfigTime+0x54>)
 800389c:	f003 f9c3 	bl	8006c26 <HAL_RTC_SetTime>
}
 80038a0:	bf00      	nop
 80038a2:	3724      	adds	r7, #36	@ 0x24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd90      	pop	{r4, r7, pc}
 80038a8:	20012ef4 	.word	0x20012ef4

080038ac <DateTime_u8IsDateCfgValid>:

uint8_t DateTime_u8IsDateCfgValid(uint8_t Copy_u8WeekDay, uint8_t Copy_u8Day, uint8_t Copy_u8Mon, uint8_t Copy_u8Year)
{
 80038ac:	b490      	push	{r4, r7}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4604      	mov	r4, r0
 80038b4:	4608      	mov	r0, r1
 80038b6:	4611      	mov	r1, r2
 80038b8:	461a      	mov	r2, r3
 80038ba:	4623      	mov	r3, r4
 80038bc:	71fb      	strb	r3, [r7, #7]
 80038be:	4603      	mov	r3, r0
 80038c0:	71bb      	strb	r3, [r7, #6]
 80038c2:	460b      	mov	r3, r1
 80038c4:	717b      	strb	r3, [r7, #5]
 80038c6:	4613      	mov	r3, r2
 80038c8:	713b      	strb	r3, [r7, #4]
	uint8_t Local_u8ValidityState = 1U;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
	static uint8_t Local_u8DaysInMonths[12U] = { 31U, 28U, 31U, 30U, 31U, 30U, 31U, 31U, 30U, 31U, 30U, 31U };

	Local_u8DaysInMonths[1U] = (IS_LEAP_YEAR(2000UL + Copy_u8Year)) ? 29U : 28U;
 80038ce:	793b      	ldrb	r3, [r7, #4]
 80038d0:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 80038d4:	4b21      	ldr	r3, [pc, #132]	@ (800395c <DateTime_u8IsDateCfgValid+0xb0>)
 80038d6:	fba3 1302 	umull	r1, r3, r3, r2
 80038da:	09db      	lsrs	r3, r3, #7
 80038dc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <DateTime_u8IsDateCfgValid+0x62>
 80038ea:	793b      	ldrb	r3, [r7, #4]
 80038ec:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 80038f0:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <DateTime_u8IsDateCfgValid+0xb0>)
 80038f2:	fba3 1302 	umull	r1, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2164      	movs	r1, #100	@ 0x64
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d006      	beq.n	8003912 <DateTime_u8IsDateCfgValid+0x66>
 8003904:	793b      	ldrb	r3, [r7, #4]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <DateTime_u8IsDateCfgValid+0x66>
 800390e:	221d      	movs	r2, #29
 8003910:	e000      	b.n	8003914 <DateTime_u8IsDateCfgValid+0x68>
 8003912:	221c      	movs	r2, #28
 8003914:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <DateTime_u8IsDateCfgValid+0xb4>)
 8003916:	705a      	strb	r2, [r3, #1]

	if ((Copy_u8Year > 99U) || (Copy_u8Mon > 12U) || (Copy_u8Mon == 0U)
 8003918:	793b      	ldrb	r3, [r7, #4]
 800391a:	2b63      	cmp	r3, #99	@ 0x63
 800391c:	d815      	bhi.n	800394a <DateTime_u8IsDateCfgValid+0x9e>
 800391e:	797b      	ldrb	r3, [r7, #5]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d812      	bhi.n	800394a <DateTime_u8IsDateCfgValid+0x9e>
 8003924:	797b      	ldrb	r3, [r7, #5]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00f      	beq.n	800394a <DateTime_u8IsDateCfgValid+0x9e>
			|| (Copy_u8Day == 0U) || (Copy_u8Day > Local_u8DaysInMonths[Copy_u8Mon - 1U])
 800392a:	79bb      	ldrb	r3, [r7, #6]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00c      	beq.n	800394a <DateTime_u8IsDateCfgValid+0x9e>
 8003930:	797b      	ldrb	r3, [r7, #5]
 8003932:	3b01      	subs	r3, #1
 8003934:	4a0a      	ldr	r2, [pc, #40]	@ (8003960 <DateTime_u8IsDateCfgValid+0xb4>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	79ba      	ldrb	r2, [r7, #6]
 800393a:	429a      	cmp	r2, r3
 800393c:	d805      	bhi.n	800394a <DateTime_u8IsDateCfgValid+0x9e>
			|| (Copy_u8WeekDay < RTC_WEEKDAY_MONDAY) || (Copy_u8WeekDay > RTC_WEEKDAY_SUNDAY))
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <DateTime_u8IsDateCfgValid+0x9e>
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	2b07      	cmp	r3, #7
 8003948:	d901      	bls.n	800394e <DateTime_u8IsDateCfgValid+0xa2>
	{
		Local_u8ValidityState = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ValidityState;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bc90      	pop	{r4, r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	51eb851f 	.word	0x51eb851f
 8003960:	20000024 	.word	0x20000024

08003964 <DateTime_u8IsTimeCfgValid>:

uint8_t DateTime_u8IsTimeCfgValid(uint8_t Copy_u8Hour12Fmt, uint8_t Copy_u8Hour, uint8_t Copy_u8Min, uint8_t Copy_u8Sec)
{
 8003964:	b490      	push	{r4, r7}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	4604      	mov	r4, r0
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	461a      	mov	r2, r3
 8003972:	4623      	mov	r3, r4
 8003974:	71fb      	strb	r3, [r7, #7]
 8003976:	4603      	mov	r3, r0
 8003978:	71bb      	strb	r3, [r7, #6]
 800397a:	460b      	mov	r3, r1
 800397c:	717b      	strb	r3, [r7, #5]
 800397e:	4613      	mov	r3, r2
 8003980:	713b      	strb	r3, [r7, #4]
	uint8_t Local_u8ValidityState = 1U;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]

	if (((Copy_u8Hour12Fmt != RTC_HOURFORMAT12_PM) && (Copy_u8Hour12Fmt != RTC_HOURFORMAT12_AM))
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <DateTime_u8IsTimeCfgValid+0x2e>
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <DateTime_u8IsTimeCfgValid+0x46>
			|| (Copy_u8Hour > 12U) || (0U == Copy_u8Hour)
 8003992:	79bb      	ldrb	r3, [r7, #6]
 8003994:	2b0c      	cmp	r3, #12
 8003996:	d808      	bhi.n	80039aa <DateTime_u8IsTimeCfgValid+0x46>
 8003998:	79bb      	ldrb	r3, [r7, #6]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <DateTime_u8IsTimeCfgValid+0x46>
			|| (Copy_u8Min > 59U) || (Copy_u8Sec > 59U))
 800399e:	797b      	ldrb	r3, [r7, #5]
 80039a0:	2b3b      	cmp	r3, #59	@ 0x3b
 80039a2:	d802      	bhi.n	80039aa <DateTime_u8IsTimeCfgValid+0x46>
 80039a4:	793b      	ldrb	r3, [r7, #4]
 80039a6:	2b3b      	cmp	r3, #59	@ 0x3b
 80039a8:	d901      	bls.n	80039ae <DateTime_u8IsTimeCfgValid+0x4a>
	{
		Local_u8ValidityState = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ValidityState;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc90      	pop	{r4, r7}
 80039b8:	4770      	bx	lr
	...

080039bc <DateTime_voidReportDateTime_ITM>:

void DateTime_voidReportDateTime_ITM(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	@ 0x28
 80039c0:	af02      	add	r7, sp, #8
	const char *Local_pcTimeFormat;

	RTC_DateTypeDef Local_Date;
	RTC_TimeTypeDef Local_Time;

	(void) HAL_RTC_GetTime(&hrtc, &Local_Time, RTC_FORMAT_BIN);
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	2200      	movs	r2, #0
 80039c6:	4619      	mov	r1, r3
 80039c8:	4817      	ldr	r0, [pc, #92]	@ (8003a28 <DateTime_voidReportDateTime_ITM+0x6c>)
 80039ca:	f003 f9c6 	bl	8006d5a <HAL_RTC_GetTime>
	(void) HAL_RTC_GetDate(&hrtc, &Local_Date, RTC_FORMAT_BIN);
 80039ce:	f107 0318 	add.w	r3, r7, #24
 80039d2:	2200      	movs	r2, #0
 80039d4:	4619      	mov	r1, r3
 80039d6:	4814      	ldr	r0, [pc, #80]	@ (8003a28 <DateTime_voidReportDateTime_ITM+0x6c>)
 80039d8:	f003 faa1 	bl	8006f1e <HAL_RTC_GetDate>

	/* Prepare the format */
	Local_pcTimeFormat = (RTC_HOURFORMAT12_AM == Local_Time.TimeFormat) ? "AM" : "PM";
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <DateTime_voidReportDateTime_ITM+0x2a>
 80039e2:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <DateTime_voidReportDateTime_ITM+0x70>)
 80039e4:	e000      	b.n	80039e8 <DateTime_voidReportDateTime_ITM+0x2c>
 80039e6:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <DateTime_voidReportDateTime_ITM+0x74>)
 80039e8:	61fb      	str	r3, [r7, #28]

	/* Print the current time */
	(void) printf("\r\nCurrent Date & Time: %02d:%02d:%02d [%s]",
			Local_Time.Hours, Local_Time.Minutes,Local_Time.Seconds, Local_pcTimeFormat);
 80039ea:	793b      	ldrb	r3, [r7, #4]
	(void) printf("\r\nCurrent Date & Time: %02d:%02d:%02d [%s]",
 80039ec:	4619      	mov	r1, r3
			Local_Time.Hours, Local_Time.Minutes,Local_Time.Seconds, Local_pcTimeFormat);
 80039ee:	797b      	ldrb	r3, [r7, #5]
	(void) printf("\r\nCurrent Date & Time: %02d:%02d:%02d [%s]",
 80039f0:	461a      	mov	r2, r3
			Local_Time.Hours, Local_Time.Minutes,Local_Time.Seconds, Local_pcTimeFormat);
 80039f2:	79bb      	ldrb	r3, [r7, #6]
	(void) printf("\r\nCurrent Date & Time: %02d:%02d:%02d [%s]",
 80039f4:	4618      	mov	r0, r3
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	4603      	mov	r3, r0
 80039fc:	480d      	ldr	r0, [pc, #52]	@ (8003a34 <DateTime_voidReportDateTime_ITM+0x78>)
 80039fe:	f004 ff55 	bl	80088ac <iprintf>

	/* Print the current date */
	(void) printf("\t%s %02d/%02d/20%02d\r\n", WeekDays[Local_Date.WeekDay - 1U],
 8003a02:	7e3b      	ldrb	r3, [r7, #24]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	4a0c      	ldr	r2, [pc, #48]	@ (8003a38 <DateTime_voidReportDateTime_ITM+0x7c>)
 8003a08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
			Local_Date.Date, Local_Date.Month, Local_Date.Year);
 8003a0c:	7ebb      	ldrb	r3, [r7, #26]
	(void) printf("\t%s %02d/%02d/20%02d\r\n", WeekDays[Local_Date.WeekDay - 1U],
 8003a0e:	461a      	mov	r2, r3
			Local_Date.Date, Local_Date.Month, Local_Date.Year);
 8003a10:	7e7b      	ldrb	r3, [r7, #25]
	(void) printf("\t%s %02d/%02d/20%02d\r\n", WeekDays[Local_Date.WeekDay - 1U],
 8003a12:	4618      	mov	r0, r3
			Local_Date.Date, Local_Date.Month, Local_Date.Year);
 8003a14:	7efb      	ldrb	r3, [r7, #27]
	(void) printf("\t%s %02d/%02d/20%02d\r\n", WeekDays[Local_Date.WeekDay - 1U],
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4808      	ldr	r0, [pc, #32]	@ (8003a3c <DateTime_voidReportDateTime_ITM+0x80>)
 8003a1c:	f004 ff46 	bl	80088ac <iprintf>
}
 8003a20:	bf00      	nop
 8003a22:	3720      	adds	r7, #32
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20012ef4 	.word	0x20012ef4
 8003a2c:	08009980 	.word	0x08009980
 8003a30:	08009984 	.word	0x08009984
 8003a34:	080099d0 	.word	0x080099d0
 8003a38:	20000008 	.word	0x20000008
 8003a3c:	080099b8 	.word	0x080099b8

08003a40 <LedEffectStop>:
static void LedTurnOff(uint8_t Copy_u8LedIdx);

/* Public Functions */

void LedEffectStop(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af02      	add	r7, sp, #8
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_TIMERS; Local_u8LoopCounter++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	71fb      	strb	r3, [r7, #7]
 8003a4a:	e012      	b.n	8003a72 <LedEffectStop+0x32>
	{
		xTimerStop(LedTimerHandles[Local_u8LoopCounter], portMAX_DELAY);
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a84 <LedEffectStop+0x44>)
 8003a50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a54:	f04f 33ff 	mov.w	r3, #4294967295
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2103      	movs	r1, #3
 8003a60:	f7fe ff7c 	bl	800295c <xTimerGenericCommand>
		LedTurnOff(Local_u8LoopCounter);
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f932 	bl	8003cd0 <LedTurnOff>
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_TIMERS; Local_u8LoopCounter++)
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	71fb      	strb	r3, [r7, #7]
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d9e9      	bls.n	8003a4c <LedEffectStop+0xc>
	}
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20012f7c 	.word	0x20012f7c

08003a88 <LedEffectStart>:

void LedEffectStart(uint8_t Copy_u8EffectNum)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
	/* Stop all SW timers animation at beginning */
	LedEffectStop();
 8003a92:	f7ff ffd5 	bl	8003a40 <LedEffectStop>

	xTimerStart(LedTimerHandles[Copy_u8EffectNum - 1U], portMAX_DELAY);
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ac0 <LedEffectStart+0x38>)
 8003a9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003aa0:	f7fd fe8a 	bl	80017b8 <xTaskGetTickCount>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2300      	movs	r3, #0
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f7fe ff53 	bl	800295c <xTimerGenericCommand>
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd90      	pop	{r4, r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20012f7c 	.word	0x20012f7c

08003ac4 <LedEffectAction1>:

void LedEffectAction1(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
	/* Toogle all LEDs */
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_LEDS; Local_u8LoopCounter++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	71fb      	strb	r3, [r7, #7]
 8003ace:	e00e      	b.n	8003aee <LedEffectAction1+0x2a>
	{
		HAL_GPIO_TogglePin(LedPorts[Local_u8LoopCounter], LedPins[Local_u8LoopCounter]);
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8003b00 <LedEffectAction1+0x3c>)
 8003ad4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	490a      	ldr	r1, [pc, #40]	@ (8003b04 <LedEffectAction1+0x40>)
 8003adc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f001 febd 	bl	8005862 <HAL_GPIO_TogglePin>
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_LEDS; Local_u8LoopCounter++)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	3301      	adds	r3, #1
 8003aec:	71fb      	strb	r3, [r7, #7]
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d9ed      	bls.n	8003ad0 <LedEffectAction1+0xc>
	}
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000030 	.word	0x20000030
 8003b04:	20000040 	.word	0x20000040

08003b08 <LedEffectAction2>:

void LedEffectAction2(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	/* Even-Odd permutation */
	static uint8_t Local_u8CurState = 0U;

	if (IS_ODD(Local_u8CurState))
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <LedEffectAction2+0x34>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <LedEffectAction2+0x16>
	{
		TurnOnOddLeds();
 8003b18:	f000 f876 	bl	8003c08 <TurnOnOddLeds>
 8003b1c:	e001      	b.n	8003b22 <LedEffectAction2+0x1a>
	}
	else
	{
		TurnOnEvenLeds();
 8003b1e:	f000 f83f 	bl	8003ba0 <TurnOnEvenLeds>
	}

	INVERT_VAL(Local_u8CurState);
 8003b22:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <LedEffectAction2+0x34>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	4b02      	ldr	r3, [pc, #8]	@ (8003b3c <LedEffectAction2+0x34>)
 8003b34:	701a      	strb	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20012ee6 	.word	0x20012ee6

08003b40 <LedEffectAction3>:

void LedEffectAction3(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	/* Shift left */
	static uint8_t Local_u8PinNum = 0U;

	LedControl(Local_u8PinNum);
 8003b44:	4b09      	ldr	r3, [pc, #36]	@ (8003b6c <LedEffectAction3+0x2c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f891 	bl	8003c70 <LedControl>

	Local_u8PinNum++;
 8003b4e:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <LedEffectAction3+0x2c>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	3301      	adds	r3, #1
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <LedEffectAction3+0x2c>)
 8003b58:	701a      	strb	r2, [r3, #0]
	/* Limit the Pin number to 3*/
	Local_u8PinNum &= 3U;
 8003b5a:	4b04      	ldr	r3, [pc, #16]	@ (8003b6c <LedEffectAction3+0x2c>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	4b01      	ldr	r3, [pc, #4]	@ (8003b6c <LedEffectAction3+0x2c>)
 8003b66:	701a      	strb	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20012ee7 	.word	0x20012ee7

08003b70 <LedEffectAction4>:

void LedEffectAction4(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
	/* Shift left */
	static uint8_t Local_u8PinNum = 3U;

	LedControl(Local_u8PinNum);
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <LedEffectAction4+0x2c>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f879 	bl	8003c70 <LedControl>

	Local_u8PinNum--;
 8003b7e:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <LedEffectAction4+0x2c>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <LedEffectAction4+0x2c>)
 8003b88:	701a      	strb	r2, [r3, #0]
	/* Limit the Pin number to 3*/
	Local_u8PinNum &= 3U;
 8003b8a:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <LedEffectAction4+0x2c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	4b01      	ldr	r3, [pc, #4]	@ (8003b9c <LedEffectAction4+0x2c>)
 8003b96:	701a      	strb	r2, [r3, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000048 	.word	0x20000048

08003ba0 <TurnOnEvenLeds>:

/* Private Functions' Impelementation */

static void TurnOnEvenLeds(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_LEDS; Local_u8LoopCounter++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	71fb      	strb	r3, [r7, #7]
 8003baa:	e020      	b.n	8003bee <TurnOnEvenLeds+0x4e>
	{
		if (IS_ODD(Local_u8LoopCounter))
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <TurnOnEvenLeds+0x30>
		{
			HAL_GPIO_WritePin(LedPorts[Local_u8LoopCounter], LedPins[Local_u8LoopCounter], GPIO_PIN_RESET);
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	4a11      	ldr	r2, [pc, #68]	@ (8003c00 <TurnOnEvenLeds+0x60>)
 8003bba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	4a10      	ldr	r2, [pc, #64]	@ (8003c04 <TurnOnEvenLeds+0x64>)
 8003bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f001 fe31 	bl	8005830 <HAL_GPIO_WritePin>
 8003bce:	e00b      	b.n	8003be8 <TurnOnEvenLeds+0x48>
		}
		else
		{
			HAL_GPIO_WritePin(LedPorts[Local_u8LoopCounter], LedPins[Local_u8LoopCounter], GPIO_PIN_SET);
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8003c00 <TurnOnEvenLeds+0x60>)
 8003bd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <TurnOnEvenLeds+0x64>)
 8003bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003be0:	2201      	movs	r2, #1
 8003be2:	4619      	mov	r1, r3
 8003be4:	f001 fe24 	bl	8005830 <HAL_GPIO_WritePin>
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_LEDS; Local_u8LoopCounter++)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	3301      	adds	r3, #1
 8003bec:	71fb      	strb	r3, [r7, #7]
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d9db      	bls.n	8003bac <TurnOnEvenLeds+0xc>
		}
	}
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000030 	.word	0x20000030
 8003c04:	20000040 	.word	0x20000040

08003c08 <TurnOnOddLeds>:

static void TurnOnOddLeds(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_LEDS; Local_u8LoopCounter++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	71fb      	strb	r3, [r7, #7]
 8003c12:	e020      	b.n	8003c56 <TurnOnOddLeds+0x4e>
	{
		if (IS_ODD(Local_u8LoopCounter))
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <TurnOnOddLeds+0x30>
		{
			HAL_GPIO_WritePin(LedPorts[Local_u8LoopCounter], LedPins[Local_u8LoopCounter], GPIO_PIN_SET);
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	4a11      	ldr	r2, [pc, #68]	@ (8003c68 <TurnOnOddLeds+0x60>)
 8003c22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	4a10      	ldr	r2, [pc, #64]	@ (8003c6c <TurnOnOddLeds+0x64>)
 8003c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4619      	mov	r1, r3
 8003c32:	f001 fdfd 	bl	8005830 <HAL_GPIO_WritePin>
 8003c36:	e00b      	b.n	8003c50 <TurnOnOddLeds+0x48>
		}
		else
		{
			HAL_GPIO_WritePin(LedPorts[Local_u8LoopCounter], LedPins[Local_u8LoopCounter], GPIO_PIN_RESET);
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c68 <TurnOnOddLeds+0x60>)
 8003c3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	4a0a      	ldr	r2, [pc, #40]	@ (8003c6c <TurnOnOddLeds+0x64>)
 8003c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f001 fdf0 	bl	8005830 <HAL_GPIO_WritePin>
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_LEDS; Local_u8LoopCounter++)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	3301      	adds	r3, #1
 8003c54:	71fb      	strb	r3, [r7, #7]
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d9db      	bls.n	8003c14 <TurnOnOddLeds+0xc>
		}
	}
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000030 	.word	0x20000030
 8003c6c:	20000040 	.word	0x20000040

08003c70 <LedControl>:

static void LedControl(uint8_t Copy_u8Num)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8LedMsk = 1U << Copy_u8Num;
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	73bb      	strb	r3, [r7, #14]
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_LEDS; Local_u8LoopCounter++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
 8003c88:	e015      	b.n	8003cb6 <LedControl+0x46>
	{
		HAL_GPIO_WritePin(LedPorts[Local_u8LoopCounter], LedPins[Local_u8LoopCounter], GET_BIT(Local_u8LedMsk, Local_u8LoopCounter));
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8003cc8 <LedControl+0x58>)
 8003c8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <LedControl+0x5c>)
 8003c96:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003c9a:	7bba      	ldrb	r2, [r7, #14]
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	fa42 f303 	asr.w	r3, r2, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	f001 fdc0 	bl	8005830 <HAL_GPIO_WritePin>
	for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < NUM_OF_LEDS; Local_u8LoopCounter++)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d9e6      	bls.n	8003c8a <LedControl+0x1a>
	}
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000030 	.word	0x20000030
 8003ccc:	20000040 	.word	0x20000040

08003cd0 <LedTurnOff>:

static void LedTurnOff(uint8_t Copy_u8LedIdx)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LedPorts[Copy_u8LedIdx], LedPins[Copy_u8LedIdx], GPIO_PIN_RESET);
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	@ (8003cfc <LedTurnOff+0x2c>)
 8003cde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	4a06      	ldr	r2, [pc, #24]	@ (8003d00 <LedTurnOff+0x30>)
 8003ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cea:	2200      	movs	r2, #0
 8003cec:	4619      	mov	r1, r3
 8003cee:	f001 fd9f 	bl	8005830 <HAL_GPIO_WritePin>
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000030 	.word	0x20000030
 8003d00:	20000040 	.word	0x20000040

08003d04 <MenuTask>:
static const char *ConfigSuccessMsg = "\r\nConfiguration setted successfully.\r\n";

/* Public Functions Implementation */

void MenuTask(void *Copy_pvParameters)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	6078      	str	r0, [r7, #4]
	const char *MainMenu =
 8003d0c:	4b33      	ldr	r3, [pc, #204]	@ (8003ddc <MenuTask+0xd8>)
 8003d0e:	613b      	str	r3, [r7, #16]

	while (1)
	{
		static uint8_t Local_u8IsCmdValid = 1U;

		xQueueSend(TxQueueHandle, (const void *) &MainMenu, portMAX_DELAY);
 8003d10:	4b33      	ldr	r3, [pc, #204]	@ (8003de0 <MenuTask+0xdc>)
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	f107 0110 	add.w	r1, r7, #16
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1e:	f7fc fe0f 	bl	8000940 <xQueueGenericSend>

		/* Wait until receiving a notification containg the address of the command */
		xTaskNotifyWait(0U, 0U, (uint32_t *) &Local_u32CmdAddr, portMAX_DELAY);
 8003d22:	f107 030c 	add.w	r3, r7, #12
 8003d26:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2a:	9200      	str	r2, [sp, #0]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2100      	movs	r1, #0
 8003d30:	2000      	movs	r0, #0
 8003d32:	f7fe f9eb 	bl	800210c <xTaskGenericNotifyWait>

		Local_pCmd = (Command_t *) Local_u32CmdAddr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	617b      	str	r3, [r7, #20]

		/* Command length should be 1, otherwise it's invalid */
		if (1U == Local_pCmd->Len)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	7a9b      	ldrb	r3, [r3, #10]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d130      	bne.n	8003da4 <MenuTask+0xa0>
		{
			switch (Local_pCmd->Payload[0U])
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b32      	cmp	r3, #50	@ 0x32
 8003d48:	d038      	beq.n	8003dbc <MenuTask+0xb8>
 8003d4a:	2b32      	cmp	r3, #50	@ 0x32
 8003d4c:	dc1e      	bgt.n	8003d8c <MenuTask+0x88>
 8003d4e:	2b30      	cmp	r3, #48	@ 0x30
 8003d50:	d002      	beq.n	8003d58 <MenuTask+0x54>
 8003d52:	2b31      	cmp	r3, #49	@ 0x31
 8003d54:	d00d      	beq.n	8003d72 <MenuTask+0x6e>
 8003d56:	e019      	b.n	8003d8c <MenuTask+0x88>
			{
			case '0': CurrentState = LED_EFFECT_STATE; xTaskNotify(LEDTaskHandle,0U, eNoAction); break;
 8003d58:	4b22      	ldr	r3, [pc, #136]	@ (8003de4 <MenuTask+0xe0>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	4b22      	ldr	r3, [pc, #136]	@ (8003de8 <MenuTask+0xe4>)
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	2300      	movs	r3, #0
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f7fe fa54 	bl	8002218 <xTaskGenericNotify>
 8003d70:	e025      	b.n	8003dbe <MenuTask+0xba>
			case '1': CurrentState = RTC_MENU_STATE; xTaskNotify(RTCTaskHandle,0U, eNoAction); break;
 8003d72:	4b1c      	ldr	r3, [pc, #112]	@ (8003de4 <MenuTask+0xe0>)
 8003d74:	2202      	movs	r2, #2
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	4b1c      	ldr	r3, [pc, #112]	@ (8003dec <MenuTask+0xe8>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	2200      	movs	r2, #0
 8003d84:	2100      	movs	r1, #0
 8003d86:	f7fe fa47 	bl	8002218 <xTaskGenericNotify>
 8003d8a:	e018      	b.n	8003dbe <MenuTask+0xba>
			case '2': break;
			default:
				xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 8003d8c:	4b14      	ldr	r3, [pc, #80]	@ (8003de0 <MenuTask+0xdc>)
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	2300      	movs	r3, #0
 8003d92:	f04f 32ff 	mov.w	r2, #4294967295
 8003d96:	4916      	ldr	r1, [pc, #88]	@ (8003df0 <MenuTask+0xec>)
 8003d98:	f7fc fdd2 	bl	8000940 <xQueueGenericSend>
				Local_u8IsCmdValid = 0U;
 8003d9c:	4b15      	ldr	r3, [pc, #84]	@ (8003df4 <MenuTask+0xf0>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
				break;
 8003da2:	e00c      	b.n	8003dbe <MenuTask+0xba>
			}
		}
		else
		{
			xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 8003da4:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <MenuTask+0xdc>)
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dae:	4910      	ldr	r1, [pc, #64]	@ (8003df0 <MenuTask+0xec>)
 8003db0:	f7fc fdc6 	bl	8000940 <xQueueGenericSend>
			Local_u8IsCmdValid = 0U;;
 8003db4:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <MenuTask+0xf0>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e000      	b.n	8003dbe <MenuTask+0xba>
			case '2': break;
 8003dbc:	bf00      	nop
		}

		/* Wait until getting notified */
		if (Local_u8IsCmdValid)
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <MenuTask+0xf0>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0a4      	beq.n	8003d10 <MenuTask+0xc>
		{
			xTaskNotifyWait(0U, 0U, NULL, portMAX_DELAY);
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f7fe f99a 	bl	800210c <xTaskGenericNotifyWait>
	{
 8003dd8:	e79a      	b.n	8003d10 <MenuTask+0xc>
 8003dda:	bf00      	nop
 8003ddc:	08009a40 	.word	0x08009a40
 8003de0:	20012f74 	.word	0x20012f74
 8003de4:	20012ee8 	.word	0x20012ee8
 8003de8:	20012f68 	.word	0x20012f68
 8003dec:	20012f6c 	.word	0x20012f6c
 8003df0:	2000004c 	.word	0x2000004c
 8003df4:	20000054 	.word	0x20000054

08003df8 <LEDTask>:
		}
	}
}

void LEDTask(void *Copy_pvParameters)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	6078      	str	r0, [r7, #4]
	Command_t *Local_pCmd;
	uint32_t Local_u32CmdAddr;
	const char *LEDsEffectMenu =
 8003e00:	4b3e      	ldr	r3, [pc, #248]	@ (8003efc <LEDTask+0x104>)
 8003e02:	60fb      	str	r3, [r7, #12]
			"[e4]   For the shift left effect\r\n"
			"Enter your choice here: ";
	while (1)
	{
		/* Wait for notification */
		xTaskNotifyWait(0U, 0U, NULL, portMAX_DELAY);
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2100      	movs	r1, #0
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7fe f97b 	bl	800210c <xTaskGenericNotifyWait>

		/* Print the menu */
		xQueueSend(TxQueueHandle, (const void *) &LEDsEffectMenu, portMAX_DELAY);
 8003e16:	4b3a      	ldr	r3, [pc, #232]	@ (8003f00 <LEDTask+0x108>)
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f107 010c 	add.w	r1, r7, #12
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295
 8003e24:	f7fc fd8c 	bl	8000940 <xQueueGenericSend>

		/* Wait for the command */
		xTaskNotifyWait(0U, 0U, (uint32_t *) &Local_u32CmdAddr, portMAX_DELAY);
 8003e28:	f107 0310 	add.w	r3, r7, #16
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e30:	9200      	str	r2, [sp, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2100      	movs	r1, #0
 8003e36:	2000      	movs	r0, #0
 8003e38:	f7fe f968 	bl	800210c <xTaskGenericNotifyWait>

		Local_pCmd = (Command_t *) Local_u32CmdAddr;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	617b      	str	r3, [r7, #20]

		if (Local_pCmd->Len <= 4U)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	7a9b      	ldrb	r3, [r3, #10]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d843      	bhi.n	8003ed0 <LEDTask+0xd8>
		{
			if (0U == strcmp("none", (const char *) Local_pCmd->Payload))
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	482d      	ldr	r0, [pc, #180]	@ (8003f04 <LEDTask+0x10c>)
 8003e4e:	f7fc f9df 	bl	8000210 <strcmp>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <LEDTask+0x66>
			{
				LedEffectStop();
 8003e58:	f7ff fdf2 	bl	8003a40 <LedEffectStop>
 8003e5c:	e040      	b.n	8003ee0 <LEDTask+0xe8>
			}
			else if (0U == strcmp("e1", (const char *) Local_pCmd->Payload))
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	4619      	mov	r1, r3
 8003e62:	4829      	ldr	r0, [pc, #164]	@ (8003f08 <LEDTask+0x110>)
 8003e64:	f7fc f9d4 	bl	8000210 <strcmp>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <LEDTask+0x7e>
			{
				LedEffectStart(1U);
 8003e6e:	2001      	movs	r0, #1
 8003e70:	f7ff fe0a 	bl	8003a88 <LedEffectStart>
 8003e74:	e034      	b.n	8003ee0 <LEDTask+0xe8>
			}
			else if (0U == strcmp("e2", (const char *) Local_pCmd->Payload))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4824      	ldr	r0, [pc, #144]	@ (8003f0c <LEDTask+0x114>)
 8003e7c:	f7fc f9c8 	bl	8000210 <strcmp>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <LEDTask+0x96>
			{
				LedEffectStart(2U);
 8003e86:	2002      	movs	r0, #2
 8003e88:	f7ff fdfe 	bl	8003a88 <LedEffectStart>
 8003e8c:	e028      	b.n	8003ee0 <LEDTask+0xe8>
			}
			else if (0U == strcmp("e3", (const char *) Local_pCmd->Payload))
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4619      	mov	r1, r3
 8003e92:	481f      	ldr	r0, [pc, #124]	@ (8003f10 <LEDTask+0x118>)
 8003e94:	f7fc f9bc 	bl	8000210 <strcmp>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <LEDTask+0xae>
			{
				LedEffectStart(3U);
 8003e9e:	2003      	movs	r0, #3
 8003ea0:	f7ff fdf2 	bl	8003a88 <LedEffectStart>
 8003ea4:	e01c      	b.n	8003ee0 <LEDTask+0xe8>
			}
			else if (0U == strcmp("e4", (const char *) Local_pCmd->Payload))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	481a      	ldr	r0, [pc, #104]	@ (8003f14 <LEDTask+0x11c>)
 8003eac:	f7fc f9b0 	bl	8000210 <strcmp>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <LEDTask+0xc6>
			{
				LedEffectStart(4U);
 8003eb6:	2004      	movs	r0, #4
 8003eb8:	f7ff fde6 	bl	8003a88 <LedEffectStart>
 8003ebc:	e010      	b.n	8003ee0 <LEDTask+0xe8>
			}
			else
			{
				/* Invalid option */
				xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 8003ebe:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <LEDTask+0x108>)
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	4913      	ldr	r1, [pc, #76]	@ (8003f18 <LEDTask+0x120>)
 8003eca:	f7fc fd39 	bl	8000940 <xQueueGenericSend>
 8003ece:	e007      	b.n	8003ee0 <LEDTask+0xe8>
			}
		}
		else
		{
			/* Invalid comman */
			xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <LEDTask+0x108>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	490f      	ldr	r1, [pc, #60]	@ (8003f18 <LEDTask+0x120>)
 8003edc:	f7fc fd30 	bl	8000940 <xQueueGenericSend>
		}

		CurrentState = MAIN_MENU_STATE;
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8003f1c <LEDTask+0x124>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]

		xTaskNotify(MenuTaskHandle, 0U, eNoAction);
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <LEDTask+0x128>)
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	f7fe f990 	bl	8002218 <xTaskGenericNotify>
		xTaskNotifyWait(0U, 0U, NULL, portMAX_DELAY);
 8003ef8:	e784      	b.n	8003e04 <LEDTask+0xc>
 8003efa:	bf00      	nop
 8003efc:	08009b04 	.word	0x08009b04
 8003f00:	20012f74 	.word	0x20012f74
 8003f04:	08009c28 	.word	0x08009c28
 8003f08:	08009c30 	.word	0x08009c30
 8003f0c:	08009c34 	.word	0x08009c34
 8003f10:	08009c38 	.word	0x08009c38
 8003f14:	08009c3c 	.word	0x08009c3c
 8003f18:	2000004c 	.word	0x2000004c
 8003f1c:	20012ee8 	.word	0x20012ee8
 8003f20:	20012f60 	.word	0x20012f60

08003f24 <RTCTask>:
	}
}

void RTCTask(void *Copy_pvParameters)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	6078      	str	r0, [r7, #4]
	const char *RTCMenu1 =
 8003f2c:	4b35      	ldr	r3, [pc, #212]	@ (8004004 <RTCTask+0xe0>)
 8003f2e:	613b      	str	r3, [r7, #16]
			"\r\n"
			"================================\r\n"
			"||      Date & Time Menu      ||\r\n"
			"================================\r\n";
	const char *RTCMenu2 =
 8003f30:	4b35      	ldr	r3, [pc, #212]	@ (8004008 <RTCTask+0xe4>)
 8003f32:	60fb      	str	r3, [r7, #12]
	static uint8_t Local_u8RtcCfgState = HH_STATE;

	while (1)
	{
		/* Wait until being notified */
		xTaskNotifyWait(0U, 0U, NULL, portMAX_DELAY);
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2100      	movs	r1, #0
 8003f40:	2000      	movs	r0, #0
 8003f42:	f7fe f8e3 	bl	800210c <xTaskGenericNotifyWait>

		/* Print the menu, show the current date and time information */
		xQueueSend(TxQueueHandle, (const void *) &RTCMenu1, portMAX_DELAY);
 8003f46:	4b31      	ldr	r3, [pc, #196]	@ (800400c <RTCTask+0xe8>)
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	f107 0110 	add.w	r1, r7, #16
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295
 8003f54:	f7fc fcf4 	bl	8000940 <xQueueGenericSend>
		DateTime_voidShowDateTime();
 8003f58:	f7ff fbf2 	bl	8003740 <DateTime_voidShowDateTime>
		xQueueSend(TxQueueHandle, (const void *) &RTCMenu2, portMAX_DELAY);
 8003f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800400c <RTCTask+0xe8>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	f107 010c 	add.w	r1, r7, #12
 8003f64:	2300      	movs	r3, #0
 8003f66:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6a:	f7fc fce9 	bl	8000940 <xQueueGenericSend>

		/* Loop until MAIN_MENU_STATE is invoked */
		while (MAIN_MENU_STATE != CurrentState)
 8003f6e:	e03a      	b.n	8003fe6 <RTCTask+0xc2>
		{
			/* Wait for command notification */
			xTaskNotifyWait(0U, 0U, (uint32_t *) &Local_CmdAddr, portMAX_DELAY);
 8003f70:	f107 0308 	add.w	r3, r7, #8
 8003f74:	f04f 32ff 	mov.w	r2, #4294967295
 8003f78:	9200      	str	r2, [sp, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	2000      	movs	r0, #0
 8003f80:	f7fe f8c4 	bl	800210c <xTaskGenericNotifyWait>
			Local_pCmd = (Command_t *) Local_CmdAddr;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	617b      	str	r3, [r7, #20]

			/* Switch on the current state */
			switch (CurrentState)
 8003f88:	4b21      	ldr	r3, [pc, #132]	@ (8004010 <RTCTask+0xec>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	3b02      	subs	r3, #2
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d81d      	bhi.n	8003fce <RTCTask+0xaa>
 8003f92:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <RTCTask+0x74>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003fb3 	.word	0x08003fb3
 8003fa0:	08003fbd 	.word	0x08003fbd
 8003fa4:	08003fc7 	.word	0x08003fc7
			{
			case RTC_MENU_STATE: RtcMenuHandler(Local_pCmd, &Local_u8RtcCfgState); break;
 8003fa8:	491a      	ldr	r1, [pc, #104]	@ (8004014 <RTCTask+0xf0>)
 8003faa:	6978      	ldr	r0, [r7, #20]
 8003fac:	f000 f914 	bl	80041d8 <RtcMenuHandler>
 8003fb0:	e019      	b.n	8003fe6 <RTCTask+0xc2>
			case RTC_TIMECFG_STATE: RtcTimeCfgHandler(Local_pCmd, &Local_u8RtcCfgState); break;
 8003fb2:	4918      	ldr	r1, [pc, #96]	@ (8004014 <RTCTask+0xf0>)
 8003fb4:	6978      	ldr	r0, [r7, #20]
 8003fb6:	f000 f989 	bl	80042cc <RtcTimeCfgHandler>
 8003fba:	e014      	b.n	8003fe6 <RTCTask+0xc2>
			case RTC_DATECFG_STATE: RtcDateCfgHandler(Local_pCmd, &Local_u8RtcCfgState); break;
 8003fbc:	4915      	ldr	r1, [pc, #84]	@ (8004014 <RTCTask+0xf0>)
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	f000 fa5a 	bl	8004478 <RtcDateCfgHandler>
 8003fc4:	e00f      	b.n	8003fe6 <RTCTask+0xc2>
			case RTC_REPORT_STATE: RtcReportingHandler(Local_pCmd); break;
 8003fc6:	6978      	ldr	r0, [r7, #20]
 8003fc8:	f000 fb30 	bl	800462c <RtcReportingHandler>
 8003fcc:	e00b      	b.n	8003fe6 <RTCTask+0xc2>
			default:
				CurrentState = MAIN_MENU_STATE;
 8003fce:	4b10      	ldr	r3, [pc, #64]	@ (8004010 <RTCTask+0xec>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
				xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <RTCTask+0xe8>)
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f04f 32ff 	mov.w	r2, #4294967295
 8003fde:	490e      	ldr	r1, [pc, #56]	@ (8004018 <RTCTask+0xf4>)
 8003fe0:	f7fc fcae 	bl	8000940 <xQueueGenericSend>
				break;
 8003fe4:	bf00      	nop
		while (MAIN_MENU_STATE != CurrentState)
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <RTCTask+0xec>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1c0      	bne.n	8003f70 <RTCTask+0x4c>
			}
		}

		xTaskNotify(MenuTaskHandle, 0U, eNoAction);
 8003fee:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <RTCTask+0xf8>)
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f7fe f90c 	bl	8002218 <xTaskGenericNotify>
		xTaskNotifyWait(0U, 0U, NULL, portMAX_DELAY);
 8004000:	e798      	b.n	8003f34 <RTCTask+0x10>
 8004002:	bf00      	nop
 8004004:	08009c40 	.word	0x08009c40
 8004008:	08009cac 	.word	0x08009cac
 800400c:	20012f74 	.word	0x20012f74
 8004010:	20012ee8 	.word	0x20012ee8
 8004014:	20000055 	.word	0x20000055
 8004018:	2000004c 	.word	0x2000004c
 800401c:	20012f60 	.word	0x20012f60

08004020 <CmdHandlerTask>:
	}
}

void CmdHandlerTask(void *Copy_pvParameters)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af02      	add	r7, sp, #8
 8004026:	6078      	str	r0, [r7, #4]
	BaseType_t Local_RetVal;
	Command_t Cmd;

	while (1)
	{
		Local_RetVal = xTaskNotifyWait(0U, 0U, NULL, portMAX_DELAY);
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	2300      	movs	r3, #0
 8004030:	2200      	movs	r2, #0
 8004032:	2100      	movs	r1, #0
 8004034:	2000      	movs	r0, #0
 8004036:	f7fe f869 	bl	800210c <xTaskGenericNotifyWait>
 800403a:	6178      	str	r0, [r7, #20]

		if (pdTRUE == Local_RetVal)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d1f2      	bne.n	8004028 <CmdHandlerTask+0x8>
		{
			ProcessCommand(&Cmd);
 8004042:	f107 0308 	add.w	r3, r7, #8
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f824 	bl	8004094 <ProcessCommand>
		Local_RetVal = xTaskNotifyWait(0U, 0U, NULL, portMAX_DELAY);
 800404c:	e7ec      	b.n	8004028 <CmdHandlerTask+0x8>
	...

08004050 <PrintTask>:
		}
	}
}

void PrintTask(void *Copy_pvParameters)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	uint32_t *Local_pu32Msg = NULL;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]

	while (1)
	{
		xQueueReceive(TxQueueHandle, &Local_pu32Msg, portMAX_DELAY);
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <PrintTask+0x3c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f107 010c 	add.w	r1, r7, #12
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	4618      	mov	r0, r3
 800406a:	f7fc fe21 	bl	8000cb0 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t *) Local_pu32Msg, strlen((char *) Local_pu32Msg), HAL_MAX_DELAY);
 800406e:	68fc      	ldr	r4, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc f8d6 	bl	8000224 <strlen>
 8004078:	4603      	mov	r3, r0
 800407a:	b29a      	uxth	r2, r3
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	4621      	mov	r1, r4
 8004082:	4803      	ldr	r0, [pc, #12]	@ (8004090 <PrintTask+0x40>)
 8004084:	f003 fb4a 	bl	800771c <HAL_UART_Transmit>
		xQueueReceive(TxQueueHandle, &Local_pu32Msg, portMAX_DELAY);
 8004088:	bf00      	nop
 800408a:	e7e7      	b.n	800405c <PrintTask+0xc>
 800408c:	20012f74 	.word	0x20012f74
 8004090:	20012f14 	.word	0x20012f14

08004094 <ProcessCommand>:
}

/* Private Functions Implementation */

static void ProcessCommand(Command_t *Copy_pCmd)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
	ExtractCommand(Copy_pCmd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f835 	bl	800410c <ExtractCommand>

	switch (CurrentState)
 80040a2:	4b16      	ldr	r3, [pc, #88]	@ (80040fc <ProcessCommand+0x68>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b05      	cmp	r3, #5
 80040a8:	dc24      	bgt.n	80040f4 <ProcessCommand+0x60>
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	da18      	bge.n	80040e0 <ProcessCommand+0x4c>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <ProcessCommand+0x24>
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d00a      	beq.n	80040cc <ProcessCommand+0x38>
	case RTC_DATECFG_STATE:
	case RTC_REPORT_STATE:
		/* Notify LED task of the command */
		xTaskNotify(RTCTaskHandle, (uint32_t) Copy_pCmd, eSetValueWithOverwrite); break;
	}
}
 80040b6:	e01d      	b.n	80040f4 <ProcessCommand+0x60>
		xTaskNotify(MenuTaskHandle, (uint32_t) Copy_pCmd, eSetValueWithOverwrite); break;
 80040b8:	4b11      	ldr	r3, [pc, #68]	@ (8004100 <ProcessCommand+0x6c>)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	2300      	movs	r3, #0
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	2303      	movs	r3, #3
 80040c4:	2100      	movs	r1, #0
 80040c6:	f7fe f8a7 	bl	8002218 <xTaskGenericNotify>
 80040ca:	e013      	b.n	80040f4 <ProcessCommand+0x60>
		xTaskNotify(LEDTaskHandle, (uint32_t) Copy_pCmd, eSetValueWithOverwrite); break;
 80040cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <ProcessCommand+0x70>)
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	2300      	movs	r3, #0
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2303      	movs	r3, #3
 80040d8:	2100      	movs	r1, #0
 80040da:	f7fe f89d 	bl	8002218 <xTaskGenericNotify>
 80040de:	e009      	b.n	80040f4 <ProcessCommand+0x60>
		xTaskNotify(RTCTaskHandle, (uint32_t) Copy_pCmd, eSetValueWithOverwrite); break;
 80040e0:	4b09      	ldr	r3, [pc, #36]	@ (8004108 <ProcessCommand+0x74>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2303      	movs	r3, #3
 80040ec:	2100      	movs	r1, #0
 80040ee:	f7fe f893 	bl	8002218 <xTaskGenericNotify>
 80040f2:	bf00      	nop
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20012ee8 	.word	0x20012ee8
 8004100:	20012f60 	.word	0x20012f60
 8004104:	20012f68 	.word	0x20012f68
 8004108:	20012f6c 	.word	0x20012f6c

0800410c <ExtractCommand>:

static void ExtractCommand(Command_t *Copy_pCmd)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	UBaseType_t Local_NumOfMsgs;
	uint8_t Local_u8LoopCounter;

	Local_NumOfMsgs = uxQueueMessagesWaiting(RxQueueHandle);
 8004114:	4b15      	ldr	r3, [pc, #84]	@ (800416c <ExtractCommand+0x60>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fc feab 	bl	8000e74 <uxQueueMessagesWaiting>
 800411e:	60b8      	str	r0, [r7, #8]

	for (Local_u8LoopCounter = 0U; Local_u8LoopCounter < Local_NumOfMsgs; Local_u8LoopCounter++)
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]
 8004124:	e010      	b.n	8004148 <ExtractCommand+0x3c>
	{
		xQueueReceive(RxQueueHandle, (void *const) &Copy_pCmd->Payload[Local_u8LoopCounter], 0U);
 8004126:	4b11      	ldr	r3, [pc, #68]	@ (800416c <ExtractCommand+0x60>)
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	2200      	movs	r2, #0
 8004132:	4619      	mov	r1, r3
 8004134:	f7fc fdbc 	bl	8000cb0 <xQueueReceive>

		if ('\r' == (char) Copy_pCmd->Payload[Local_u8LoopCounter])
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	5cd3      	ldrb	r3, [r2, r3]
 800413e:	2b0d      	cmp	r3, #13
 8004140:	d007      	beq.n	8004152 <ExtractCommand+0x46>
	for (Local_u8LoopCounter = 0U; Local_u8LoopCounter < Local_NumOfMsgs; Local_u8LoopCounter++)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	3301      	adds	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	d8ea      	bhi.n	8004126 <ExtractCommand+0x1a>
 8004150:	e000      	b.n	8004154 <ExtractCommand+0x48>
		{
			break;
 8004152:	bf00      	nop
		}
	}

	/* Insert null terminating character at the end of the command */
	Copy_pCmd->Payload[Local_u8LoopCounter] = '\0';
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	2100      	movs	r1, #0
 800415a:	54d1      	strb	r1, [r2, r3]
	/* Save the command length excluding the null character */
	Copy_pCmd->Len = Local_u8LoopCounter;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7bfa      	ldrb	r2, [r7, #15]
 8004160:	729a      	strb	r2, [r3, #10]
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20012f78 	.word	0x20012f78

08004170 <u8StrToNum>:

static uint8_t u8StrToNum(const char *Copy_pcNumAsStr, uint8_t Copy_u8Len)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	70fb      	strb	r3, [r7, #3]
	uint8_t Local_u8DecimalNum = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < Copy_u8Len; Local_u8LoopCounter++)
 8004180:	2300      	movs	r3, #0
 8004182:	73bb      	strb	r3, [r7, #14]
 8004184:	e01d      	b.n	80041c2 <u8StrToNum+0x52>
    {
        if (Copy_pcNumAsStr[Local_u8LoopCounter] >= '0' && Copy_pcNumAsStr[Local_u8LoopCounter] <= '9')
 8004186:	7bbb      	ldrb	r3, [r7, #14]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4413      	add	r3, r2
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b2f      	cmp	r3, #47	@ 0x2f
 8004190:	d914      	bls.n	80041bc <u8StrToNum+0x4c>
 8004192:	7bbb      	ldrb	r3, [r7, #14]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b39      	cmp	r3, #57	@ 0x39
 800419c:	d80e      	bhi.n	80041bc <u8StrToNum+0x4c>
        {
            Local_u8DecimalNum *= 10U;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	461a      	mov	r2, r3
 80041a2:	0092      	lsls	r2, r2, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
            Local_u8DecimalNum += Copy_pcNumAsStr[Local_u8LoopCounter] - '0';
 80041aa:	7bbb      	ldrb	r3, [r7, #14]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	4413      	add	r3, r2
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	3b30      	subs	r3, #48	@ 0x30
 80041ba:	73fb      	strb	r3, [r7, #15]
    for (uint8_t Local_u8LoopCounter = 0U; Local_u8LoopCounter < Copy_u8Len; Local_u8LoopCounter++)
 80041bc:	7bbb      	ldrb	r3, [r7, #14]
 80041be:	3301      	adds	r3, #1
 80041c0:	73bb      	strb	r3, [r7, #14]
 80041c2:	7bba      	ldrb	r2, [r7, #14]
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3dd      	bcc.n	8004186 <u8StrToNum+0x16>
        }
    }

    return Local_u8DecimalNum;
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <RtcMenuHandler>:

static void RtcMenuHandler(Command_t *Copy_pCmd, uint8_t *Copy_pu8RtcCfgState)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	const char *Msg12HourFmtConfing =
 80041e2:	4b34      	ldr	r3, [pc, #208]	@ (80042b4 <RtcMenuHandler+0xdc>)
 80041e4:	617b      	str	r3, [r7, #20]
			"\r\n[ 0 -> AM, 1 -> PM ]"
			"\r\nEnter the 12-hour format  (0 - 1):  ";
	const char *MsgWeekDayConfing =
 80041e6:	4b34      	ldr	r3, [pc, #208]	@ (80042b8 <RtcMenuHandler+0xe0>)
 80041e8:	613b      	str	r3, [r7, #16]
			"\r\n[ 1 -> Mon, 2 -> Tue, 3 -> Wed, 4 -> Thu, 5 -> Fri, 6 -> Sat, 7 -> Sun ]"
			"\r\nEnter the week day (1 - 7):  ";
	const char *MsgEnableReporting = "\r\nEnable date & time reporting? (y/n): ";
 80041ea:	4b34      	ldr	r3, [pc, #208]	@ (80042bc <RtcMenuHandler+0xe4>)
 80041ec:	60fb      	str	r3, [r7, #12]

	if (1U == Copy_pCmd->Len)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	7a9b      	ldrb	r3, [r3, #10]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d14d      	bne.n	8004292 <RtcMenuHandler+0xba>
	{
		switch (Copy_pCmd->Payload[0U])
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	3b30      	subs	r3, #48	@ 0x30
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d83c      	bhi.n	800427a <RtcMenuHandler+0xa2>
 8004200:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <RtcMenuHandler+0x30>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004219 	.word	0x08004219
 800420c:	08004239 	.word	0x08004239
 8004210:	08004259 	.word	0x08004259
 8004214:	08004273 	.word	0x08004273
		{
		case '0':
			CurrentState = RTC_TIMECFG_STATE;
 8004218:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <RtcMenuHandler+0xe8>)
 800421a:	2203      	movs	r2, #3
 800421c:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const void *) &Msg12HourFmtConfing, portMAX_DELAY);
 800421e:	4b29      	ldr	r3, [pc, #164]	@ (80042c4 <RtcMenuHandler+0xec>)
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	f107 0114 	add.w	r1, r7, #20
 8004226:	2300      	movs	r3, #0
 8004228:	f04f 32ff 	mov.w	r2, #4294967295
 800422c:	f7fc fb88 	bl	8000940 <xQueueGenericSend>
			*Copy_pu8RtcCfgState = HH12_FORMAT_STATE;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
			break;
 8004236:	e038      	b.n	80042aa <RtcMenuHandler+0xd2>
		case '1':
			CurrentState = RTC_DATECFG_STATE;
 8004238:	4b21      	ldr	r3, [pc, #132]	@ (80042c0 <RtcMenuHandler+0xe8>)
 800423a:	2204      	movs	r2, #4
 800423c:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const void *) &MsgWeekDayConfing, portMAX_DELAY);
 800423e:	4b21      	ldr	r3, [pc, #132]	@ (80042c4 <RtcMenuHandler+0xec>)
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	f107 0110 	add.w	r1, r7, #16
 8004246:	2300      	movs	r3, #0
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	f7fc fb78 	bl	8000940 <xQueueGenericSend>
			*Copy_pu8RtcCfgState = WEEK_DAY_STATE;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
			break;
 8004256:	e028      	b.n	80042aa <RtcMenuHandler+0xd2>
		case '2':
			CurrentState = RTC_REPORT_STATE;
 8004258:	4b19      	ldr	r3, [pc, #100]	@ (80042c0 <RtcMenuHandler+0xe8>)
 800425a:	2205      	movs	r2, #5
 800425c:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const void *) &MsgEnableReporting, portMAX_DELAY);
 800425e:	4b19      	ldr	r3, [pc, #100]	@ (80042c4 <RtcMenuHandler+0xec>)
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	f107 010c 	add.w	r1, r7, #12
 8004266:	2300      	movs	r3, #0
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	f7fc fb68 	bl	8000940 <xQueueGenericSend>
			break;
 8004270:	e01b      	b.n	80042aa <RtcMenuHandler+0xd2>
		case '3':
			CurrentState = MAIN_MENU_STATE;
 8004272:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <RtcMenuHandler+0xe8>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
			break;
 8004278:	e017      	b.n	80042aa <RtcMenuHandler+0xd2>
		default:
			CurrentState = MAIN_MENU_STATE;
 800427a:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <RtcMenuHandler+0xe8>)
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 8004280:	4b10      	ldr	r3, [pc, #64]	@ (80042c4 <RtcMenuHandler+0xec>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	2300      	movs	r3, #0
 8004286:	f04f 32ff 	mov.w	r2, #4294967295
 800428a:	490f      	ldr	r1, [pc, #60]	@ (80042c8 <RtcMenuHandler+0xf0>)
 800428c:	f7fc fb58 	bl	8000940 <xQueueGenericSend>
			break;
 8004290:	e00b      	b.n	80042aa <RtcMenuHandler+0xd2>
		}
	}
	else /* Invalid command */
	{
		CurrentState = MAIN_MENU_STATE;
 8004292:	4b0b      	ldr	r3, [pc, #44]	@ (80042c0 <RtcMenuHandler+0xe8>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
		xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 8004298:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <RtcMenuHandler+0xec>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	2300      	movs	r3, #0
 800429e:	f04f 32ff 	mov.w	r2, #4294967295
 80042a2:	4909      	ldr	r1, [pc, #36]	@ (80042c8 <RtcMenuHandler+0xf0>)
 80042a4:	f7fc fb4c 	bl	8000940 <xQueueGenericSend>
	}
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	08009d30 	.word	0x08009d30
 80042b8:	08009d70 	.word	0x08009d70
 80042bc:	08009ddc 	.word	0x08009ddc
 80042c0:	20012ee8 	.word	0x20012ee8
 80042c4:	20012f74 	.word	0x20012f74
 80042c8:	2000004c 	.word	0x2000004c

080042cc <RtcTimeCfgHandler>:

static void RtcTimeCfgHandler(Command_t *Copy_pCmd, uint8_t *Copy_pu8RtcCfgState)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	/* Get hour, minute, seconds info and configure RTC */
	/* Take case of invalid entries */
	const char *MsgHourConfing	= "\r\nEnter the hour            (1 - 12): ";
 80042d6:	4b5d      	ldr	r3, [pc, #372]	@ (800444c <RtcTimeCfgHandler+0x180>)
 80042d8:	617b      	str	r3, [r7, #20]
	const char *MsgMinConfing 	= "\r\nEnter the Minutes         (0 - 59): ";
 80042da:	4b5d      	ldr	r3, [pc, #372]	@ (8004450 <RtcTimeCfgHandler+0x184>)
 80042dc:	613b      	str	r3, [r7, #16]
	const char *MsgSecConfing 	= "\r\nEnter the seconds         (0 - 59): ";
 80042de:	4b5d      	ldr	r3, [pc, #372]	@ (8004454 <RtcTimeCfgHandler+0x188>)
 80042e0:	60fb      	str	r3, [r7, #12]
	static uint8_t Local_u812HourFmt, Local_u8Hour, Local_u8Min, Local_u8Sec;

	if (Copy_pCmd->Len <= 2U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7a9b      	ldrb	r3, [r3, #10]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	f200 80a0 	bhi.w	800442c <RtcTimeCfgHandler+0x160>
	{
		switch (*Copy_pu8RtcCfgState)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	f200 808f 	bhi.w	8004414 <RtcTimeCfgHandler+0x148>
 80042f6:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <RtcTimeCfgHandler+0x30>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	0800430d 	.word	0x0800430d
 8004300:	0800433d 	.word	0x0800433d
 8004304:	0800436d 	.word	0x0800436d
 8004308:	0800439d 	.word	0x0800439d
		{
		case HH12_FORMAT_STATE:
			Local_u812HourFmt = u8StrToNum((const char *) Copy_pCmd->Payload, Copy_pCmd->Len);
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7a9b      	ldrb	r3, [r3, #10]
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7ff ff2b 	bl	8004170 <u8StrToNum>
 800431a:	4603      	mov	r3, r0
 800431c:	461a      	mov	r2, r3
 800431e:	4b4e      	ldr	r3, [pc, #312]	@ (8004458 <RtcTimeCfgHandler+0x18c>)
 8004320:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const char *) &MsgHourConfing, portMAX_DELAY);
 8004322:	4b4e      	ldr	r3, [pc, #312]	@ (800445c <RtcTimeCfgHandler+0x190>)
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	f107 0114 	add.w	r1, r7, #20
 800432a:	2300      	movs	r3, #0
 800432c:	f04f 32ff 	mov.w	r2, #4294967295
 8004330:	f7fc fb06 	bl	8000940 <xQueueGenericSend>
			*Copy_pu8RtcCfgState = HH_STATE;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
			break;
 800433a:	e083      	b.n	8004444 <RtcTimeCfgHandler+0x178>

		case HH_STATE:
			Local_u8Hour = u8StrToNum((const char *) Copy_pCmd->Payload, Copy_pCmd->Len);
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	7a9b      	ldrb	r3, [r3, #10]
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f7ff ff13 	bl	8004170 <u8StrToNum>
 800434a:	4603      	mov	r3, r0
 800434c:	461a      	mov	r2, r3
 800434e:	4b44      	ldr	r3, [pc, #272]	@ (8004460 <RtcTimeCfgHandler+0x194>)
 8004350:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const char *) &MsgMinConfing, portMAX_DELAY);
 8004352:	4b42      	ldr	r3, [pc, #264]	@ (800445c <RtcTimeCfgHandler+0x190>)
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	f107 0110 	add.w	r1, r7, #16
 800435a:	2300      	movs	r3, #0
 800435c:	f04f 32ff 	mov.w	r2, #4294967295
 8004360:	f7fc faee 	bl	8000940 <xQueueGenericSend>
			*Copy_pu8RtcCfgState = MM_STATE;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2202      	movs	r2, #2
 8004368:	701a      	strb	r2, [r3, #0]
			break;
 800436a:	e06b      	b.n	8004444 <RtcTimeCfgHandler+0x178>

		case MM_STATE:
			Local_u8Min = u8StrToNum((const char *) Copy_pCmd->Payload, Copy_pCmd->Len);
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	7a9b      	ldrb	r3, [r3, #10]
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7ff fefb 	bl	8004170 <u8StrToNum>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	4b39      	ldr	r3, [pc, #228]	@ (8004464 <RtcTimeCfgHandler+0x198>)
 8004380:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const char *) &MsgSecConfing, portMAX_DELAY);
 8004382:	4b36      	ldr	r3, [pc, #216]	@ (800445c <RtcTimeCfgHandler+0x190>)
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	f107 010c 	add.w	r1, r7, #12
 800438a:	2300      	movs	r3, #0
 800438c:	f04f 32ff 	mov.w	r2, #4294967295
 8004390:	f7fc fad6 	bl	8000940 <xQueueGenericSend>
			*Copy_pu8RtcCfgState = SS_STATE;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2203      	movs	r2, #3
 8004398:	701a      	strb	r2, [r3, #0]
			break;
 800439a:	e053      	b.n	8004444 <RtcTimeCfgHandler+0x178>

		case SS_STATE:
			Local_u8Sec = u8StrToNum((const char *) Copy_pCmd->Payload, Copy_pCmd->Len);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	7a9b      	ldrb	r3, [r3, #10]
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f7ff fee3 	bl	8004170 <u8StrToNum>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004468 <RtcTimeCfgHandler+0x19c>)
 80043b0:	701a      	strb	r2, [r3, #0]

			if (DateTime_u8IsTimeCfgValid(Local_u812HourFmt, Local_u8Hour, Local_u8Min, Local_u8Sec))
 80043b2:	4b29      	ldr	r3, [pc, #164]	@ (8004458 <RtcTimeCfgHandler+0x18c>)
 80043b4:	7818      	ldrb	r0, [r3, #0]
 80043b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004460 <RtcTimeCfgHandler+0x194>)
 80043b8:	7819      	ldrb	r1, [r3, #0]
 80043ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <RtcTimeCfgHandler+0x198>)
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	4b2a      	ldr	r3, [pc, #168]	@ (8004468 <RtcTimeCfgHandler+0x19c>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	f7ff facf 	bl	8003964 <DateTime_u8IsTimeCfgValid>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d014      	beq.n	80043f6 <RtcTimeCfgHandler+0x12a>
			{
				/* Valid time config */
				DateTime_voidConfigTime(Local_u812HourFmt, Local_u8Hour, Local_u8Min, Local_u8Sec);
 80043cc:	4b22      	ldr	r3, [pc, #136]	@ (8004458 <RtcTimeCfgHandler+0x18c>)
 80043ce:	7818      	ldrb	r0, [r3, #0]
 80043d0:	4b23      	ldr	r3, [pc, #140]	@ (8004460 <RtcTimeCfgHandler+0x194>)
 80043d2:	7819      	ldrb	r1, [r3, #0]
 80043d4:	4b23      	ldr	r3, [pc, #140]	@ (8004464 <RtcTimeCfgHandler+0x198>)
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	4b23      	ldr	r3, [pc, #140]	@ (8004468 <RtcTimeCfgHandler+0x19c>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	f7ff fa3a 	bl	8003854 <DateTime_voidConfigTime>
				xQueueSend(TxQueueHandle, (const char *) &ConfigSuccessMsg, portMAX_DELAY);
 80043e0:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <RtcTimeCfgHandler+0x190>)
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	2300      	movs	r3, #0
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ea:	4920      	ldr	r1, [pc, #128]	@ (800446c <RtcTimeCfgHandler+0x1a0>)
 80043ec:	f7fc faa8 	bl	8000940 <xQueueGenericSend>
				DateTime_voidShowDateTime();
 80043f0:	f7ff f9a6 	bl	8003740 <DateTime_voidShowDateTime>
 80043f4:	e007      	b.n	8004406 <RtcTimeCfgHandler+0x13a>
			}
			else /* Invalid command */
			{
				xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 80043f6:	4b19      	ldr	r3, [pc, #100]	@ (800445c <RtcTimeCfgHandler+0x190>)
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004400:	491b      	ldr	r1, [pc, #108]	@ (8004470 <RtcTimeCfgHandler+0x1a4>)
 8004402:	f7fc fa9d 	bl	8000940 <xQueueGenericSend>
			}

			*Copy_pu8RtcCfgState = HH12_FORMAT_STATE;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
			CurrentState = MAIN_MENU_STATE;
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <RtcTimeCfgHandler+0x1a8>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
			break;
 8004412:	e017      	b.n	8004444 <RtcTimeCfgHandler+0x178>

		default:
			CurrentState = MAIN_MENU_STATE;
 8004414:	4b17      	ldr	r3, [pc, #92]	@ (8004474 <RtcTimeCfgHandler+0x1a8>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 800441a:	4b10      	ldr	r3, [pc, #64]	@ (800445c <RtcTimeCfgHandler+0x190>)
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	2300      	movs	r3, #0
 8004420:	f04f 32ff 	mov.w	r2, #4294967295
 8004424:	4912      	ldr	r1, [pc, #72]	@ (8004470 <RtcTimeCfgHandler+0x1a4>)
 8004426:	f7fc fa8b 	bl	8000940 <xQueueGenericSend>
			break;
 800442a:	e00b      	b.n	8004444 <RtcTimeCfgHandler+0x178>
		}
	}
	else /* Invalid command */
	{
		CurrentState = MAIN_MENU_STATE;
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <RtcTimeCfgHandler+0x1a8>)
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]
		xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 8004432:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <RtcTimeCfgHandler+0x190>)
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	f04f 32ff 	mov.w	r2, #4294967295
 800443c:	490c      	ldr	r1, [pc, #48]	@ (8004470 <RtcTimeCfgHandler+0x1a4>)
 800443e:	f7fc fa7f 	bl	8000940 <xQueueGenericSend>
	}
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	08009e04 	.word	0x08009e04
 8004450:	08009e2c 	.word	0x08009e2c
 8004454:	08009e54 	.word	0x08009e54
 8004458:	20012ee9 	.word	0x20012ee9
 800445c:	20012f74 	.word	0x20012f74
 8004460:	20012eea 	.word	0x20012eea
 8004464:	20012eeb 	.word	0x20012eeb
 8004468:	20012eec 	.word	0x20012eec
 800446c:	20000050 	.word	0x20000050
 8004470:	2000004c 	.word	0x2000004c
 8004474:	20012ee8 	.word	0x20012ee8

08004478 <RtcDateCfgHandler>:

static void RtcDateCfgHandler(Command_t *Copy_pCmd, uint8_t *Copy_pu8RtcCfgState)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
	/* Get day, month, year info and configure RTC */
	/* Take case of invalid entries */
	const char *MsgDayConfing = 	"\r\nEnter the day      (1 - 31): ";
 8004482:	4b5f      	ldr	r3, [pc, #380]	@ (8004600 <RtcDateCfgHandler+0x188>)
 8004484:	617b      	str	r3, [r7, #20]
	const char *MsgMonConfing =		"\r\nEnter the Month    (1 - 12): ";
 8004486:	4b5f      	ldr	r3, [pc, #380]	@ (8004604 <RtcDateCfgHandler+0x18c>)
 8004488:	613b      	str	r3, [r7, #16]
	const char *MsgYearConfing =	"\r\nEnter the year     (0 - 99): ";
 800448a:	4b5f      	ldr	r3, [pc, #380]	@ (8004608 <RtcDateCfgHandler+0x190>)
 800448c:	60fb      	str	r3, [r7, #12]
	static uint8_t Local_u8WeekDay, Local_u8Day, Local_u8Mon, Local_u8Year;

	if (Copy_pCmd->Len <= 2U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7a9b      	ldrb	r3, [r3, #10]
 8004492:	2b02      	cmp	r3, #2
 8004494:	f200 80a3 	bhi.w	80045de <RtcDateCfgHandler+0x166>
	{
		switch (*Copy_pu8RtcCfgState)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b03      	cmp	r3, #3
 800449e:	f200 8092 	bhi.w	80045c6 <RtcDateCfgHandler+0x14e>
 80044a2:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <RtcDateCfgHandler+0x30>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044e9 	.word	0x080044e9
 80044b0:	08004519 	.word	0x08004519
 80044b4:	08004549 	.word	0x08004549
		{
		case WEEK_DAY_STATE:
			Local_u8WeekDay = u8StrToNum((const char *) Copy_pCmd->Payload, Copy_pCmd->Len);
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7a9b      	ldrb	r3, [r3, #10]
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f7ff fe55 	bl	8004170 <u8StrToNum>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b50      	ldr	r3, [pc, #320]	@ (800460c <RtcDateCfgHandler+0x194>)
 80044cc:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const char *) &MsgDayConfing, portMAX_DELAY);
 80044ce:	4b50      	ldr	r3, [pc, #320]	@ (8004610 <RtcDateCfgHandler+0x198>)
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	f107 0114 	add.w	r1, r7, #20
 80044d6:	2300      	movs	r3, #0
 80044d8:	f04f 32ff 	mov.w	r2, #4294967295
 80044dc:	f7fc fa30 	bl	8000940 <xQueueGenericSend>
			*Copy_pu8RtcCfgState = DAY_STATE;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
			break;
 80044e6:	e086      	b.n	80045f6 <RtcDateCfgHandler+0x17e>

		case DAY_STATE:
			Local_u8Day = u8StrToNum((const char *) Copy_pCmd->Payload, Copy_pCmd->Len);
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	7a9b      	ldrb	r3, [r3, #10]
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f7ff fe3d 	bl	8004170 <u8StrToNum>
 80044f6:	4603      	mov	r3, r0
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b46      	ldr	r3, [pc, #280]	@ (8004614 <RtcDateCfgHandler+0x19c>)
 80044fc:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const char *) &MsgMonConfing, portMAX_DELAY);
 80044fe:	4b44      	ldr	r3, [pc, #272]	@ (8004610 <RtcDateCfgHandler+0x198>)
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	f107 0110 	add.w	r1, r7, #16
 8004506:	2300      	movs	r3, #0
 8004508:	f04f 32ff 	mov.w	r2, #4294967295
 800450c:	f7fc fa18 	bl	8000940 <xQueueGenericSend>
			*Copy_pu8RtcCfgState = MON_STATE;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2202      	movs	r2, #2
 8004514:	701a      	strb	r2, [r3, #0]
			break;
 8004516:	e06e      	b.n	80045f6 <RtcDateCfgHandler+0x17e>

		case MON_STATE:
			Local_u8Mon = u8StrToNum((const char *) Copy_pCmd->Payload, Copy_pCmd->Len);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	7a9b      	ldrb	r3, [r3, #10]
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f7ff fe25 	bl	8004170 <u8StrToNum>
 8004526:	4603      	mov	r3, r0
 8004528:	461a      	mov	r2, r3
 800452a:	4b3b      	ldr	r3, [pc, #236]	@ (8004618 <RtcDateCfgHandler+0x1a0>)
 800452c:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const char *) &MsgYearConfing, portMAX_DELAY);
 800452e:	4b38      	ldr	r3, [pc, #224]	@ (8004610 <RtcDateCfgHandler+0x198>)
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f107 010c 	add.w	r1, r7, #12
 8004536:	2300      	movs	r3, #0
 8004538:	f04f 32ff 	mov.w	r2, #4294967295
 800453c:	f7fc fa00 	bl	8000940 <xQueueGenericSend>
			*Copy_pu8RtcCfgState = YEAR_STATE;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2203      	movs	r2, #3
 8004544:	701a      	strb	r2, [r3, #0]
			break;
 8004546:	e056      	b.n	80045f6 <RtcDateCfgHandler+0x17e>

		case YEAR_STATE:
			Local_u8Year = u8StrToNum((const char *) Copy_pCmd->Payload, Copy_pCmd->Len);
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7a9b      	ldrb	r3, [r3, #10]
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7ff fe0d 	bl	8004170 <u8StrToNum>
 8004556:	4603      	mov	r3, r0
 8004558:	461a      	mov	r2, r3
 800455a:	4b30      	ldr	r3, [pc, #192]	@ (800461c <RtcDateCfgHandler+0x1a4>)
 800455c:	701a      	strb	r2, [r3, #0]

			if (DateTime_u8IsDateCfgValid(Local_u8WeekDay, Local_u8Day, Local_u8Mon, Local_u8Year))
 800455e:	4b2b      	ldr	r3, [pc, #172]	@ (800460c <RtcDateCfgHandler+0x194>)
 8004560:	7818      	ldrb	r0, [r3, #0]
 8004562:	4b2c      	ldr	r3, [pc, #176]	@ (8004614 <RtcDateCfgHandler+0x19c>)
 8004564:	7819      	ldrb	r1, [r3, #0]
 8004566:	4b2c      	ldr	r3, [pc, #176]	@ (8004618 <RtcDateCfgHandler+0x1a0>)
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	4b2c      	ldr	r3, [pc, #176]	@ (800461c <RtcDateCfgHandler+0x1a4>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	f7ff f99d 	bl	80038ac <DateTime_u8IsDateCfgValid>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d014      	beq.n	80045a2 <RtcDateCfgHandler+0x12a>
			{
				/* Valid time config */
				DateTime_voidConfigDate(Local_u8WeekDay, Local_u8Day, Local_u8Mon, Local_u8Year);
 8004578:	4b24      	ldr	r3, [pc, #144]	@ (800460c <RtcDateCfgHandler+0x194>)
 800457a:	7818      	ldrb	r0, [r3, #0]
 800457c:	4b25      	ldr	r3, [pc, #148]	@ (8004614 <RtcDateCfgHandler+0x19c>)
 800457e:	7819      	ldrb	r1, [r3, #0]
 8004580:	4b25      	ldr	r3, [pc, #148]	@ (8004618 <RtcDateCfgHandler+0x1a0>)
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	4b25      	ldr	r3, [pc, #148]	@ (800461c <RtcDateCfgHandler+0x1a4>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f7ff f940 	bl	800380c <DateTime_voidConfigDate>
				xQueueSend(TxQueueHandle, (const char *) &ConfigSuccessMsg, portMAX_DELAY);
 800458c:	4b20      	ldr	r3, [pc, #128]	@ (8004610 <RtcDateCfgHandler+0x198>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	f04f 32ff 	mov.w	r2, #4294967295
 8004596:	4922      	ldr	r1, [pc, #136]	@ (8004620 <RtcDateCfgHandler+0x1a8>)
 8004598:	f7fc f9d2 	bl	8000940 <xQueueGenericSend>
				DateTime_voidShowDateTime();
 800459c:	f7ff f8d0 	bl	8003740 <DateTime_voidShowDateTime>
 80045a0:	e00a      	b.n	80045b8 <RtcDateCfgHandler+0x140>
			}
			else /* Invalid command */
			{
				CurrentState = MAIN_MENU_STATE;
 80045a2:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <RtcDateCfgHandler+0x1ac>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
				xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <RtcDateCfgHandler+0x198>)
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	2300      	movs	r3, #0
 80045ae:	f04f 32ff 	mov.w	r2, #4294967295
 80045b2:	491d      	ldr	r1, [pc, #116]	@ (8004628 <RtcDateCfgHandler+0x1b0>)
 80045b4:	f7fc f9c4 	bl	8000940 <xQueueGenericSend>
			}

			*Copy_pu8RtcCfgState = WEEK_DAY_STATE;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2200      	movs	r2, #0
 80045bc:	701a      	strb	r2, [r3, #0]
			CurrentState = MAIN_MENU_STATE;
 80045be:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <RtcDateCfgHandler+0x1ac>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
			break;
 80045c4:	e017      	b.n	80045f6 <RtcDateCfgHandler+0x17e>

		default:
			CurrentState = MAIN_MENU_STATE;
 80045c6:	4b17      	ldr	r3, [pc, #92]	@ (8004624 <RtcDateCfgHandler+0x1ac>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
			xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 80045cc:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <RtcDateCfgHandler+0x198>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295
 80045d6:	4914      	ldr	r1, [pc, #80]	@ (8004628 <RtcDateCfgHandler+0x1b0>)
 80045d8:	f7fc f9b2 	bl	8000940 <xQueueGenericSend>
			break;
 80045dc:	e00b      	b.n	80045f6 <RtcDateCfgHandler+0x17e>
		}
	}
	else /* Invalid command */
	{
		CurrentState = MAIN_MENU_STATE;
 80045de:	4b11      	ldr	r3, [pc, #68]	@ (8004624 <RtcDateCfgHandler+0x1ac>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
		xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 80045e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <RtcDateCfgHandler+0x198>)
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	2300      	movs	r3, #0
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295
 80045ee:	490e      	ldr	r1, [pc, #56]	@ (8004628 <RtcDateCfgHandler+0x1b0>)
 80045f0:	f7fc f9a6 	bl	8000940 <xQueueGenericSend>
	}
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	08009e7c 	.word	0x08009e7c
 8004604:	08009e9c 	.word	0x08009e9c
 8004608:	08009ebc 	.word	0x08009ebc
 800460c:	20012eed 	.word	0x20012eed
 8004610:	20012f74 	.word	0x20012f74
 8004614:	20012eee 	.word	0x20012eee
 8004618:	20012eef 	.word	0x20012eef
 800461c:	20012ef0 	.word	0x20012ef0
 8004620:	20000050 	.word	0x20000050
 8004624:	20012ee8 	.word	0x20012ee8
 8004628:	2000004c 	.word	0x2000004c

0800462c <RtcReportingHandler>:

static void RtcReportingHandler(Command_t *Copy_pCmd)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b087      	sub	sp, #28
 8004630:	af02      	add	r7, sp, #8
 8004632:	6078      	str	r0, [r7, #4]
	const char *Local_pcStartMsg = "\r\n\r\n--- Start Reporting ---\r\n";
 8004634:	4b29      	ldr	r3, [pc, #164]	@ (80046dc <RtcReportingHandler+0xb0>)
 8004636:	60fb      	str	r3, [r7, #12]
	const char *Local_pcStoptMsg = "\r\n\r\n--- Stop Reporting ---\r\n";
 8004638:	4b29      	ldr	r3, [pc, #164]	@ (80046e0 <RtcReportingHandler+0xb4>)
 800463a:	60bb      	str	r3, [r7, #8]

	if (1U == Copy_pCmd->Len)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7a9b      	ldrb	r3, [r3, #10]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d13b      	bne.n	80046bc <RtcReportingHandler+0x90>
	{
		if ('y' == Copy_pCmd->Payload[0U])
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b79      	cmp	r3, #121	@ 0x79
 800464a:	d116      	bne.n	800467a <RtcReportingHandler+0x4e>
		{
			xTimerStart(ReportTimerHandle, portMAX_DELAY);
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <RtcReportingHandler+0xb8>)
 800464e:	681c      	ldr	r4, [r3, #0]
 8004650:	f7fd f8b2 	bl	80017b8 <xTaskGetTickCount>
 8004654:	4602      	mov	r2, r0
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2300      	movs	r3, #0
 800465e:	2101      	movs	r1, #1
 8004660:	4620      	mov	r0, r4
 8004662:	f7fe f97b 	bl	800295c <xTimerGenericCommand>
			xQueueSend(TxQueueHandle, (const void *) &Local_pcStartMsg, portMAX_DELAY);
 8004666:	4b20      	ldr	r3, [pc, #128]	@ (80046e8 <RtcReportingHandler+0xbc>)
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	f107 010c 	add.w	r1, r7, #12
 800466e:	2300      	movs	r3, #0
 8004670:	f04f 32ff 	mov.w	r2, #4294967295
 8004674:	f7fc f964 	bl	8000940 <xQueueGenericSend>
 8004678:	e028      	b.n	80046cc <RtcReportingHandler+0xa0>
		}
		else if ('n' == Copy_pCmd->Payload[0U])
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b6e      	cmp	r3, #110	@ 0x6e
 8004680:	d113      	bne.n	80046aa <RtcReportingHandler+0x7e>
		{
			xTimerStop(ReportTimerHandle, portMAX_DELAY);
 8004682:	4b18      	ldr	r3, [pc, #96]	@ (80046e4 <RtcReportingHandler+0xb8>)
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	2200      	movs	r2, #0
 8004690:	2103      	movs	r1, #3
 8004692:	f7fe f963 	bl	800295c <xTimerGenericCommand>
			xQueueSend(TxQueueHandle, (const void *) &Local_pcStoptMsg, portMAX_DELAY);
 8004696:	4b14      	ldr	r3, [pc, #80]	@ (80046e8 <RtcReportingHandler+0xbc>)
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	f107 0108 	add.w	r1, r7, #8
 800469e:	2300      	movs	r3, #0
 80046a0:	f04f 32ff 	mov.w	r2, #4294967295
 80046a4:	f7fc f94c 	bl	8000940 <xQueueGenericSend>
 80046a8:	e010      	b.n	80046cc <RtcReportingHandler+0xa0>
		}
		else /* Invalid command */
		{
			xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 80046aa:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <RtcReportingHandler+0xbc>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	490d      	ldr	r1, [pc, #52]	@ (80046ec <RtcReportingHandler+0xc0>)
 80046b6:	f7fc f943 	bl	8000940 <xQueueGenericSend>
 80046ba:	e007      	b.n	80046cc <RtcReportingHandler+0xa0>
		}
	}
	else /* Invalid command */
	{
		xQueueSend(TxQueueHandle, (const void *) &InvalidMsg, portMAX_DELAY);
 80046bc:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <RtcReportingHandler+0xbc>)
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	2300      	movs	r3, #0
 80046c2:	f04f 32ff 	mov.w	r2, #4294967295
 80046c6:	4909      	ldr	r1, [pc, #36]	@ (80046ec <RtcReportingHandler+0xc0>)
 80046c8:	f7fc f93a 	bl	8000940 <xQueueGenericSend>
	}

	CurrentState = MAIN_MENU_STATE;
 80046cc:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <RtcReportingHandler+0xc4>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd90      	pop	{r4, r7, pc}
 80046da:	bf00      	nop
 80046dc:	08009edc 	.word	0x08009edc
 80046e0:	08009efc 	.word	0x08009efc
 80046e4:	20012f8c 	.word	0x20012f8c
 80046e8:	20012f74 	.word	0x20012f74
 80046ec:	2000004c 	.word	0x2000004c
 80046f0:	20012ee8 	.word	0x20012ee8

080046f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80046fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004700:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d013      	beq.n	8004734 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800470c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004710:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8004714:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800471c:	e000      	b.n	8004720 <ITM_SendChar+0x2c>
    {
      __NOP();
 800471e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004720:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f9      	beq.n	800471e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800472a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004734:	687b      	ldr	r3, [r7, #4]
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b08d      	sub	sp, #52	@ 0x34
 8004748:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800474a:	f000 fd27 	bl	800519c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800474e:	f000 f921 	bl	8004994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004752:	f000 f9df 	bl	8004b14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004756:	f000 f9b3 	bl	8004ac0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800475a:	f000 f98b 	bl	8004a74 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  Local_TaskStatus = xTaskCreate(&MenuTask, "Menu Task", 250U, NULL, 2U, &MenuTaskHandle);
 800475e:	4b74      	ldr	r3, [pc, #464]	@ (8004930 <main+0x1ec>)
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	2302      	movs	r3, #2
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	2300      	movs	r3, #0
 8004768:	22fa      	movs	r2, #250	@ 0xfa
 800476a:	4972      	ldr	r1, [pc, #456]	@ (8004934 <main+0x1f0>)
 800476c:	4872      	ldr	r0, [pc, #456]	@ (8004938 <main+0x1f4>)
 800476e:	f7fc fd5b 	bl	8001228 <xTaskCreate>
 8004772:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == Local_TaskStatus);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d00b      	beq.n	8004792 <main+0x4e>
        __asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	61fb      	str	r3, [r7, #28]
    }
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	e7fd      	b.n	800478e <main+0x4a>

  Local_TaskStatus = xTaskCreate(&CmdHandlerTask, "Cmd Task", 250U, NULL, 2U, &CommandTaskHandle);
 8004792:	4b6a      	ldr	r3, [pc, #424]	@ (800493c <main+0x1f8>)
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	2302      	movs	r3, #2
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2300      	movs	r3, #0
 800479c:	22fa      	movs	r2, #250	@ 0xfa
 800479e:	4968      	ldr	r1, [pc, #416]	@ (8004940 <main+0x1fc>)
 80047a0:	4868      	ldr	r0, [pc, #416]	@ (8004944 <main+0x200>)
 80047a2:	f7fc fd41 	bl	8001228 <xTaskCreate>
 80047a6:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == Local_TaskStatus);
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d00b      	beq.n	80047c6 <main+0x82>
        __asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	61bb      	str	r3, [r7, #24]
    }
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	e7fd      	b.n	80047c2 <main+0x7e>

  Local_TaskStatus = xTaskCreate(&PrintTask, "Print Task", 250U, NULL, 2U, &PrintTaskHandle);
 80047c6:	4b60      	ldr	r3, [pc, #384]	@ (8004948 <main+0x204>)
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	2302      	movs	r3, #2
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2300      	movs	r3, #0
 80047d0:	22fa      	movs	r2, #250	@ 0xfa
 80047d2:	495e      	ldr	r1, [pc, #376]	@ (800494c <main+0x208>)
 80047d4:	485e      	ldr	r0, [pc, #376]	@ (8004950 <main+0x20c>)
 80047d6:	f7fc fd27 	bl	8001228 <xTaskCreate>
 80047da:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == Local_TaskStatus);
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d00b      	beq.n	80047fa <main+0xb6>
        __asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	617b      	str	r3, [r7, #20]
    }
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	e7fd      	b.n	80047f6 <main+0xb2>

  Local_TaskStatus = xTaskCreate(&LEDTask, "LED Task", 250U, NULL, 2U, &LEDTaskHandle);
 80047fa:	4b56      	ldr	r3, [pc, #344]	@ (8004954 <main+0x210>)
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	2302      	movs	r3, #2
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	2300      	movs	r3, #0
 8004804:	22fa      	movs	r2, #250	@ 0xfa
 8004806:	4954      	ldr	r1, [pc, #336]	@ (8004958 <main+0x214>)
 8004808:	4854      	ldr	r0, [pc, #336]	@ (800495c <main+0x218>)
 800480a:	f7fc fd0d 	bl	8001228 <xTaskCreate>
 800480e:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == Local_TaskStatus);
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d00b      	beq.n	800482e <main+0xea>
        __asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	613b      	str	r3, [r7, #16]
    }
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	e7fd      	b.n	800482a <main+0xe6>

  Local_TaskStatus = xTaskCreate(&RTCTask, "RTC Task", 300U, NULL, 2U, &RTCTaskHandle);
 800482e:	4b4c      	ldr	r3, [pc, #304]	@ (8004960 <main+0x21c>)
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	2302      	movs	r3, #2
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2300      	movs	r3, #0
 8004838:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800483c:	4949      	ldr	r1, [pc, #292]	@ (8004964 <main+0x220>)
 800483e:	484a      	ldr	r0, [pc, #296]	@ (8004968 <main+0x224>)
 8004840:	f7fc fcf2 	bl	8001228 <xTaskCreate>
 8004844:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == Local_TaskStatus);
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d00b      	beq.n	8004864 <main+0x120>
        __asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	60fb      	str	r3, [r7, #12]
    }
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	e7fd      	b.n	8004860 <main+0x11c>

  TxQueueHandle = xQueueCreate(10U, sizeof(char *));
 8004864:	2200      	movs	r2, #0
 8004866:	2104      	movs	r1, #4
 8004868:	200a      	movs	r0, #10
 800486a:	f7fb fff7 	bl	800085c <xQueueGenericCreate>
 800486e:	4603      	mov	r3, r0
 8004870:	4a3e      	ldr	r2, [pc, #248]	@ (800496c <main+0x228>)
 8004872:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != TxQueueHandle);
 8004874:	4b3d      	ldr	r3, [pc, #244]	@ (800496c <main+0x228>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <main+0x150>
        __asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60bb      	str	r3, [r7, #8]
    }
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <main+0x14c>

  RxQueueHandle = xQueueCreate(10U, sizeof(char));
 8004894:	2200      	movs	r2, #0
 8004896:	2101      	movs	r1, #1
 8004898:	200a      	movs	r0, #10
 800489a:	f7fb ffdf 	bl	800085c <xQueueGenericCreate>
 800489e:	4603      	mov	r3, r0
 80048a0:	4a33      	ldr	r2, [pc, #204]	@ (8004970 <main+0x22c>)
 80048a2:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != RxQueueHandle);
 80048a4:	4b32      	ldr	r3, [pc, #200]	@ (8004970 <main+0x22c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10b      	bne.n	80048c4 <main+0x180>
        __asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	607b      	str	r3, [r7, #4]
    }
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <main+0x17c>

  for (uint8_t Local_u8LoopCounter = 0; Local_u8LoopCounter < NUM_OF_TIMERS; Local_u8LoopCounter++)
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048ca:	e017      	b.n	80048fc <main+0x1b8>
  {
	  LedTimerHandles[Local_u8LoopCounter] = xTimerCreate(
			  "Led Timer",
			  pdMS_TO_TICKS(500U),
			  pdTRUE,
			  (void *) (Local_u8LoopCounter + 1U),
 80048cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048d0:	3301      	adds	r3, #1
	  LedTimerHandles[Local_u8LoopCounter] = xTimerCreate(
 80048d2:	461a      	mov	r2, r3
 80048d4:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80048d8:	4b26      	ldr	r3, [pc, #152]	@ (8004974 <main+0x230>)
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	2201      	movs	r2, #1
 80048e0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80048e4:	4824      	ldr	r0, [pc, #144]	@ (8004978 <main+0x234>)
 80048e6:	f7fd ffdf 	bl	80028a8 <xTimerCreate>
 80048ea:	4603      	mov	r3, r0
 80048ec:	4a23      	ldr	r2, [pc, #140]	@ (800497c <main+0x238>)
 80048ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  for (uint8_t Local_u8LoopCounter = 0; Local_u8LoopCounter < NUM_OF_TIMERS; Local_u8LoopCounter++)
 80048f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048f6:	3301      	adds	r3, #1
 80048f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004900:	2b03      	cmp	r3, #3
 8004902:	d9e3      	bls.n	80048cc <main+0x188>
			  &LedEffectCb);
  }

  ReportTimerHandle = xTimerCreate("Reporting Timer", pdMS_TO_TICKS(1000U), pdTRUE, (void *) 6U, &ReportTimeCb);
 8004904:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <main+0x23c>)
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2306      	movs	r3, #6
 800490a:	2201      	movs	r2, #1
 800490c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004910:	481c      	ldr	r0, [pc, #112]	@ (8004984 <main+0x240>)
 8004912:	f7fd ffc9 	bl	80028a8 <xTimerCreate>
 8004916:	4603      	mov	r3, r0
 8004918:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <main+0x244>)
 800491a:	6013      	str	r3, [r2, #0]

  /* Enable UART receiving in INT mode */
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &cRxBuf, 1U);
 800491c:	2201      	movs	r2, #1
 800491e:	491b      	ldr	r1, [pc, #108]	@ (800498c <main+0x248>)
 8004920:	481b      	ldr	r0, [pc, #108]	@ (8004990 <main+0x24c>)
 8004922:	f002 ff86 	bl	8007832 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8004926:	f7fc fdeb 	bl	8001500 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800492a:	bf00      	nop
 800492c:	e7fd      	b.n	800492a <main+0x1e6>
 800492e:	bf00      	nop
 8004930:	20012f60 	.word	0x20012f60
 8004934:	08009f1c 	.word	0x08009f1c
 8004938:	08003d05 	.word	0x08003d05
 800493c:	20012f64 	.word	0x20012f64
 8004940:	08009f28 	.word	0x08009f28
 8004944:	08004021 	.word	0x08004021
 8004948:	20012f70 	.word	0x20012f70
 800494c:	08009f34 	.word	0x08009f34
 8004950:	08004051 	.word	0x08004051
 8004954:	20012f68 	.word	0x20012f68
 8004958:	08009f40 	.word	0x08009f40
 800495c:	08003df9 	.word	0x08003df9
 8004960:	20012f6c 	.word	0x20012f6c
 8004964:	08009f4c 	.word	0x08009f4c
 8004968:	08003f25 	.word	0x08003f25
 800496c:	20012f74 	.word	0x20012f74
 8004970:	20012f78 	.word	0x20012f78
 8004974:	08004c05 	.word	0x08004c05
 8004978:	08009f58 	.word	0x08009f58
 800497c:	20012f7c 	.word	0x20012f7c
 8004980:	08004c59 	.word	0x08004c59
 8004984:	08009f64 	.word	0x08009f64
 8004988:	20012f8c 	.word	0x20012f8c
 800498c:	20012f5c 	.word	0x20012f5c
 8004990:	20012f14 	.word	0x20012f14

08004994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b094      	sub	sp, #80	@ 0x50
 8004998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800499a:	f107 031c 	add.w	r3, r7, #28
 800499e:	2234      	movs	r2, #52	@ 0x34
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f003 fff7 	bl	8008996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049b8:	2300      	movs	r3, #0
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a6c <SystemClock_Config+0xd8>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a6c <SystemClock_Config+0xd8>)
 80049c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80049c8:	4b28      	ldr	r3, [pc, #160]	@ (8004a6c <SystemClock_Config+0xd8>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80049d4:	2300      	movs	r3, #0
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4b25      	ldr	r3, [pc, #148]	@ (8004a70 <SystemClock_Config+0xdc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80049e0:	4a23      	ldr	r2, [pc, #140]	@ (8004a70 <SystemClock_Config+0xdc>)
 80049e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b21      	ldr	r3, [pc, #132]	@ (8004a70 <SystemClock_Config+0xdc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80049f4:	230a      	movs	r3, #10
 80049f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80049f8:	2301      	movs	r3, #1
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049fc:	2301      	movs	r3, #1
 80049fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a00:	2310      	movs	r3, #16
 8004a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004a04:	2301      	movs	r3, #1
 8004a06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004a10:	2308      	movs	r3, #8
 8004a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004a14:	2354      	movs	r3, #84	@ 0x54
 8004a16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004a20:	2302      	movs	r3, #2
 8004a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a24:	f107 031c 	add.w	r3, r7, #28
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 fddb 	bl	80065e4 <HAL_RCC_OscConfig>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8004a34:	f000 f97e 	bl	8004d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a38:	230f      	movs	r3, #15
 8004a3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a4e:	f107 0308 	add.w	r3, r7, #8
 8004a52:	2102      	movs	r1, #2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 ff1f 	bl	8005898 <HAL_RCC_ClockConfig>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004a60:	f000 f968 	bl	8004d34 <Error_Handler>
  }
}
 8004a64:	bf00      	nop
 8004a66:	3750      	adds	r7, #80	@ 0x50
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40007000 	.word	0x40007000

08004a74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004a78:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab8 <MX_RTC_Init+0x44>)
 8004a7a:	4a10      	ldr	r2, [pc, #64]	@ (8004abc <MX_RTC_Init+0x48>)
 8004a7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab8 <MX_RTC_Init+0x44>)
 8004a80:	2240      	movs	r2, #64	@ 0x40
 8004a82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <MX_RTC_Init+0x44>)
 8004a86:	227f      	movs	r2, #127	@ 0x7f
 8004a88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <MX_RTC_Init+0x44>)
 8004a8c:	22ff      	movs	r2, #255	@ 0xff
 8004a8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004a90:	4b09      	ldr	r3, [pc, #36]	@ (8004ab8 <MX_RTC_Init+0x44>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004a96:	4b08      	ldr	r3, [pc, #32]	@ (8004ab8 <MX_RTC_Init+0x44>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004a9c:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <MX_RTC_Init+0x44>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004aa2:	4805      	ldr	r0, [pc, #20]	@ (8004ab8 <MX_RTC_Init+0x44>)
 8004aa4:	f002 f83c 	bl	8006b20 <HAL_RTC_Init>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8004aae:	f000 f941 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20012ef4 	.word	0x20012ef4
 8004abc:	40002800 	.word	0x40002800

08004ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ac4:	4b11      	ldr	r3, [pc, #68]	@ (8004b0c <MX_USART2_UART_Init+0x4c>)
 8004ac6:	4a12      	ldr	r2, [pc, #72]	@ (8004b10 <MX_USART2_UART_Init+0x50>)
 8004ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004aca:	4b10      	ldr	r3, [pc, #64]	@ (8004b0c <MX_USART2_UART_Init+0x4c>)
 8004acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b0c <MX_USART2_UART_Init+0x4c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <MX_USART2_UART_Init+0x4c>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ade:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <MX_USART2_UART_Init+0x4c>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ae4:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <MX_USART2_UART_Init+0x4c>)
 8004ae6:	220c      	movs	r2, #12
 8004ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aea:	4b08      	ldr	r3, [pc, #32]	@ (8004b0c <MX_USART2_UART_Init+0x4c>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004af0:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <MX_USART2_UART_Init+0x4c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004af6:	4805      	ldr	r0, [pc, #20]	@ (8004b0c <MX_USART2_UART_Init+0x4c>)
 8004af8:	f002 fdc0 	bl	800767c <HAL_UART_Init>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004b02:	f000 f917 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20012f14 	.word	0x20012f14
 8004b10:	40004400 	.word	0x40004400

08004b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	@ 0x28
 8004b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b1a:	f107 0314 	add.w	r3, r7, #20
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	605a      	str	r2, [r3, #4]
 8004b24:	609a      	str	r2, [r3, #8]
 8004b26:	60da      	str	r2, [r3, #12]
 8004b28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	4b32      	ldr	r3, [pc, #200]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	4a31      	ldr	r2, [pc, #196]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b56:	4b28      	ldr	r3, [pc, #160]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	4a23      	ldr	r2, [pc, #140]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b72:	4b21      	ldr	r3, [pc, #132]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b86:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b88:	f043 0302 	orr.w	r3, r3, #2
 8004b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf8 <MX_GPIO_Init+0xe4>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8004ba0:	4816      	ldr	r0, [pc, #88]	@ (8004bfc <MX_GPIO_Init+0xe8>)
 8004ba2:	f000 fe45 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004bac:	4814      	ldr	r0, [pc, #80]	@ (8004c00 <MX_GPIO_Init+0xec>)
 8004bae:	f000 fe3f 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8004bb2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8004bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bc4:	f107 0314 	add.w	r3, r7, #20
 8004bc8:	4619      	mov	r1, r3
 8004bca:	480c      	ldr	r0, [pc, #48]	@ (8004bfc <MX_GPIO_Init+0xe8>)
 8004bcc:	f000 fc9c 	bl	8005508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bde:	2300      	movs	r3, #0
 8004be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	4619      	mov	r1, r3
 8004be8:	4805      	ldr	r0, [pc, #20]	@ (8004c00 <MX_GPIO_Init+0xec>)
 8004bea:	f000 fc8d 	bl	8005508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004bee:	bf00      	nop
 8004bf0:	3728      	adds	r7, #40	@ 0x28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	40020800 	.word	0x40020800
 8004c00:	40020000 	.word	0x40020000

08004c04 <LedEffectCb>:

/* USER CODE BEGIN 4 */

void LedEffectCb(TimerHandle_t Copy_TimerHandle)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8TimerID;
	Local_u8TimerID = (uint32_t) pvTimerGetTimerID(Copy_TimerHandle);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fe f94b 	bl	8002ea8 <pvTimerGetTimerID>
 8004c12:	4603      	mov	r3, r0
 8004c14:	73fb      	strb	r3, [r7, #15]

	switch (Local_u8TimerID)
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d816      	bhi.n	8004c4c <LedEffectCb+0x48>
 8004c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c24 <LedEffectCb+0x20>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c35 	.word	0x08004c35
 8004c28:	08004c3b 	.word	0x08004c3b
 8004c2c:	08004c41 	.word	0x08004c41
 8004c30:	08004c47 	.word	0x08004c47
	{
	case 1: LedEffectAction1(); break;
 8004c34:	f7fe ff46 	bl	8003ac4 <LedEffectAction1>
 8004c38:	e009      	b.n	8004c4e <LedEffectCb+0x4a>
	case 2: LedEffectAction2(); break;
 8004c3a:	f7fe ff65 	bl	8003b08 <LedEffectAction2>
 8004c3e:	e006      	b.n	8004c4e <LedEffectCb+0x4a>
	case 3: LedEffectAction3(); break;
 8004c40:	f7fe ff7e 	bl	8003b40 <LedEffectAction3>
 8004c44:	e003      	b.n	8004c4e <LedEffectCb+0x4a>
	case 4: LedEffectAction4(); break;
 8004c46:	f7fe ff93 	bl	8003b70 <LedEffectAction4>
 8004c4a:	e000      	b.n	8004c4e <LedEffectCb+0x4a>
	default: break;
 8004c4c:	bf00      	nop
	}
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop

08004c58 <ReportTimeCb>:

void ReportTimeCb(TimerHandle_t Copy_TimerHandle)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	DateTime_voidReportDateTime_ITM();
 8004c60:	f7fe feac 	bl	80039bc <DateTime_voidReportDateTime_ITM>
}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	6078      	str	r0, [r7, #4]
	if (pdFALSE == xQueueIsQueueFullFromISR(RxQueueHandle))
 8004c74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x74>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fc fa2a 	bl	80010d2 <xQueueIsQueueFullFromISR>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d107      	bne.n	8004c94 <HAL_UART_RxCpltCallback+0x28>
	{
		/* Queue is not full, Enqueue the data */
		xQueueSendFromISR(RxQueueHandle, (const void *) &cRxBuf, NULL);
 8004c84:	4b16      	ldr	r3, [pc, #88]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x74>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4915      	ldr	r1, [pc, #84]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x78>)
 8004c8e:	f7fb ff59 	bl	8000b44 <xQueueGenericSendFromISR>
 8004c92:	e00b      	b.n	8004cac <HAL_UART_RxCpltCallback+0x40>
	}
	else /* Queue is full */
	{
		if ('\r' == cRxBuf)
 8004c94:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x78>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b0d      	cmp	r3, #13
 8004c9c:	d106      	bne.n	8004cac <HAL_UART_RxCpltCallback+0x40>
		{
			xQueueOverwriteFromISR(RxQueueHandle, (const void *) &cRxBuf, NULL);
 8004c9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x74>)
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	490f      	ldr	r1, [pc, #60]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x78>)
 8004ca8:	f7fb ff4c 	bl	8000b44 <xQueueGenericSendFromISR>
		}
	}

	if ('\r' == cRxBuf)
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x78>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b0d      	cmp	r3, #13
 8004cb4:	d10a      	bne.n	8004ccc <HAL_UART_RxCpltCallback+0x60>
	{
		/* Command is finished, Now notify the command handler task */
		xTaskNotifyFromISR(CommandTaskHandle, 0U, eNoAction, NULL);
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x7c>)
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	f7fd fbd4 	bl	8002474 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART receiving in INT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t *) &cRxBuf, 1U);
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4905      	ldr	r1, [pc, #20]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x78>)
 8004cd0:	4806      	ldr	r0, [pc, #24]	@ (8004cec <HAL_UART_RxCpltCallback+0x80>)
 8004cd2:	f002 fdae 	bl	8007832 <HAL_UART_Receive_IT>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20012f78 	.word	0x20012f78
 8004ce4:	20012f5c 	.word	0x20012f5c
 8004ce8:	20012f64 	.word	0x20012f64
 8004cec:	20012f14 	.word	0x20012f14

08004cf0 <__io_putchar>:

int __io_putchar(int ch)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	int32_t Local_i32Ret;
	Local_i32Ret = ITM_SendChar(ch);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fcfa 	bl	80046f4 <ITM_SendChar>
 8004d00:	4603      	mov	r3, r0
 8004d02:	60fb      	str	r3, [r7, #12]
	return Local_i32Ret;
 8004d04:	68fb      	ldr	r3, [r7, #12]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a04      	ldr	r2, [pc, #16]	@ (8004d30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004d22:	f000 fa5d 	bl	80051e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40001000 	.word	0x40001000

08004d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d38:	b672      	cpsid	i
}
 8004d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d3c:	bf00      	nop
 8004d3e:	e7fd      	b.n	8004d3c <Error_Handler+0x8>

08004d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	4b10      	ldr	r3, [pc, #64]	@ (8004d8c <HAL_MspInit+0x4c>)
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8004d8c <HAL_MspInit+0x4c>)
 8004d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <HAL_MspInit+0x4c>)
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d5e:	607b      	str	r3, [r7, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_MspInit+0x4c>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	4a08      	ldr	r2, [pc, #32]	@ (8004d8c <HAL_MspInit+0x4c>)
 8004d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d72:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_MspInit+0x4c>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800

08004d90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b09a      	sub	sp, #104	@ 0x68
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d98:	f107 030c 	add.w	r3, r7, #12
 8004d9c:	225c      	movs	r2, #92	@ 0x5c
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f003 fdf8 	bl	8008996 <memset>
  if(hrtc->Instance==RTC)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a0c      	ldr	r2, [pc, #48]	@ (8004ddc <HAL_RTC_MspInit+0x4c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d111      	bne.n	8004dd4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004db0:	2320      	movs	r3, #32
 8004db2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004db4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004dba:	f107 030c 	add.w	r3, r7, #12
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 feb6 	bl	8005b30 <HAL_RCCEx_PeriphCLKConfig>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004dca:	f7ff ffb3 	bl	8004d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004dce:	4b04      	ldr	r3, [pc, #16]	@ (8004de0 <HAL_RTC_MspInit+0x50>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004dd4:	bf00      	nop
 8004dd6:	3768      	adds	r7, #104	@ 0x68
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40002800 	.word	0x40002800
 8004de0:	42470e3c 	.word	0x42470e3c

08004de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	@ 0x28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1d      	ldr	r2, [pc, #116]	@ (8004e78 <HAL_UART_MspInit+0x94>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d133      	bne.n	8004e6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8004e7c <HAL_UART_MspInit+0x98>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004e7c <HAL_UART_MspInit+0x98>)
 8004e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e16:	4b19      	ldr	r3, [pc, #100]	@ (8004e7c <HAL_UART_MspInit+0x98>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	4b15      	ldr	r3, [pc, #84]	@ (8004e7c <HAL_UART_MspInit+0x98>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2a:	4a14      	ldr	r2, [pc, #80]	@ (8004e7c <HAL_UART_MspInit+0x98>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e32:	4b12      	ldr	r3, [pc, #72]	@ (8004e7c <HAL_UART_MspInit+0x98>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004e3e:	230c      	movs	r3, #12
 8004e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e42:	2302      	movs	r3, #2
 8004e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e4e:	2307      	movs	r3, #7
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e52:	f107 0314 	add.w	r3, r7, #20
 8004e56:	4619      	mov	r1, r3
 8004e58:	4809      	ldr	r0, [pc, #36]	@ (8004e80 <HAL_UART_MspInit+0x9c>)
 8004e5a:	f000 fb55 	bl	8005508 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2106      	movs	r1, #6
 8004e62:	2026      	movs	r0, #38	@ 0x26
 8004e64:	f000 fa94 	bl	8005390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004e68:	2026      	movs	r0, #38	@ 0x26
 8004e6a:	f000 faad 	bl	80053c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e6e:	bf00      	nop
 8004e70:	3728      	adds	r7, #40	@ 0x28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40004400 	.word	0x40004400
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40020000 	.word	0x40020000

08004e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08e      	sub	sp, #56	@ 0x38
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	4b33      	ldr	r3, [pc, #204]	@ (8004f68 <HAL_InitTick+0xe4>)
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	4a32      	ldr	r2, [pc, #200]	@ (8004f68 <HAL_InitTick+0xe4>)
 8004e9e:	f043 0310 	orr.w	r3, r3, #16
 8004ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ea4:	4b30      	ldr	r3, [pc, #192]	@ (8004f68 <HAL_InitTick+0xe4>)
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004eb0:	f107 0210 	add.w	r2, r7, #16
 8004eb4:	f107 0314 	add.w	r3, r7, #20
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fe06 	bl	8005acc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004eca:	f000 fdd7 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8004ece:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ed0:	e004      	b.n	8004edc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004ed2:	f000 fdd3 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ede:	4a23      	ldr	r2, [pc, #140]	@ (8004f6c <HAL_InitTick+0xe8>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	0c9b      	lsrs	r3, r3, #18
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004eea:	4b21      	ldr	r3, [pc, #132]	@ (8004f70 <HAL_InitTick+0xec>)
 8004eec:	4a21      	ldr	r2, [pc, #132]	@ (8004f74 <HAL_InitTick+0xf0>)
 8004eee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f70 <HAL_InitTick+0xec>)
 8004ef2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ef6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f70 <HAL_InitTick+0xec>)
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004efe:	4b1c      	ldr	r3, [pc, #112]	@ (8004f70 <HAL_InitTick+0xec>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f04:	4b1a      	ldr	r3, [pc, #104]	@ (8004f70 <HAL_InitTick+0xec>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f0a:	4b19      	ldr	r3, [pc, #100]	@ (8004f70 <HAL_InitTick+0xec>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004f10:	4817      	ldr	r0, [pc, #92]	@ (8004f70 <HAL_InitTick+0xec>)
 8004f12:	f002 f911 	bl	8007138 <HAL_TIM_Base_Init>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d11b      	bne.n	8004f5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004f24:	4812      	ldr	r0, [pc, #72]	@ (8004f70 <HAL_InitTick+0xec>)
 8004f26:	f002 f961 	bl	80071ec <HAL_TIM_Base_Start_IT>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004f30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d111      	bne.n	8004f5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f38:	2036      	movs	r0, #54	@ 0x36
 8004f3a:	f000 fa45 	bl	80053c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b0f      	cmp	r3, #15
 8004f42:	d808      	bhi.n	8004f56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004f44:	2200      	movs	r2, #0
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	2036      	movs	r0, #54	@ 0x36
 8004f4a:	f000 fa21 	bl	8005390 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f78 <HAL_InitTick+0xf4>)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	e002      	b.n	8004f5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3738      	adds	r7, #56	@ 0x38
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	431bde83 	.word	0x431bde83
 8004f70:	20012f90 	.word	0x20012f90
 8004f74:	40001000 	.word	0x40001000
 8004f78:	2000005c 	.word	0x2000005c

08004f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f80:	bf00      	nop
 8004f82:	e7fd      	b.n	8004f80 <NMI_Handler+0x4>

08004f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <HardFault_Handler+0x4>

08004f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f90:	bf00      	nop
 8004f92:	e7fd      	b.n	8004f90 <MemManage_Handler+0x4>

08004f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f98:	bf00      	nop
 8004f9a:	e7fd      	b.n	8004f98 <BusFault_Handler+0x4>

08004f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <UsageFault_Handler+0x4>

08004fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fa8:	bf00      	nop
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004fb8:	4802      	ldr	r0, [pc, #8]	@ (8004fc4 <USART2_IRQHandler+0x10>)
 8004fba:	f002 fc5f 	bl	800787c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004fbe:	bf00      	nop
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20012f14 	.word	0x20012f14

08004fc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004fcc:	4802      	ldr	r0, [pc, #8]	@ (8004fd8 <TIM6_DAC_IRQHandler+0x10>)
 8004fce:	f002 f97d 	bl	80072cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20012f90 	.word	0x20012f90

08004fdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e00a      	b.n	8005004 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004fee:	f3af 8000 	nop.w
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	60ba      	str	r2, [r7, #8]
 8004ffa:	b2ca      	uxtb	r2, r1
 8004ffc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	3301      	adds	r3, #1
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	dbf0      	blt.n	8004fee <_read+0x12>
  }

  return len;
 800500c:	687b      	ldr	r3, [r7, #4]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	e009      	b.n	800503c <_write+0x26>
  {
	  __io_putchar(*ptr++);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	60ba      	str	r2, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fe5d 	bl	8004cf0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	3301      	adds	r3, #1
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	dbf1      	blt.n	8005028 <_write+0x12>
  }
  return len;
 8005044:	687b      	ldr	r3, [r7, #4]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <_close>:

int _close(int file)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005076:	605a      	str	r2, [r3, #4]
  return 0;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <_isatty>:

int _isatty(int file)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800508e:	2301      	movs	r3, #1
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050c0:	4a14      	ldr	r2, [pc, #80]	@ (8005114 <_sbrk+0x5c>)
 80050c2:	4b15      	ldr	r3, [pc, #84]	@ (8005118 <_sbrk+0x60>)
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050cc:	4b13      	ldr	r3, [pc, #76]	@ (800511c <_sbrk+0x64>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050d4:	4b11      	ldr	r3, [pc, #68]	@ (800511c <_sbrk+0x64>)
 80050d6:	4a12      	ldr	r2, [pc, #72]	@ (8005120 <_sbrk+0x68>)
 80050d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050da:	4b10      	ldr	r3, [pc, #64]	@ (800511c <_sbrk+0x64>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4413      	add	r3, r2
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d207      	bcs.n	80050f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050e8:	f003 fca4 	bl	8008a34 <__errno>
 80050ec:	4603      	mov	r3, r0
 80050ee:	220c      	movs	r2, #12
 80050f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295
 80050f6:	e009      	b.n	800510c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050f8:	4b08      	ldr	r3, [pc, #32]	@ (800511c <_sbrk+0x64>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050fe:	4b07      	ldr	r3, [pc, #28]	@ (800511c <_sbrk+0x64>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	4a05      	ldr	r2, [pc, #20]	@ (800511c <_sbrk+0x64>)
 8005108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20020000 	.word	0x20020000
 8005118:	00000400 	.word	0x00000400
 800511c:	20012fd8 	.word	0x20012fd8
 8005120:	20013130 	.word	0x20013130

08005124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005128:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <SystemInit+0x20>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	4a05      	ldr	r2, [pc, #20]	@ (8005144 <SystemInit+0x20>)
 8005130:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005134:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005138:	bf00      	nop
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	e000ed00 	.word	0xe000ed00

08005148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005148:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005180 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800514c:	f7ff ffea 	bl	8005124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005150:	480c      	ldr	r0, [pc, #48]	@ (8005184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005152:	490d      	ldr	r1, [pc, #52]	@ (8005188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005154:	4a0d      	ldr	r2, [pc, #52]	@ (800518c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005158:	e002      	b.n	8005160 <LoopCopyDataInit>

0800515a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800515a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800515c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800515e:	3304      	adds	r3, #4

08005160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005164:	d3f9      	bcc.n	800515a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005166:	4a0a      	ldr	r2, [pc, #40]	@ (8005190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005168:	4c0a      	ldr	r4, [pc, #40]	@ (8005194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800516a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800516c:	e001      	b.n	8005172 <LoopFillZerobss>

0800516e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800516e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005170:	3204      	adds	r2, #4

08005172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005174:	d3fb      	bcc.n	800516e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005176:	f003 fc63 	bl	8008a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800517a:	f7ff fae3 	bl	8004744 <main>
  bx  lr    
 800517e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005188:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 800518c:	08009fd0 	.word	0x08009fd0
  ldr r2, =_sbss
 8005190:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8005194:	2001312c 	.word	0x2001312c

08005198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005198:	e7fe      	b.n	8005198 <ADC_IRQHandler>
	...

0800519c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051a0:	4b0e      	ldr	r3, [pc, #56]	@ (80051dc <HAL_Init+0x40>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0d      	ldr	r2, [pc, #52]	@ (80051dc <HAL_Init+0x40>)
 80051a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051ac:	4b0b      	ldr	r3, [pc, #44]	@ (80051dc <HAL_Init+0x40>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	@ (80051dc <HAL_Init+0x40>)
 80051b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051b8:	4b08      	ldr	r3, [pc, #32]	@ (80051dc <HAL_Init+0x40>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a07      	ldr	r2, [pc, #28]	@ (80051dc <HAL_Init+0x40>)
 80051be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051c4:	2003      	movs	r0, #3
 80051c6:	f000 f8d8 	bl	800537a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051ca:	200f      	movs	r0, #15
 80051cc:	f7ff fe5a 	bl	8004e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051d0:	f7ff fdb6 	bl	8004d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40023c00 	.word	0x40023c00

080051e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051e4:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <HAL_IncTick+0x20>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <HAL_IncTick+0x24>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4413      	add	r3, r2
 80051f0:	4a04      	ldr	r2, [pc, #16]	@ (8005204 <HAL_IncTick+0x24>)
 80051f2:	6013      	str	r3, [r2, #0]
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20000060 	.word	0x20000060
 8005204:	20012fdc 	.word	0x20012fdc

08005208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return uwTick;
 800520c:	4b03      	ldr	r3, [pc, #12]	@ (800521c <HAL_GetTick+0x14>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20012fdc 	.word	0x20012fdc

08005220 <__NVIC_SetPriorityGrouping>:
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005230:	4b0c      	ldr	r3, [pc, #48]	@ (8005264 <__NVIC_SetPriorityGrouping+0x44>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800523c:	4013      	ands	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800524c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005252:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <__NVIC_SetPriorityGrouping+0x44>)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	60d3      	str	r3, [r2, #12]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <__NVIC_GetPriorityGrouping>:
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800526c:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <__NVIC_GetPriorityGrouping+0x18>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	0a1b      	lsrs	r3, r3, #8
 8005272:	f003 0307 	and.w	r3, r3, #7
}
 8005276:	4618      	mov	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	e000ed00 	.word	0xe000ed00

08005284 <__NVIC_EnableIRQ>:
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	2b00      	cmp	r3, #0
 8005294:	db0b      	blt.n	80052ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	f003 021f 	and.w	r2, r3, #31
 800529c:	4907      	ldr	r1, [pc, #28]	@ (80052bc <__NVIC_EnableIRQ+0x38>)
 800529e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2001      	movs	r0, #1
 80052a6:	fa00 f202 	lsl.w	r2, r0, r2
 80052aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	e000e100 	.word	0xe000e100

080052c0 <__NVIC_SetPriority>:
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	6039      	str	r1, [r7, #0]
 80052ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	db0a      	blt.n	80052ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	490c      	ldr	r1, [pc, #48]	@ (800530c <__NVIC_SetPriority+0x4c>)
 80052da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052de:	0112      	lsls	r2, r2, #4
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	440b      	add	r3, r1
 80052e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80052e8:	e00a      	b.n	8005300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	4908      	ldr	r1, [pc, #32]	@ (8005310 <__NVIC_SetPriority+0x50>)
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	3b04      	subs	r3, #4
 80052f8:	0112      	lsls	r2, r2, #4
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	440b      	add	r3, r1
 80052fe:	761a      	strb	r2, [r3, #24]
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	e000e100 	.word	0xe000e100
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <NVIC_EncodePriority>:
{
 8005314:	b480      	push	{r7}
 8005316:	b089      	sub	sp, #36	@ 0x24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f1c3 0307 	rsb	r3, r3, #7
 800532e:	2b04      	cmp	r3, #4
 8005330:	bf28      	it	cs
 8005332:	2304      	movcs	r3, #4
 8005334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	3304      	adds	r3, #4
 800533a:	2b06      	cmp	r3, #6
 800533c:	d902      	bls.n	8005344 <NVIC_EncodePriority+0x30>
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	3b03      	subs	r3, #3
 8005342:	e000      	b.n	8005346 <NVIC_EncodePriority+0x32>
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005348:	f04f 32ff 	mov.w	r2, #4294967295
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	43da      	mvns	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	401a      	ands	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800535c:	f04f 31ff 	mov.w	r1, #4294967295
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	fa01 f303 	lsl.w	r3, r1, r3
 8005366:	43d9      	mvns	r1, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800536c:	4313      	orrs	r3, r2
}
 800536e:	4618      	mov	r0, r3
 8005370:	3724      	adds	r7, #36	@ 0x24
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff ff4c 	bl	8005220 <__NVIC_SetPriorityGrouping>
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053a2:	f7ff ff61 	bl	8005268 <__NVIC_GetPriorityGrouping>
 80053a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	6978      	ldr	r0, [r7, #20]
 80053ae:	f7ff ffb1 	bl	8005314 <NVIC_EncodePriority>
 80053b2:	4602      	mov	r2, r0
 80053b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053b8:	4611      	mov	r1, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff ff80 	bl	80052c0 <__NVIC_SetPriority>
}
 80053c0:	bf00      	nop
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff ff54 	bl	8005284 <__NVIC_EnableIRQ>
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053f2:	f7ff ff09 	bl	8005208 <HAL_GetTick>
 80053f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d008      	beq.n	8005416 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2280      	movs	r2, #128	@ 0x80
 8005408:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e052      	b.n	80054bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0216 	bic.w	r2, r2, #22
 8005424:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695a      	ldr	r2, [r3, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005434:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <HAL_DMA_Abort+0x62>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0208 	bic.w	r2, r2, #8
 8005454:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005466:	e013      	b.n	8005490 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005468:	f7ff fece 	bl	8005208 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b05      	cmp	r3, #5
 8005474:	d90c      	bls.n	8005490 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2203      	movs	r2, #3
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e015      	b.n	80054bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e4      	bne.n	8005468 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a2:	223f      	movs	r2, #63	@ 0x3f
 80054a4:	409a      	lsls	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d004      	beq.n	80054e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2280      	movs	r2, #128	@ 0x80
 80054dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e00c      	b.n	80054fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2205      	movs	r2, #5
 80054e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005508:	b480      	push	{r7}
 800550a:	b089      	sub	sp, #36	@ 0x24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	e165      	b.n	80057f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005524:	2201      	movs	r2, #1
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4013      	ands	r3, r2
 8005536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	429a      	cmp	r2, r3
 800553e:	f040 8154 	bne.w	80057ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d005      	beq.n	800555a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005556:	2b02      	cmp	r3, #2
 8005558:	d130      	bne.n	80055bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	2203      	movs	r2, #3
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4313      	orrs	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005590:	2201      	movs	r2, #1
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4013      	ands	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 0201 	and.w	r2, r3, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d017      	beq.n	80055f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	2203      	movs	r2, #3
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	4013      	ands	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d123      	bne.n	800564c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	08da      	lsrs	r2, r3, #3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3208      	adds	r2, #8
 800560c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	220f      	movs	r2, #15
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	4013      	ands	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4313      	orrs	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	08da      	lsrs	r2, r3, #3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3208      	adds	r2, #8
 8005646:	69b9      	ldr	r1, [r7, #24]
 8005648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	2203      	movs	r2, #3
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4013      	ands	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 0203 	and.w	r2, r3, #3
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4313      	orrs	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80ae 	beq.w	80057ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4b5d      	ldr	r3, [pc, #372]	@ (8005808 <HAL_GPIO_Init+0x300>)
 8005694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005696:	4a5c      	ldr	r2, [pc, #368]	@ (8005808 <HAL_GPIO_Init+0x300>)
 8005698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800569c:	6453      	str	r3, [r2, #68]	@ 0x44
 800569e:	4b5a      	ldr	r3, [pc, #360]	@ (8005808 <HAL_GPIO_Init+0x300>)
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056aa:	4a58      	ldr	r2, [pc, #352]	@ (800580c <HAL_GPIO_Init+0x304>)
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	3302      	adds	r3, #2
 80056b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	220f      	movs	r2, #15
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43db      	mvns	r3, r3
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	4013      	ands	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4f      	ldr	r2, [pc, #316]	@ (8005810 <HAL_GPIO_Init+0x308>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d025      	beq.n	8005722 <HAL_GPIO_Init+0x21a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005814 <HAL_GPIO_Init+0x30c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01f      	beq.n	800571e <HAL_GPIO_Init+0x216>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a4d      	ldr	r2, [pc, #308]	@ (8005818 <HAL_GPIO_Init+0x310>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d019      	beq.n	800571a <HAL_GPIO_Init+0x212>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a4c      	ldr	r2, [pc, #304]	@ (800581c <HAL_GPIO_Init+0x314>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <HAL_GPIO_Init+0x20e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a4b      	ldr	r2, [pc, #300]	@ (8005820 <HAL_GPIO_Init+0x318>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00d      	beq.n	8005712 <HAL_GPIO_Init+0x20a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005824 <HAL_GPIO_Init+0x31c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <HAL_GPIO_Init+0x206>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a49      	ldr	r2, [pc, #292]	@ (8005828 <HAL_GPIO_Init+0x320>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d101      	bne.n	800570a <HAL_GPIO_Init+0x202>
 8005706:	2306      	movs	r3, #6
 8005708:	e00c      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 800570a:	2307      	movs	r3, #7
 800570c:	e00a      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 800570e:	2305      	movs	r3, #5
 8005710:	e008      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 8005712:	2304      	movs	r3, #4
 8005714:	e006      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 8005716:	2303      	movs	r3, #3
 8005718:	e004      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 800571a:	2302      	movs	r3, #2
 800571c:	e002      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 8005722:	2300      	movs	r3, #0
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	f002 0203 	and.w	r2, r2, #3
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	4093      	lsls	r3, r2
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005734:	4935      	ldr	r1, [pc, #212]	@ (800580c <HAL_GPIO_Init+0x304>)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	3302      	adds	r3, #2
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005742:	4b3a      	ldr	r3, [pc, #232]	@ (800582c <HAL_GPIO_Init+0x324>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	43db      	mvns	r3, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4013      	ands	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005766:	4a31      	ldr	r2, [pc, #196]	@ (800582c <HAL_GPIO_Init+0x324>)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800576c:	4b2f      	ldr	r3, [pc, #188]	@ (800582c <HAL_GPIO_Init+0x324>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005790:	4a26      	ldr	r2, [pc, #152]	@ (800582c <HAL_GPIO_Init+0x324>)
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005796:	4b25      	ldr	r3, [pc, #148]	@ (800582c <HAL_GPIO_Init+0x324>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	43db      	mvns	r3, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057ba:	4a1c      	ldr	r2, [pc, #112]	@ (800582c <HAL_GPIO_Init+0x324>)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057c0:	4b1a      	ldr	r3, [pc, #104]	@ (800582c <HAL_GPIO_Init+0x324>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057e4:	4a11      	ldr	r2, [pc, #68]	@ (800582c <HAL_GPIO_Init+0x324>)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3301      	adds	r3, #1
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	f67f ae96 	bls.w	8005524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	3724      	adds	r7, #36	@ 0x24
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40023800 	.word	0x40023800
 800580c:	40013800 	.word	0x40013800
 8005810:	40020000 	.word	0x40020000
 8005814:	40020400 	.word	0x40020400
 8005818:	40020800 	.word	0x40020800
 800581c:	40020c00 	.word	0x40020c00
 8005820:	40021000 	.word	0x40021000
 8005824:	40021400 	.word	0x40021400
 8005828:	40021800 	.word	0x40021800
 800582c:	40013c00 	.word	0x40013c00

08005830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800584c:	e003      	b.n	8005856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	041a      	lsls	r2, r3, #16
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	619a      	str	r2, [r3, #24]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005874:	887a      	ldrh	r2, [r7, #2]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4013      	ands	r3, r2
 800587a:	041a      	lsls	r2, r3, #16
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	43d9      	mvns	r1, r3
 8005880:	887b      	ldrh	r3, [r7, #2]
 8005882:	400b      	ands	r3, r1
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	619a      	str	r2, [r3, #24]
}
 800588a:	bf00      	nop
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0cc      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058ac:	4b68      	ldr	r3, [pc, #416]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d90c      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ba:	4b65      	ldr	r3, [pc, #404]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b63      	ldr	r3, [pc, #396]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0b8      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d020      	beq.n	8005922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ec:	4b59      	ldr	r3, [pc, #356]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a58      	ldr	r2, [pc, #352]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005904:	4b53      	ldr	r3, [pc, #332]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4a52      	ldr	r2, [pc, #328]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800590e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005910:	4b50      	ldr	r3, [pc, #320]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	494d      	ldr	r1, [pc, #308]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d044      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d107      	bne.n	8005946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d119      	bne.n	8005976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e07f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d003      	beq.n	8005956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005952:	2b03      	cmp	r3, #3
 8005954:	d107      	bne.n	8005966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005956:	4b3f      	ldr	r3, [pc, #252]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e06f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005966:	4b3b      	ldr	r3, [pc, #236]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e067      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005976:	4b37      	ldr	r3, [pc, #220]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f023 0203 	bic.w	r2, r3, #3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4934      	ldr	r1, [pc, #208]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	4313      	orrs	r3, r2
 8005986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005988:	f7ff fc3e 	bl	8005208 <HAL_GetTick>
 800598c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005990:	f7ff fc3a 	bl	8005208 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e04f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 020c 	and.w	r2, r3, #12
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1eb      	bne.n	8005990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b8:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d20c      	bcs.n	80059e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b22      	ldr	r3, [pc, #136]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b20      	ldr	r3, [pc, #128]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e032      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ec:	4b19      	ldr	r3, [pc, #100]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4916      	ldr	r1, [pc, #88]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	490e      	ldr	r1, [pc, #56]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a1e:	f000 fbb1 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8005a22:	4602      	mov	r2, r0
 8005a24:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	490a      	ldr	r1, [pc, #40]	@ (8005a58 <HAL_RCC_ClockConfig+0x1c0>)
 8005a30:	5ccb      	ldrb	r3, [r1, r3]
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	4a09      	ldr	r2, [pc, #36]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a3a:	4b09      	ldr	r3, [pc, #36]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fa20 	bl	8004e84 <HAL_InitTick>

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40023c00 	.word	0x40023c00
 8005a54:	40023800 	.word	0x40023800
 8005a58:	08009f74 	.word	0x08009f74
 8005a5c:	20000058 	.word	0x20000058
 8005a60:	2000005c 	.word	0x2000005c

08005a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a68:	4b03      	ldr	r3, [pc, #12]	@ (8005a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000058 	.word	0x20000058

08005a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a80:	f7ff fff0 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b05      	ldr	r3, [pc, #20]	@ (8005a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	0a9b      	lsrs	r3, r3, #10
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4903      	ldr	r1, [pc, #12]	@ (8005aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	08009f84 	.word	0x08009f84

08005aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005aa8:	f7ff ffdc 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b05      	ldr	r3, [pc, #20]	@ (8005ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	0b5b      	lsrs	r3, r3, #13
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	4903      	ldr	r1, [pc, #12]	@ (8005ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aba:	5ccb      	ldrb	r3, [r1, r3]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	08009f84 	.word	0x08009f84

08005acc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	220f      	movs	r2, #15
 8005ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005adc:	4b12      	ldr	r3, [pc, #72]	@ (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0203 	and.w	r2, r3, #3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005af4:	4b0c      	ldr	r3, [pc, #48]	@ (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b00:	4b09      	ldr	r3, [pc, #36]	@ (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	08db      	lsrs	r3, r3, #3
 8005b06:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b0e:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <HAL_RCC_GetClockConfig+0x60>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	601a      	str	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	40023c00 	.word	0x40023c00

08005b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08c      	sub	sp, #48	@ 0x30
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d010      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005b68:	4b6f      	ldr	r3, [pc, #444]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b6e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	496c      	ldr	r1, [pc, #432]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005b86:	2301      	movs	r3, #1
 8005b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d010      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005b96:	4b64      	ldr	r3, [pc, #400]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b9c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba4:	4960      	ldr	r1, [pc, #384]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d017      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bc4:	4b58      	ldr	r3, [pc, #352]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	4955      	ldr	r1, [pc, #340]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005be2:	d101      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005be4:	2301      	movs	r3, #1
 8005be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d017      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c00:	4b49      	ldr	r3, [pc, #292]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c0e:	4946      	ldr	r1, [pc, #280]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005c20:	2301      	movs	r3, #1
 8005c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 808a 	beq.w	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	4b39      	ldr	r3, [pc, #228]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	4a38      	ldr	r2, [pc, #224]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c4e:	4b36      	ldr	r3, [pc, #216]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c5a:	4b34      	ldr	r3, [pc, #208]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a33      	ldr	r2, [pc, #204]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c66:	f7ff facf 	bl	8005208 <HAL_GetTick>
 8005c6a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c6e:	f7ff facb 	bl	8005208 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e278      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c80:	4b2a      	ldr	r3, [pc, #168]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c8c:	4b26      	ldr	r3, [pc, #152]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c94:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d02f      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca4:	6a3a      	ldr	r2, [r7, #32]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d028      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005caa:	4b1f      	ldr	r3, [pc, #124]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cba:	4b1d      	ldr	r3, [pc, #116]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cc0:	4a19      	ldr	r2, [pc, #100]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cc6:	4b18      	ldr	r3, [pc, #96]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d114      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cd2:	f7ff fa99 	bl	8005208 <HAL_GetTick>
 8005cd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd8:	e00a      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cda:	f7ff fa95 	bl	8005208 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e240      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0ee      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d08:	d114      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005d0a:	4b07      	ldr	r3, [pc, #28]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d1e:	4902      	ldr	r1, [pc, #8]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	608b      	str	r3, [r1, #8]
 8005d24:	e00c      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	40007000 	.word	0x40007000
 8005d30:	42470e40 	.word	0x42470e40
 8005d34:	4b4a      	ldr	r3, [pc, #296]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	4a49      	ldr	r2, [pc, #292]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005d3e:	6093      	str	r3, [r2, #8]
 8005d40:	4b47      	ldr	r3, [pc, #284]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d4c:	4944      	ldr	r1, [pc, #272]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0310 	and.w	r3, r3, #16
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005d64:	4b3f      	ldr	r3, [pc, #252]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005d66:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005d74:	4b3a      	ldr	r3, [pc, #232]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d82:	4937      	ldr	r1, [pc, #220]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d96:	4b32      	ldr	r3, [pc, #200]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d9c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da4:	492e      	ldr	r1, [pc, #184]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d011      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005db8:	4b29      	ldr	r3, [pc, #164]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dbe:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc6:	4926      	ldr	r1, [pc, #152]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dd6:	d101      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005de8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df6:	491a      	ldr	r1, [pc, #104]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d011      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005e0a:	4b15      	ldr	r3, [pc, #84]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e10:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e18:	4911      	ldr	r1, [pc, #68]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e28:	d101      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d005      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e3c:	f040 80ff 	bne.w	800603e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e40:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e46:	f7ff f9df 	bl	8005208 <HAL_GetTick>
 8005e4a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e4c:	e00e      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e4e:	f7ff f9db 	bl	8005208 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d907      	bls.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e188      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005e60:	40023800 	.word	0x40023800
 8005e64:	424711e0 	.word	0x424711e0
 8005e68:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e6c:	4b7e      	ldr	r3, [pc, #504]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1ea      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d028      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d124      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005ea0:	4b71      	ldr	r3, [pc, #452]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ea6:	0c1b      	lsrs	r3, r3, #16
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	3301      	adds	r3, #1
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb8:	0e1b      	lsrs	r3, r3, #24
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	019b      	lsls	r3, r3, #6
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	061b      	lsls	r3, r3, #24
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	071b      	lsls	r3, r3, #28
 8005ee2:	4961      	ldr	r1, [pc, #388]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005efe:	d00a      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d035      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f14:	d130      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005f16:	4b54      	ldr	r3, [pc, #336]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f1c:	0c1b      	lsrs	r3, r3, #16
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	3301      	adds	r3, #1
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f28:	4b4f      	ldr	r3, [pc, #316]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f2e:	0f1b      	lsrs	r3, r3, #28
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	019b      	lsls	r3, r3, #6
 8005f40:	431a      	orrs	r2, r3
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	3b01      	subs	r3, #1
 8005f48:	041b      	lsls	r3, r3, #16
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	061b      	lsls	r3, r3, #24
 8005f52:	431a      	orrs	r2, r3
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	071b      	lsls	r3, r3, #28
 8005f58:	4943      	ldr	r1, [pc, #268]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f60:	4b41      	ldr	r3, [pc, #260]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f66:	f023 021f 	bic.w	r2, r3, #31
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	493d      	ldr	r1, [pc, #244]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d029      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f8c:	d124      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005f8e:	4b36      	ldr	r3, [pc, #216]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f94:	0c1b      	lsrs	r3, r3, #16
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fa0:	4b31      	ldr	r3, [pc, #196]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa6:	0f1b      	lsrs	r3, r3, #28
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	019b      	lsls	r3, r3, #6
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	061b      	lsls	r3, r3, #24
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	071b      	lsls	r3, r3, #28
 8005fd0:	4925      	ldr	r1, [pc, #148]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d016      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	019b      	lsls	r3, r3, #6
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	085b      	lsrs	r3, r3, #1
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	041b      	lsls	r3, r3, #16
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	071b      	lsls	r3, r3, #28
 800600a:	4917      	ldr	r1, [pc, #92]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006012:	4b16      	ldr	r3, [pc, #88]	@ (800606c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006014:	2201      	movs	r2, #1
 8006016:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006018:	f7ff f8f6 	bl	8005208 <HAL_GetTick>
 800601c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800601e:	e008      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006020:	f7ff f8f2 	bl	8005208 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e09f      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006032:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0f0      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 8095 	bne.w	8006170 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006046:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800604c:	f7ff f8dc 	bl	8005208 <HAL_GetTick>
 8006050:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006052:	e00f      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006054:	f7ff f8d8 	bl	8005208 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d908      	bls.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e085      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006066:	bf00      	nop
 8006068:	40023800 	.word	0x40023800
 800606c:	42470068 	.word	0x42470068
 8006070:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006074:	4b41      	ldr	r3, [pc, #260]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800607c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006080:	d0e8      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02b      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d127      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80060aa:	4b34      	ldr	r3, [pc, #208]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b0:	0c1b      	lsrs	r3, r3, #16
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	3301      	adds	r3, #1
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	019b      	lsls	r3, r3, #6
 80060c6:	431a      	orrs	r2, r3
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	3b01      	subs	r3, #1
 80060ce:	041b      	lsls	r3, r3, #16
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d6:	061b      	lsls	r3, r3, #24
 80060d8:	4928      	ldr	r1, [pc, #160]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060e0:	4b26      	ldr	r3, [pc, #152]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80060e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060e6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ee:	3b01      	subs	r3, #1
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	4922      	ldr	r1, [pc, #136]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01d      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800610e:	d118      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006110:	4b1a      	ldr	r3, [pc, #104]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	0e1b      	lsrs	r3, r3, #24
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	019b      	lsls	r3, r3, #6
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	3b01      	subs	r3, #1
 8006132:	041b      	lsls	r3, r3, #16
 8006134:	431a      	orrs	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	061b      	lsls	r3, r3, #24
 800613a:	4910      	ldr	r1, [pc, #64]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006142:	4b0f      	ldr	r3, [pc, #60]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006144:	2201      	movs	r2, #1
 8006146:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006148:	f7ff f85e 	bl	8005208 <HAL_GetTick>
 800614c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800614e:	e008      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006150:	f7ff f85a 	bl	8005208 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e007      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006162:	4b06      	ldr	r3, [pc, #24]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800616a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800616e:	d1ef      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3730      	adds	r7, #48	@ 0x30
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800
 8006180:	42470070 	.word	0x42470070

08006184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006188:	b0ae      	sub	sp, #184	@ 0xb8
 800618a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061aa:	4bcb      	ldr	r3, [pc, #812]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b0c      	cmp	r3, #12
 80061b4:	f200 8206 	bhi.w	80065c4 <HAL_RCC_GetSysClockFreq+0x440>
 80061b8:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	080065c5 	.word	0x080065c5
 80061c8:	080065c5 	.word	0x080065c5
 80061cc:	080065c5 	.word	0x080065c5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	080065c5 	.word	0x080065c5
 80061d8:	080065c5 	.word	0x080065c5
 80061dc:	080065c5 	.word	0x080065c5
 80061e0:	08006205 	.word	0x08006205
 80061e4:	080065c5 	.word	0x080065c5
 80061e8:	080065c5 	.word	0x080065c5
 80061ec:	080065c5 	.word	0x080065c5
 80061f0:	080063f5 	.word	0x080063f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061f4:	4bb9      	ldr	r3, [pc, #740]	@ (80064dc <HAL_RCC_GetSysClockFreq+0x358>)
 80061f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80061fa:	e1e7      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061fc:	4bb8      	ldr	r3, [pc, #736]	@ (80064e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80061fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006202:	e1e3      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006204:	4bb4      	ldr	r3, [pc, #720]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800620c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006210:	4bb1      	ldr	r3, [pc, #708]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d071      	beq.n	8006300 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800621c:	4bae      	ldr	r3, [pc, #696]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	099b      	lsrs	r3, r3, #6
 8006222:	2200      	movs	r2, #0
 8006224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006228:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800622c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006234:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006238:	2300      	movs	r3, #0
 800623a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800623e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006242:	4622      	mov	r2, r4
 8006244:	462b      	mov	r3, r5
 8006246:	f04f 0000 	mov.w	r0, #0
 800624a:	f04f 0100 	mov.w	r1, #0
 800624e:	0159      	lsls	r1, r3, #5
 8006250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006254:	0150      	lsls	r0, r2, #5
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4621      	mov	r1, r4
 800625c:	1a51      	subs	r1, r2, r1
 800625e:	6439      	str	r1, [r7, #64]	@ 0x40
 8006260:	4629      	mov	r1, r5
 8006262:	eb63 0301 	sbc.w	r3, r3, r1
 8006266:	647b      	str	r3, [r7, #68]	@ 0x44
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006274:	4649      	mov	r1, r9
 8006276:	018b      	lsls	r3, r1, #6
 8006278:	4641      	mov	r1, r8
 800627a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800627e:	4641      	mov	r1, r8
 8006280:	018a      	lsls	r2, r1, #6
 8006282:	4641      	mov	r1, r8
 8006284:	1a51      	subs	r1, r2, r1
 8006286:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006288:	4649      	mov	r1, r9
 800628a:	eb63 0301 	sbc.w	r3, r3, r1
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800629c:	4649      	mov	r1, r9
 800629e:	00cb      	lsls	r3, r1, #3
 80062a0:	4641      	mov	r1, r8
 80062a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a6:	4641      	mov	r1, r8
 80062a8:	00ca      	lsls	r2, r1, #3
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	4622      	mov	r2, r4
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b6:	462b      	mov	r3, r5
 80062b8:	460a      	mov	r2, r1
 80062ba:	eb42 0303 	adc.w	r3, r2, r3
 80062be:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062cc:	4629      	mov	r1, r5
 80062ce:	024b      	lsls	r3, r1, #9
 80062d0:	4621      	mov	r1, r4
 80062d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062d6:	4621      	mov	r1, r4
 80062d8:	024a      	lsls	r2, r1, #9
 80062da:	4610      	mov	r0, r2
 80062dc:	4619      	mov	r1, r3
 80062de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80062f0:	f7f9 fff6 	bl	80002e0 <__aeabi_uldivmod>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4613      	mov	r3, r2
 80062fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062fe:	e067      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006300:	4b75      	ldr	r3, [pc, #468]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	099b      	lsrs	r3, r3, #6
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800630c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006310:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006318:	67bb      	str	r3, [r7, #120]	@ 0x78
 800631a:	2300      	movs	r3, #0
 800631c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800631e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006322:	4622      	mov	r2, r4
 8006324:	462b      	mov	r3, r5
 8006326:	f04f 0000 	mov.w	r0, #0
 800632a:	f04f 0100 	mov.w	r1, #0
 800632e:	0159      	lsls	r1, r3, #5
 8006330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006334:	0150      	lsls	r0, r2, #5
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4621      	mov	r1, r4
 800633c:	1a51      	subs	r1, r2, r1
 800633e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006340:	4629      	mov	r1, r5
 8006342:	eb63 0301 	sbc.w	r3, r3, r1
 8006346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006354:	4649      	mov	r1, r9
 8006356:	018b      	lsls	r3, r1, #6
 8006358:	4641      	mov	r1, r8
 800635a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800635e:	4641      	mov	r1, r8
 8006360:	018a      	lsls	r2, r1, #6
 8006362:	4641      	mov	r1, r8
 8006364:	ebb2 0a01 	subs.w	sl, r2, r1
 8006368:	4649      	mov	r1, r9
 800636a:	eb63 0b01 	sbc.w	fp, r3, r1
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800637a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800637e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006382:	4692      	mov	sl, r2
 8006384:	469b      	mov	fp, r3
 8006386:	4623      	mov	r3, r4
 8006388:	eb1a 0303 	adds.w	r3, sl, r3
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	462b      	mov	r3, r5
 8006390:	eb4b 0303 	adc.w	r3, fp, r3
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80063a2:	4629      	mov	r1, r5
 80063a4:	028b      	lsls	r3, r1, #10
 80063a6:	4621      	mov	r1, r4
 80063a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063ac:	4621      	mov	r1, r4
 80063ae:	028a      	lsls	r2, r1, #10
 80063b0:	4610      	mov	r0, r2
 80063b2:	4619      	mov	r1, r3
 80063b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063b8:	2200      	movs	r2, #0
 80063ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80063bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80063be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80063c2:	f7f9 ff8d 	bl	80002e0 <__aeabi_uldivmod>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4613      	mov	r3, r2
 80063cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063d0:	4b41      	ldr	r3, [pc, #260]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80063e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80063f2:	e0eb      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063f4:	4b38      	ldr	r3, [pc, #224]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006400:	4b35      	ldr	r3, [pc, #212]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d06b      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800640c:	4b32      	ldr	r3, [pc, #200]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	099b      	lsrs	r3, r3, #6
 8006412:	2200      	movs	r2, #0
 8006414:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006416:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006420:	2300      	movs	r3, #0
 8006422:	667b      	str	r3, [r7, #100]	@ 0x64
 8006424:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006428:	4622      	mov	r2, r4
 800642a:	462b      	mov	r3, r5
 800642c:	f04f 0000 	mov.w	r0, #0
 8006430:	f04f 0100 	mov.w	r1, #0
 8006434:	0159      	lsls	r1, r3, #5
 8006436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800643a:	0150      	lsls	r0, r2, #5
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4621      	mov	r1, r4
 8006442:	1a51      	subs	r1, r2, r1
 8006444:	61b9      	str	r1, [r7, #24]
 8006446:	4629      	mov	r1, r5
 8006448:	eb63 0301 	sbc.w	r3, r3, r1
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800645a:	4659      	mov	r1, fp
 800645c:	018b      	lsls	r3, r1, #6
 800645e:	4651      	mov	r1, sl
 8006460:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006464:	4651      	mov	r1, sl
 8006466:	018a      	lsls	r2, r1, #6
 8006468:	4651      	mov	r1, sl
 800646a:	ebb2 0801 	subs.w	r8, r2, r1
 800646e:	4659      	mov	r1, fp
 8006470:	eb63 0901 	sbc.w	r9, r3, r1
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006480:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006484:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006488:	4690      	mov	r8, r2
 800648a:	4699      	mov	r9, r3
 800648c:	4623      	mov	r3, r4
 800648e:	eb18 0303 	adds.w	r3, r8, r3
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	462b      	mov	r3, r5
 8006496:	eb49 0303 	adc.w	r3, r9, r3
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80064a8:	4629      	mov	r1, r5
 80064aa:	024b      	lsls	r3, r1, #9
 80064ac:	4621      	mov	r1, r4
 80064ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064b2:	4621      	mov	r1, r4
 80064b4:	024a      	lsls	r2, r1, #9
 80064b6:	4610      	mov	r0, r2
 80064b8:	4619      	mov	r1, r3
 80064ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064be:	2200      	movs	r2, #0
 80064c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80064c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064c8:	f7f9 ff0a 	bl	80002e0 <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4613      	mov	r3, r2
 80064d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064d6:	e065      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x420>
 80064d8:	40023800 	.word	0x40023800
 80064dc:	00f42400 	.word	0x00f42400
 80064e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e4:	4b3d      	ldr	r3, [pc, #244]	@ (80065dc <HAL_RCC_GetSysClockFreq+0x458>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	099b      	lsrs	r3, r3, #6
 80064ea:	2200      	movs	r2, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	4611      	mov	r1, r2
 80064f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80064f6:	2300      	movs	r3, #0
 80064f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80064fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80064fe:	4642      	mov	r2, r8
 8006500:	464b      	mov	r3, r9
 8006502:	f04f 0000 	mov.w	r0, #0
 8006506:	f04f 0100 	mov.w	r1, #0
 800650a:	0159      	lsls	r1, r3, #5
 800650c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006510:	0150      	lsls	r0, r2, #5
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4641      	mov	r1, r8
 8006518:	1a51      	subs	r1, r2, r1
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	4649      	mov	r1, r9
 800651e:	eb63 0301 	sbc.w	r3, r3, r1
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006530:	4659      	mov	r1, fp
 8006532:	018b      	lsls	r3, r1, #6
 8006534:	4651      	mov	r1, sl
 8006536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800653a:	4651      	mov	r1, sl
 800653c:	018a      	lsls	r2, r1, #6
 800653e:	4651      	mov	r1, sl
 8006540:	1a54      	subs	r4, r2, r1
 8006542:	4659      	mov	r1, fp
 8006544:	eb63 0501 	sbc.w	r5, r3, r1
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	00eb      	lsls	r3, r5, #3
 8006552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006556:	00e2      	lsls	r2, r4, #3
 8006558:	4614      	mov	r4, r2
 800655a:	461d      	mov	r5, r3
 800655c:	4643      	mov	r3, r8
 800655e:	18e3      	adds	r3, r4, r3
 8006560:	603b      	str	r3, [r7, #0]
 8006562:	464b      	mov	r3, r9
 8006564:	eb45 0303 	adc.w	r3, r5, r3
 8006568:	607b      	str	r3, [r7, #4]
 800656a:	f04f 0200 	mov.w	r2, #0
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006576:	4629      	mov	r1, r5
 8006578:	028b      	lsls	r3, r1, #10
 800657a:	4621      	mov	r1, r4
 800657c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006580:	4621      	mov	r1, r4
 8006582:	028a      	lsls	r2, r1, #10
 8006584:	4610      	mov	r0, r2
 8006586:	4619      	mov	r1, r3
 8006588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800658c:	2200      	movs	r2, #0
 800658e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006590:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006592:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006596:	f7f9 fea3 	bl	80002e0 <__aeabi_uldivmod>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4613      	mov	r3, r2
 80065a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80065a4:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <HAL_RCC_GetSysClockFreq+0x458>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	0f1b      	lsrs	r3, r3, #28
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80065b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80065ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80065be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80065c2:	e003      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065c4:	4b06      	ldr	r3, [pc, #24]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80065c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80065ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	37b8      	adds	r7, #184	@ 0xb8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065da:	bf00      	nop
 80065dc:	40023800 	.word	0x40023800
 80065e0:	00f42400 	.word	0x00f42400

080065e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e28d      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 8083 	beq.w	800670a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006604:	4b94      	ldr	r3, [pc, #592]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 030c 	and.w	r3, r3, #12
 800660c:	2b04      	cmp	r3, #4
 800660e:	d019      	beq.n	8006644 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006610:	4b91      	ldr	r3, [pc, #580]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006618:	2b08      	cmp	r3, #8
 800661a:	d106      	bne.n	800662a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800661c:	4b8e      	ldr	r3, [pc, #568]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006628:	d00c      	beq.n	8006644 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800662a:	4b8b      	ldr	r3, [pc, #556]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006632:	2b0c      	cmp	r3, #12
 8006634:	d112      	bne.n	800665c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006636:	4b88      	ldr	r3, [pc, #544]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800663e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006642:	d10b      	bne.n	800665c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006644:	4b84      	ldr	r3, [pc, #528]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05b      	beq.n	8006708 <HAL_RCC_OscConfig+0x124>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d157      	bne.n	8006708 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e25a      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006664:	d106      	bne.n	8006674 <HAL_RCC_OscConfig+0x90>
 8006666:	4b7c      	ldr	r3, [pc, #496]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a7b      	ldr	r2, [pc, #492]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800666c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	e01d      	b.n	80066b0 <HAL_RCC_OscConfig+0xcc>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800667c:	d10c      	bne.n	8006698 <HAL_RCC_OscConfig+0xb4>
 800667e:	4b76      	ldr	r3, [pc, #472]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a75      	ldr	r2, [pc, #468]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	4b73      	ldr	r3, [pc, #460]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a72      	ldr	r2, [pc, #456]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e00b      	b.n	80066b0 <HAL_RCC_OscConfig+0xcc>
 8006698:	4b6f      	ldr	r3, [pc, #444]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a6e      	ldr	r2, [pc, #440]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800669e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	4b6c      	ldr	r3, [pc, #432]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a6b      	ldr	r2, [pc, #428]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 80066aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d013      	beq.n	80066e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fe fda6 	bl	8005208 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066c0:	f7fe fda2 	bl	8005208 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	@ 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e21f      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d2:	4b61      	ldr	r3, [pc, #388]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0xdc>
 80066de:	e014      	b.n	800670a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fe fd92 	bl	8005208 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066e8:	f7fe fd8e 	bl	8005208 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b64      	cmp	r3, #100	@ 0x64
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e20b      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066fa:	4b57      	ldr	r3, [pc, #348]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x104>
 8006706:	e000      	b.n	800670a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d06f      	beq.n	80067f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006716:	4b50      	ldr	r3, [pc, #320]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 030c 	and.w	r3, r3, #12
 800671e:	2b00      	cmp	r3, #0
 8006720:	d017      	beq.n	8006752 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006722:	4b4d      	ldr	r3, [pc, #308]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800672a:	2b08      	cmp	r3, #8
 800672c:	d105      	bne.n	800673a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800672e:	4b4a      	ldr	r3, [pc, #296]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800673a:	4b47      	ldr	r3, [pc, #284]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006742:	2b0c      	cmp	r3, #12
 8006744:	d11c      	bne.n	8006780 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006746:	4b44      	ldr	r3, [pc, #272]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d116      	bne.n	8006780 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006752:	4b41      	ldr	r3, [pc, #260]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_RCC_OscConfig+0x186>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d001      	beq.n	800676a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e1d3      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800676a:	4b3b      	ldr	r3, [pc, #236]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	4937      	ldr	r1, [pc, #220]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800677a:	4313      	orrs	r3, r2
 800677c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800677e:	e03a      	b.n	80067f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d020      	beq.n	80067ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006788:	4b34      	ldr	r3, [pc, #208]	@ (800685c <HAL_RCC_OscConfig+0x278>)
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678e:	f7fe fd3b 	bl	8005208 <HAL_GetTick>
 8006792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006796:	f7fe fd37 	bl	8005208 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e1b4      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b4:	4b28      	ldr	r3, [pc, #160]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	4925      	ldr	r1, [pc, #148]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	600b      	str	r3, [r1, #0]
 80067c8:	e015      	b.n	80067f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ca:	4b24      	ldr	r3, [pc, #144]	@ (800685c <HAL_RCC_OscConfig+0x278>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7fe fd1a 	bl	8005208 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067d8:	f7fe fd16 	bl	8005208 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e193      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f0      	bne.n	80067d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d036      	beq.n	8006870 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800680a:	4b15      	ldr	r3, [pc, #84]	@ (8006860 <HAL_RCC_OscConfig+0x27c>)
 800680c:	2201      	movs	r2, #1
 800680e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006810:	f7fe fcfa 	bl	8005208 <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006818:	f7fe fcf6 	bl	8005208 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e173      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800682a:	4b0b      	ldr	r3, [pc, #44]	@ (8006858 <HAL_RCC_OscConfig+0x274>)
 800682c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0f0      	beq.n	8006818 <HAL_RCC_OscConfig+0x234>
 8006836:	e01b      	b.n	8006870 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006838:	4b09      	ldr	r3, [pc, #36]	@ (8006860 <HAL_RCC_OscConfig+0x27c>)
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683e:	f7fe fce3 	bl	8005208 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006844:	e00e      	b.n	8006864 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006846:	f7fe fcdf 	bl	8005208 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d907      	bls.n	8006864 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e15c      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
 8006858:	40023800 	.word	0x40023800
 800685c:	42470000 	.word	0x42470000
 8006860:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006864:	4b8a      	ldr	r3, [pc, #552]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1ea      	bne.n	8006846 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 8097 	beq.w	80069ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800687e:	2300      	movs	r3, #0
 8006880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006882:	4b83      	ldr	r3, [pc, #524]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10f      	bne.n	80068ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	60bb      	str	r3, [r7, #8]
 8006892:	4b7f      	ldr	r3, [pc, #508]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	4a7e      	ldr	r2, [pc, #504]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800689c:	6413      	str	r3, [r2, #64]	@ 0x40
 800689e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ae:	4b79      	ldr	r3, [pc, #484]	@ (8006a94 <HAL_RCC_OscConfig+0x4b0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d118      	bne.n	80068ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ba:	4b76      	ldr	r3, [pc, #472]	@ (8006a94 <HAL_RCC_OscConfig+0x4b0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a75      	ldr	r2, [pc, #468]	@ (8006a94 <HAL_RCC_OscConfig+0x4b0>)
 80068c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068c6:	f7fe fc9f 	bl	8005208 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ce:	f7fe fc9b 	bl	8005208 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e118      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006a94 <HAL_RCC_OscConfig+0x4b0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d106      	bne.n	8006902 <HAL_RCC_OscConfig+0x31e>
 80068f4:	4b66      	ldr	r3, [pc, #408]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 80068f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f8:	4a65      	ldr	r2, [pc, #404]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006900:	e01c      	b.n	800693c <HAL_RCC_OscConfig+0x358>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b05      	cmp	r3, #5
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x340>
 800690a:	4b61      	ldr	r3, [pc, #388]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690e:	4a60      	ldr	r2, [pc, #384]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006910:	f043 0304 	orr.w	r3, r3, #4
 8006914:	6713      	str	r3, [r2, #112]	@ 0x70
 8006916:	4b5e      	ldr	r3, [pc, #376]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691a:	4a5d      	ldr	r2, [pc, #372]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 800691c:	f043 0301 	orr.w	r3, r3, #1
 8006920:	6713      	str	r3, [r2, #112]	@ 0x70
 8006922:	e00b      	b.n	800693c <HAL_RCC_OscConfig+0x358>
 8006924:	4b5a      	ldr	r3, [pc, #360]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006928:	4a59      	ldr	r2, [pc, #356]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006930:	4b57      	ldr	r3, [pc, #348]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006934:	4a56      	ldr	r2, [pc, #344]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006936:	f023 0304 	bic.w	r3, r3, #4
 800693a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d015      	beq.n	8006970 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fe fc60 	bl	8005208 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800694a:	e00a      	b.n	8006962 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fe fc5c 	bl	8005208 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e0d7      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006962:	4b4b      	ldr	r3, [pc, #300]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0ee      	beq.n	800694c <HAL_RCC_OscConfig+0x368>
 800696e:	e014      	b.n	800699a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006970:	f7fe fc4a 	bl	8005208 <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006976:	e00a      	b.n	800698e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006978:	f7fe fc46 	bl	8005208 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e0c1      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800698e:	4b40      	ldr	r3, [pc, #256]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1ee      	bne.n	8006978 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d105      	bne.n	80069ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 80069a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a4:	4a3a      	ldr	r2, [pc, #232]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 80069a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80ad 	beq.w	8006b10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069b6:	4b36      	ldr	r3, [pc, #216]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 030c 	and.w	r3, r3, #12
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d060      	beq.n	8006a84 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d145      	bne.n	8006a56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ca:	4b33      	ldr	r3, [pc, #204]	@ (8006a98 <HAL_RCC_OscConfig+0x4b4>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d0:	f7fe fc1a 	bl	8005208 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d8:	f7fe fc16 	bl	8005208 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e093      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ea:	4b29      	ldr	r3, [pc, #164]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69da      	ldr	r2, [r3, #28]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	019b      	lsls	r3, r3, #6
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	041b      	lsls	r3, r3, #16
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	061b      	lsls	r3, r3, #24
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a20:	071b      	lsls	r3, r3, #28
 8006a22:	491b      	ldr	r1, [pc, #108]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a28:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <HAL_RCC_OscConfig+0x4b4>)
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2e:	f7fe fbeb 	bl	8005208 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a36:	f7fe fbe7 	bl	8005208 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e064      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a48:	4b11      	ldr	r3, [pc, #68]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0f0      	beq.n	8006a36 <HAL_RCC_OscConfig+0x452>
 8006a54:	e05c      	b.n	8006b10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a56:	4b10      	ldr	r3, [pc, #64]	@ (8006a98 <HAL_RCC_OscConfig+0x4b4>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5c:	f7fe fbd4 	bl	8005208 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a64:	f7fe fbd0 	bl	8005208 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e04d      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a76:	4b06      	ldr	r3, [pc, #24]	@ (8006a90 <HAL_RCC_OscConfig+0x4ac>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1f0      	bne.n	8006a64 <HAL_RCC_OscConfig+0x480>
 8006a82:	e045      	b.n	8006b10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d107      	bne.n	8006a9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e040      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
 8006a90:	40023800 	.word	0x40023800
 8006a94:	40007000 	.word	0x40007000
 8006a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8006b1c <HAL_RCC_OscConfig+0x538>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d030      	beq.n	8006b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d129      	bne.n	8006b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d122      	bne.n	8006b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006acc:	4013      	ands	r3, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d119      	bne.n	8006b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae2:	085b      	lsrs	r3, r3, #1
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d10f      	bne.n	8006b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d107      	bne.n	8006b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d001      	beq.n	8006b10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40023800 	.word	0x40023800

08006b20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e073      	b.n	8006c1e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7f5b      	ldrb	r3, [r3, #29]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d105      	bne.n	8006b4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fe f922 	bl	8004d90 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d055      	beq.n	8006c0c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	22ca      	movs	r2, #202	@ 0xca
 8006b66:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2253      	movs	r2, #83	@ 0x53
 8006b6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fa49 	bl	8007008 <RTC_EnterInitMode>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d12c      	bne.n	8006bda <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b92:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6899      	ldr	r1, [r3, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	68d2      	ldr	r2, [r2, #12]
 8006bba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6919      	ldr	r1, [r3, #16]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	041a      	lsls	r2, r3, #16
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fa50 	bl	8007076 <RTC_ExitInitMode>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d110      	bne.n	8006c02 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006bee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	22ff      	movs	r2, #255	@ 0xff
 8006c08:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c0a:	e001      	b.n	8006c10 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d102      	bne.n	8006c1c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c26:	b590      	push	{r4, r7, lr}
 8006c28:	b087      	sub	sp, #28
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	7f1b      	ldrb	r3, [r3, #28]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_RTC_SetTime+0x1c>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e087      	b.n	8006d52 <HAL_RTC_SetTime+0x12c>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d126      	bne.n	8006ca2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2200      	movs	r2, #0
 8006c66:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fa27 	bl	80070c0 <RTC_ByteToBcd2>
 8006c72:	4603      	mov	r3, r0
 8006c74:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	785b      	ldrb	r3, [r3, #1]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fa20 	bl	80070c0 <RTC_ByteToBcd2>
 8006c80:	4603      	mov	r3, r0
 8006c82:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c84:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	789b      	ldrb	r3, [r3, #2]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fa18 	bl	80070c0 <RTC_ByteToBcd2>
 8006c90:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c92:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	78db      	ldrb	r3, [r3, #3]
 8006c9a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e018      	b.n	8006cd4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006cc2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006cc8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	78db      	ldrb	r3, [r3, #3]
 8006cce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	22ca      	movs	r2, #202	@ 0xca
 8006cda:	625a      	str	r2, [r3, #36]	@ 0x24
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2253      	movs	r2, #83	@ 0x53
 8006ce2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f98f 	bl	8007008 <RTC_EnterInitMode>
 8006cea:	4603      	mov	r3, r0
 8006cec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006cee:	7cfb      	ldrb	r3, [r7, #19]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d120      	bne.n	8006d36 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006cfe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006d02:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d12:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6899      	ldr	r1, [r3, #8]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f9a2 	bl	8007076 <RTC_ExitInitMode>
 8006d32:	4603      	mov	r3, r0
 8006d34:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006d36:	7cfb      	ldrb	r3, [r7, #19]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d102      	bne.n	8006d42 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	22ff      	movs	r2, #255	@ 0xff
 8006d48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]

  return status;
 8006d50:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd90      	pop	{r4, r7, pc}

08006d5a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006d8c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006d90:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	0a1b      	lsrs	r3, r3, #8
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	0d9b      	lsrs	r3, r3, #22
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d11a      	bne.n	8006e0c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f98e 	bl	80070fc <RTC_Bcd2ToByte>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 f985 	bl	80070fc <RTC_Bcd2ToByte>
 8006df2:	4603      	mov	r3, r0
 8006df4:	461a      	mov	r2, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	789b      	ldrb	r3, [r3, #2]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 f97c 	bl	80070fc <RTC_Bcd2ToByte>
 8006e04:	4603      	mov	r3, r0
 8006e06:	461a      	mov	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e16:	b590      	push	{r4, r7, lr}
 8006e18:	b087      	sub	sp, #28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	7f1b      	ldrb	r3, [r3, #28]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_RTC_SetDate+0x1c>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e071      	b.n	8006f16 <HAL_RTC_SetDate+0x100>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10e      	bne.n	8006e62 <HAL_RTC_SetDate+0x4c>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	f023 0310 	bic.w	r3, r3, #16
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	330a      	adds	r3, #10
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d11c      	bne.n	8006ea2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	78db      	ldrb	r3, [r3, #3]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 f927 	bl	80070c0 <RTC_ByteToBcd2>
 8006e72:	4603      	mov	r3, r0
 8006e74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f920 	bl	80070c0 <RTC_ByteToBcd2>
 8006e80:	4603      	mov	r3, r0
 8006e82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	789b      	ldrb	r3, [r3, #2]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f918 	bl	80070c0 <RTC_ByteToBcd2>
 8006e90:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e92:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	e00e      	b.n	8006ec0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	78db      	ldrb	r3, [r3, #3]
 8006ea6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	785b      	ldrb	r3, [r3, #1]
 8006eac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006eae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006eb4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	22ca      	movs	r2, #202	@ 0xca
 8006ec6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2253      	movs	r2, #83	@ 0x53
 8006ece:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f899 	bl	8007008 <RTC_EnterInitMode>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006eda:	7cfb      	ldrb	r3, [r7, #19]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10c      	bne.n	8006efa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006eea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006eee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f8c0 	bl	8007076 <RTC_ExitInitMode>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006efa:	7cfb      	ldrb	r3, [r7, #19]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	22ff      	movs	r2, #255	@ 0xff
 8006f0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	771a      	strb	r2, [r3, #28]

  return status;
 8006f14:	7cfb      	ldrb	r3, [r7, #19]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd90      	pop	{r4, r7, pc}

08006f1e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	0c1b      	lsrs	r3, r3, #16
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	0a1b      	lsrs	r3, r3, #8
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	0b5b      	lsrs	r3, r3, #13
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d11a      	bne.n	8006fb2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	78db      	ldrb	r3, [r3, #3]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f8bb 	bl	80070fc <RTC_Bcd2ToByte>
 8006f86:	4603      	mov	r3, r0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f8b2 	bl	80070fc <RTC_Bcd2ToByte>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	789b      	ldrb	r3, [r3, #2]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 f8a9 	bl	80070fc <RTC_Bcd2ToByte>
 8006faa:	4603      	mov	r3, r0
 8006fac:	461a      	mov	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8007004 <HAL_RTC_WaitForSynchro+0x48>)
 8006fce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fd0:	f7fe f91a 	bl	8005208 <HAL_GetTick>
 8006fd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fd6:	e009      	b.n	8006fec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fd8:	f7fe f916 	bl	8005208 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fe6:	d901      	bls.n	8006fec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e007      	b.n	8006ffc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0ee      	beq.n	8006fd8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	00017f5f 	.word	0x00017f5f

08007008 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d122      	bne.n	800706c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007034:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007036:	f7fe f8e7 	bl	8005208 <HAL_GetTick>
 800703a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800703c:	e00c      	b.n	8007058 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800703e:	f7fe f8e3 	bl	8005208 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800704c:	d904      	bls.n	8007058 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2204      	movs	r2, #4
 8007052:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <RTC_EnterInitMode+0x64>
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d1e8      	bne.n	800703e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007090:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff ff8b 	bl	8006fbc <HAL_RTC_WaitForSynchro>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2204      	movs	r2, #4
 80070b0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80070ce:	e005      	b.n	80070dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80070d6:	79fb      	ldrb	r3, [r7, #7]
 80070d8:	3b0a      	subs	r3, #10
 80070da:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	2b09      	cmp	r3, #9
 80070e0:	d8f6      	bhi.n	80070d0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	b2db      	uxtb	r3, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	091b      	lsrs	r3, r3, #4
 800710e:	b2db      	uxtb	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	b2db      	uxtb	r3, r3
 8007128:	4413      	add	r3, r2
 800712a:	b2db      	uxtb	r3, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e041      	b.n	80071ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f839 	bl	80071d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	4619      	mov	r1, r3
 8007176:	4610      	mov	r0, r2
 8007178:	f000 f9c0 	bl	80074fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
	...

080071ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d001      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e04e      	b.n	80072a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a23      	ldr	r2, [pc, #140]	@ (80072b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d022      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x80>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722e:	d01d      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x80>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1f      	ldr	r2, [pc, #124]	@ (80072b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d018      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x80>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1e      	ldr	r2, [pc, #120]	@ (80072b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d013      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x80>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1c      	ldr	r2, [pc, #112]	@ (80072bc <HAL_TIM_Base_Start_IT+0xd0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00e      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x80>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1b      	ldr	r2, [pc, #108]	@ (80072c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d009      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x80>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a19      	ldr	r2, [pc, #100]	@ (80072c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_TIM_Base_Start_IT+0x80>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a18      	ldr	r2, [pc, #96]	@ (80072c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d111      	bne.n	8007290 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b06      	cmp	r3, #6
 800727c:	d010      	beq.n	80072a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728e:	e007      	b.n	80072a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40010000 	.word	0x40010000
 80072b4:	40000400 	.word	0x40000400
 80072b8:	40000800 	.word	0x40000800
 80072bc:	40000c00 	.word	0x40000c00
 80072c0:	40010400 	.word	0x40010400
 80072c4:	40014000 	.word	0x40014000
 80072c8:	40001800 	.word	0x40001800

080072cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d020      	beq.n	8007330 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01b      	beq.n	8007330 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0202 	mvn.w	r2, #2
 8007300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8d2 	bl	80074c0 <HAL_TIM_IC_CaptureCallback>
 800731c:	e005      	b.n	800732a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f8c4 	bl	80074ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f8d5 	bl	80074d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d020      	beq.n	800737c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01b      	beq.n	800737c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0204 	mvn.w	r2, #4
 800734c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f8ac 	bl	80074c0 <HAL_TIM_IC_CaptureCallback>
 8007368:	e005      	b.n	8007376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f89e 	bl	80074ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f8af 	bl	80074d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	2b00      	cmp	r3, #0
 8007384:	d020      	beq.n	80073c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01b      	beq.n	80073c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0208 	mvn.w	r2, #8
 8007398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2204      	movs	r2, #4
 800739e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f886 	bl	80074c0 <HAL_TIM_IC_CaptureCallback>
 80073b4:	e005      	b.n	80073c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f878 	bl	80074ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f889 	bl	80074d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f003 0310 	and.w	r3, r3, #16
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d020      	beq.n	8007414 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01b      	beq.n	8007414 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0210 	mvn.w	r2, #16
 80073e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2208      	movs	r2, #8
 80073ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f860 	bl	80074c0 <HAL_TIM_IC_CaptureCallback>
 8007400:	e005      	b.n	800740e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f852 	bl	80074ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f863 	bl	80074d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00c      	beq.n	8007438 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d007      	beq.n	8007438 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0201 	mvn.w	r2, #1
 8007430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fd fc6c 	bl	8004d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00c      	beq.n	800745c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f906 	bl	8007668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00c      	beq.n	8007480 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d007      	beq.n	8007480 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f834 	bl	80074e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00c      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 0320 	and.w	r3, r3, #32
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0220 	mvn.w	r2, #32
 800749c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8d8 	bl	8007654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a46      	ldr	r2, [pc, #280]	@ (8007628 <TIM_Base_SetConfig+0x12c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d013      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800751a:	d00f      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a43      	ldr	r2, [pc, #268]	@ (800762c <TIM_Base_SetConfig+0x130>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00b      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a42      	ldr	r2, [pc, #264]	@ (8007630 <TIM_Base_SetConfig+0x134>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d007      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a41      	ldr	r2, [pc, #260]	@ (8007634 <TIM_Base_SetConfig+0x138>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a40      	ldr	r2, [pc, #256]	@ (8007638 <TIM_Base_SetConfig+0x13c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d108      	bne.n	800754e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a35      	ldr	r2, [pc, #212]	@ (8007628 <TIM_Base_SetConfig+0x12c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d02b      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800755c:	d027      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a32      	ldr	r2, [pc, #200]	@ (800762c <TIM_Base_SetConfig+0x130>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d023      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a31      	ldr	r2, [pc, #196]	@ (8007630 <TIM_Base_SetConfig+0x134>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d01f      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a30      	ldr	r2, [pc, #192]	@ (8007634 <TIM_Base_SetConfig+0x138>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d01b      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a2f      	ldr	r2, [pc, #188]	@ (8007638 <TIM_Base_SetConfig+0x13c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d017      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a2e      	ldr	r2, [pc, #184]	@ (800763c <TIM_Base_SetConfig+0x140>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d013      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a2d      	ldr	r2, [pc, #180]	@ (8007640 <TIM_Base_SetConfig+0x144>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00f      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a2c      	ldr	r2, [pc, #176]	@ (8007644 <TIM_Base_SetConfig+0x148>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00b      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2b      	ldr	r2, [pc, #172]	@ (8007648 <TIM_Base_SetConfig+0x14c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d007      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a2a      	ldr	r2, [pc, #168]	@ (800764c <TIM_Base_SetConfig+0x150>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d003      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a29      	ldr	r2, [pc, #164]	@ (8007650 <TIM_Base_SetConfig+0x154>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d108      	bne.n	80075c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a10      	ldr	r2, [pc, #64]	@ (8007628 <TIM_Base_SetConfig+0x12c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d003      	beq.n	80075f4 <TIM_Base_SetConfig+0xf8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a12      	ldr	r2, [pc, #72]	@ (8007638 <TIM_Base_SetConfig+0x13c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d103      	bne.n	80075fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b01      	cmp	r3, #1
 800760c:	d105      	bne.n	800761a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f023 0201 	bic.w	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	611a      	str	r2, [r3, #16]
  }
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	40010000 	.word	0x40010000
 800762c:	40000400 	.word	0x40000400
 8007630:	40000800 	.word	0x40000800
 8007634:	40000c00 	.word	0x40000c00
 8007638:	40010400 	.word	0x40010400
 800763c:	40014000 	.word	0x40014000
 8007640:	40014400 	.word	0x40014400
 8007644:	40014800 	.word	0x40014800
 8007648:	40001800 	.word	0x40001800
 800764c:	40001c00 	.word	0x40001c00
 8007650:	40002000 	.word	0x40002000

08007654 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e042      	b.n	8007714 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fd fb9e 	bl	8004de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2224      	movs	r2, #36	@ 0x24
 80076ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fdbd 	bl	8008240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	695a      	ldr	r2, [r3, #20]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2220      	movs	r2, #32
 8007700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08a      	sub	sp, #40	@ 0x28
 8007720:	af02      	add	r7, sp, #8
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	4613      	mov	r3, r2
 800772a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b20      	cmp	r3, #32
 800773a:	d175      	bne.n	8007828 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_UART_Transmit+0x2c>
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e06e      	b.n	800782a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2221      	movs	r2, #33	@ 0x21
 8007756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800775a:	f7fd fd55 	bl	8005208 <HAL_GetTick>
 800775e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	88fa      	ldrh	r2, [r7, #6]
 800776a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007774:	d108      	bne.n	8007788 <HAL_UART_Transmit+0x6c>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d104      	bne.n	8007788 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	e003      	b.n	8007790 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800778c:	2300      	movs	r3, #0
 800778e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007790:	e02e      	b.n	80077f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2200      	movs	r2, #0
 800779a:	2180      	movs	r1, #128	@ 0x80
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 fb1f 	bl	8007de0 <UART_WaitOnFlagUntilTimeout>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e03a      	b.n	800782a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	3302      	adds	r3, #2
 80077ce:	61bb      	str	r3, [r7, #24]
 80077d0:	e007      	b.n	80077e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	781a      	ldrb	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	3301      	adds	r3, #1
 80077e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1cb      	bne.n	8007792 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2200      	movs	r2, #0
 8007802:	2140      	movs	r1, #64	@ 0x40
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 faeb 	bl	8007de0 <UART_WaitOnFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e006      	b.n	800782a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	e000      	b.n	800782a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007828:	2302      	movs	r3, #2
  }
}
 800782a:	4618      	mov	r0, r3
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	4613      	mov	r3, r2
 800783e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b20      	cmp	r3, #32
 800784a:	d112      	bne.n	8007872 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <HAL_UART_Receive_IT+0x26>
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e00b      	b.n	8007874 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	461a      	mov	r2, r3
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fb12 	bl	8007e92 <UART_Start_Receive_IT>
 800786e:	4603      	mov	r3, r0
 8007870:	e000      	b.n	8007874 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007872:	2302      	movs	r3, #2
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b0ba      	sub	sp, #232	@ 0xe8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80078ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80078ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10f      	bne.n	80078e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <HAL_UART_IRQHandler+0x66>
 80078ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fbf2 	bl	80080c4 <UART_Receive_IT>
      return;
 80078e0:	e25b      	b.n	8007d9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 80de 	beq.w	8007aa8 <HAL_UART_IRQHandler+0x22c>
 80078ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d106      	bne.n	8007906 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 80d1 	beq.w	8007aa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <HAL_UART_IRQHandler+0xae>
 8007912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d005      	beq.n	800792a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007922:	f043 0201 	orr.w	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800792a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <HAL_UART_IRQHandler+0xd2>
 8007936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007946:	f043 0202 	orr.w	r2, r3, #2
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800794e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <HAL_UART_IRQHandler+0xf6>
 800795a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800796a:	f043 0204 	orr.w	r2, r3, #4
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d011      	beq.n	80079a2 <HAL_UART_IRQHandler+0x126>
 800797e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800798a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800799a:	f043 0208 	orr.w	r2, r3, #8
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 81f2 	beq.w	8007d90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d008      	beq.n	80079ca <HAL_UART_IRQHandler+0x14e>
 80079b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fb7d 	bl	80080c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d4:	2b40      	cmp	r3, #64	@ 0x40
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e6:	f003 0308 	and.w	r3, r3, #8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d103      	bne.n	80079f6 <HAL_UART_IRQHandler+0x17a>
 80079ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d04f      	beq.n	8007a96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fa85 	bl	8007f06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a06:	2b40      	cmp	r3, #64	@ 0x40
 8007a08:	d141      	bne.n	8007a8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3314      	adds	r3, #20
 8007a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1d9      	bne.n	8007a0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d013      	beq.n	8007a86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a62:	4a7e      	ldr	r2, [pc, #504]	@ (8007c5c <HAL_UART_IRQHandler+0x3e0>)
 8007a64:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fd fd2a 	bl	80054c4 <HAL_DMA_Abort_IT>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a84:	e00e      	b.n	8007aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f994 	bl	8007db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8c:	e00a      	b.n	8007aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f990 	bl	8007db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a94:	e006      	b.n	8007aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f98c 	bl	8007db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007aa2:	e175      	b.n	8007d90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa4:	bf00      	nop
    return;
 8007aa6:	e173      	b.n	8007d90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	f040 814f 	bne.w	8007d50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab6:	f003 0310 	and.w	r3, r3, #16
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 8148 	beq.w	8007d50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac4:	f003 0310 	and.w	r3, r3, #16
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8141 	beq.w	8007d50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60bb      	str	r3, [r7, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aee:	2b40      	cmp	r3, #64	@ 0x40
 8007af0:	f040 80b6 	bne.w	8007c60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 8145 	beq.w	8007d94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b12:	429a      	cmp	r2, r3
 8007b14:	f080 813e 	bcs.w	8007d94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b2a:	f000 8088 	beq.w	8007c3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	330c      	adds	r3, #12
 8007b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007b5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1d9      	bne.n	8007b2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3314      	adds	r3, #20
 8007b80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3314      	adds	r3, #20
 8007b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e1      	bne.n	8007b7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3314      	adds	r3, #20
 8007bbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3314      	adds	r3, #20
 8007bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007be0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e3      	bne.n	8007bb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	330c      	adds	r3, #12
 8007c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c0e:	f023 0310 	bic.w	r3, r3, #16
 8007c12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	330c      	adds	r3, #12
 8007c1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007c20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007c22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e3      	bne.n	8007bfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fd fbd3 	bl	80053e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2202      	movs	r2, #2
 8007c42:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f8b7 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c5a:	e09b      	b.n	8007d94 <HAL_UART_IRQHandler+0x518>
 8007c5c:	08007fcd 	.word	0x08007fcd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 808e 	beq.w	8007d98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8089 	beq.w	8007d98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007caa:	647a      	str	r2, [r7, #68]	@ 0x44
 8007cac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e3      	bne.n	8007c86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3314      	adds	r3, #20
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	f023 0301 	bic.w	r3, r3, #1
 8007cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3314      	adds	r3, #20
 8007cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ce2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e3      	bne.n	8007cbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	330c      	adds	r3, #12
 8007d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0310 	bic.w	r3, r3, #16
 8007d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	330c      	adds	r3, #12
 8007d24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007d28:	61fa      	str	r2, [r7, #28]
 8007d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	69b9      	ldr	r1, [r7, #24]
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	617b      	str	r3, [r7, #20]
   return(result);
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e3      	bne.n	8007d04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f83d 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d4e:	e023      	b.n	8007d98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d009      	beq.n	8007d70 <HAL_UART_IRQHandler+0x4f4>
 8007d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f943 	bl	8007ff4 <UART_Transmit_IT>
    return;
 8007d6e:	e014      	b.n	8007d9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00e      	beq.n	8007d9a <HAL_UART_IRQHandler+0x51e>
 8007d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d008      	beq.n	8007d9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f983 	bl	8008094 <UART_EndTransmit_IT>
    return;
 8007d8e:	e004      	b.n	8007d9a <HAL_UART_IRQHandler+0x51e>
    return;
 8007d90:	bf00      	nop
 8007d92:	e002      	b.n	8007d9a <HAL_UART_IRQHandler+0x51e>
      return;
 8007d94:	bf00      	nop
 8007d96:	e000      	b.n	8007d9a <HAL_UART_IRQHandler+0x51e>
      return;
 8007d98:	bf00      	nop
  }
}
 8007d9a:	37e8      	adds	r7, #232	@ 0xe8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	4613      	mov	r3, r2
 8007dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df0:	e03b      	b.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df8:	d037      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfa:	f7fd fa05 	bl	8005208 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	6a3a      	ldr	r2, [r7, #32]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d302      	bcc.n	8007e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e03a      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d023      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b80      	cmp	r3, #128	@ 0x80
 8007e26:	d020      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b40      	cmp	r3, #64	@ 0x40
 8007e2c:	d01d      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d116      	bne.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 f857 	bl	8007f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e00f      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4013      	ands	r3, r2
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bf0c      	ite	eq
 8007e7a:	2301      	moveq	r3, #1
 8007e7c:	2300      	movne	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d0b4      	beq.n	8007df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b085      	sub	sp, #20
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	88fa      	ldrh	r2, [r7, #6]
 8007eaa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	88fa      	ldrh	r2, [r7, #6]
 8007eb0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2222      	movs	r2, #34	@ 0x22
 8007ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ed6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0201 	orr.w	r2, r2, #1
 8007ee6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0220 	orr.w	r2, r2, #32
 8007ef6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b095      	sub	sp, #84	@ 0x54
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	330c      	adds	r3, #12
 8007f14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	330c      	adds	r3, #12
 8007f2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e5      	bne.n	8007f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3314      	adds	r3, #20
 8007f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	f023 0301 	bic.w	r3, r3, #1
 8007f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3314      	adds	r3, #20
 8007f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e5      	bne.n	8007f42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d119      	bne.n	8007fb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	330c      	adds	r3, #12
 8007f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f023 0310 	bic.w	r3, r3, #16
 8007f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f9e:	61ba      	str	r2, [r7, #24]
 8007fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	6979      	ldr	r1, [r7, #20]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	613b      	str	r3, [r7, #16]
   return(result);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e5      	bne.n	8007f7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007fc0:	bf00      	nop
 8007fc2:	3754      	adds	r7, #84	@ 0x54
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff fee4 	bl	8007db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b21      	cmp	r3, #33	@ 0x21
 8008006:	d13e      	bne.n	8008086 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008010:	d114      	bne.n	800803c <UART_Transmit_IT+0x48>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d110      	bne.n	800803c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800802e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	1c9a      	adds	r2, r3, #2
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	621a      	str	r2, [r3, #32]
 800803a:	e008      	b.n	800804e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	1c59      	adds	r1, r3, #1
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	6211      	str	r1, [r2, #32]
 8008046:	781a      	ldrb	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b29b      	uxth	r3, r3
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	4619      	mov	r1, r3
 800805c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10f      	bne.n	8008082 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008070:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008080:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	e000      	b.n	8008088 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008086:	2302      	movs	r3, #2
  }
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff fe73 	bl	8007da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08c      	sub	sp, #48	@ 0x30
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b22      	cmp	r3, #34	@ 0x22
 80080d6:	f040 80ae 	bne.w	8008236 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e2:	d117      	bne.n	8008114 <UART_Receive_IT+0x50>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d113      	bne.n	8008114 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080ec:	2300      	movs	r3, #0
 80080ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008102:	b29a      	uxth	r2, r3
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810c:	1c9a      	adds	r2, r3, #2
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	629a      	str	r2, [r3, #40]	@ 0x28
 8008112:	e026      	b.n	8008162 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008118:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008126:	d007      	beq.n	8008138 <UART_Receive_IT+0x74>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <UART_Receive_IT+0x82>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	b2da      	uxtb	r2, r3
 8008140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	e008      	b.n	8008158 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	b2db      	uxtb	r3, r3
 800814e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008152:	b2da      	uxtb	r2, r3
 8008154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008156:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008166:	b29b      	uxth	r3, r3
 8008168:	3b01      	subs	r3, #1
 800816a:	b29b      	uxth	r3, r3
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	4619      	mov	r1, r3
 8008170:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008172:	2b00      	cmp	r3, #0
 8008174:	d15d      	bne.n	8008232 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 0220 	bic.w	r2, r2, #32
 8008184:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68da      	ldr	r2, [r3, #12]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008194:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	695a      	ldr	r2, [r3, #20]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0201 	bic.w	r2, r2, #1
 80081a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d135      	bne.n	8008228 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	613b      	str	r3, [r7, #16]
   return(result);
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f023 0310 	bic.w	r3, r3, #16
 80081d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	330c      	adds	r3, #12
 80081e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081e2:	623a      	str	r2, [r7, #32]
 80081e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	69f9      	ldr	r1, [r7, #28]
 80081e8:	6a3a      	ldr	r2, [r7, #32]
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e5      	bne.n	80081c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0310 	and.w	r3, r3, #16
 8008200:	2b10      	cmp	r3, #16
 8008202:	d10a      	bne.n	800821a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008204:	2300      	movs	r3, #0
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff fdd1 	bl	8007dc8 <HAL_UARTEx_RxEventCallback>
 8008226:	e002      	b.n	800822e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7fc fd1f 	bl	8004c6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	e002      	b.n	8008238 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	e000      	b.n	8008238 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008236:	2302      	movs	r3, #2
  }
}
 8008238:	4618      	mov	r0, r3
 800823a:	3730      	adds	r7, #48	@ 0x30
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008244:	b0c0      	sub	sp, #256	@ 0x100
 8008246:	af00      	add	r7, sp, #0
 8008248:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800825c:	68d9      	ldr	r1, [r3, #12]
 800825e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	ea40 0301 	orr.w	r3, r0, r1
 8008268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800826a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	431a      	orrs	r2, r3
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	431a      	orrs	r2, r3
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	4313      	orrs	r3, r2
 8008288:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008298:	f021 010c 	bic.w	r1, r1, #12
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80082a6:	430b      	orrs	r3, r1
 80082a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80082b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ba:	6999      	ldr	r1, [r3, #24]
 80082bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	ea40 0301 	orr.w	r3, r0, r1
 80082c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4b8f      	ldr	r3, [pc, #572]	@ (800850c <UART_SetConfig+0x2cc>)
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d005      	beq.n	80082e0 <UART_SetConfig+0xa0>
 80082d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b8d      	ldr	r3, [pc, #564]	@ (8008510 <UART_SetConfig+0x2d0>)
 80082dc:	429a      	cmp	r2, r3
 80082de:	d104      	bne.n	80082ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082e0:	f7fd fbe0 	bl	8005aa4 <HAL_RCC_GetPCLK2Freq>
 80082e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80082e8:	e003      	b.n	80082f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082ea:	f7fd fbc7 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80082ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082fc:	f040 810c 	bne.w	8008518 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008304:	2200      	movs	r2, #0
 8008306:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800830a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800830e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008312:	4622      	mov	r2, r4
 8008314:	462b      	mov	r3, r5
 8008316:	1891      	adds	r1, r2, r2
 8008318:	65b9      	str	r1, [r7, #88]	@ 0x58
 800831a:	415b      	adcs	r3, r3
 800831c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800831e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008322:	4621      	mov	r1, r4
 8008324:	eb12 0801 	adds.w	r8, r2, r1
 8008328:	4629      	mov	r1, r5
 800832a:	eb43 0901 	adc.w	r9, r3, r1
 800832e:	f04f 0200 	mov.w	r2, #0
 8008332:	f04f 0300 	mov.w	r3, #0
 8008336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800833a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800833e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008342:	4690      	mov	r8, r2
 8008344:	4699      	mov	r9, r3
 8008346:	4623      	mov	r3, r4
 8008348:	eb18 0303 	adds.w	r3, r8, r3
 800834c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008350:	462b      	mov	r3, r5
 8008352:	eb49 0303 	adc.w	r3, r9, r3
 8008356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800835a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008366:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800836a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800836e:	460b      	mov	r3, r1
 8008370:	18db      	adds	r3, r3, r3
 8008372:	653b      	str	r3, [r7, #80]	@ 0x50
 8008374:	4613      	mov	r3, r2
 8008376:	eb42 0303 	adc.w	r3, r2, r3
 800837a:	657b      	str	r3, [r7, #84]	@ 0x54
 800837c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008380:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008384:	f7f7 ffac 	bl	80002e0 <__aeabi_uldivmod>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4b61      	ldr	r3, [pc, #388]	@ (8008514 <UART_SetConfig+0x2d4>)
 800838e:	fba3 2302 	umull	r2, r3, r3, r2
 8008392:	095b      	lsrs	r3, r3, #5
 8008394:	011c      	lsls	r4, r3, #4
 8008396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800839a:	2200      	movs	r2, #0
 800839c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80083a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80083a8:	4642      	mov	r2, r8
 80083aa:	464b      	mov	r3, r9
 80083ac:	1891      	adds	r1, r2, r2
 80083ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80083b0:	415b      	adcs	r3, r3
 80083b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80083b8:	4641      	mov	r1, r8
 80083ba:	eb12 0a01 	adds.w	sl, r2, r1
 80083be:	4649      	mov	r1, r9
 80083c0:	eb43 0b01 	adc.w	fp, r3, r1
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083d8:	4692      	mov	sl, r2
 80083da:	469b      	mov	fp, r3
 80083dc:	4643      	mov	r3, r8
 80083de:	eb1a 0303 	adds.w	r3, sl, r3
 80083e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083e6:	464b      	mov	r3, r9
 80083e8:	eb4b 0303 	adc.w	r3, fp, r3
 80083ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008400:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008404:	460b      	mov	r3, r1
 8008406:	18db      	adds	r3, r3, r3
 8008408:	643b      	str	r3, [r7, #64]	@ 0x40
 800840a:	4613      	mov	r3, r2
 800840c:	eb42 0303 	adc.w	r3, r2, r3
 8008410:	647b      	str	r3, [r7, #68]	@ 0x44
 8008412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008416:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800841a:	f7f7 ff61 	bl	80002e0 <__aeabi_uldivmod>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4611      	mov	r1, r2
 8008424:	4b3b      	ldr	r3, [pc, #236]	@ (8008514 <UART_SetConfig+0x2d4>)
 8008426:	fba3 2301 	umull	r2, r3, r3, r1
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	2264      	movs	r2, #100	@ 0x64
 800842e:	fb02 f303 	mul.w	r3, r2, r3
 8008432:	1acb      	subs	r3, r1, r3
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800843a:	4b36      	ldr	r3, [pc, #216]	@ (8008514 <UART_SetConfig+0x2d4>)
 800843c:	fba3 2302 	umull	r2, r3, r3, r2
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008448:	441c      	add	r4, r3
 800844a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800844e:	2200      	movs	r2, #0
 8008450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008454:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008458:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800845c:	4642      	mov	r2, r8
 800845e:	464b      	mov	r3, r9
 8008460:	1891      	adds	r1, r2, r2
 8008462:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008464:	415b      	adcs	r3, r3
 8008466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800846c:	4641      	mov	r1, r8
 800846e:	1851      	adds	r1, r2, r1
 8008470:	6339      	str	r1, [r7, #48]	@ 0x30
 8008472:	4649      	mov	r1, r9
 8008474:	414b      	adcs	r3, r1
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008484:	4659      	mov	r1, fp
 8008486:	00cb      	lsls	r3, r1, #3
 8008488:	4651      	mov	r1, sl
 800848a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800848e:	4651      	mov	r1, sl
 8008490:	00ca      	lsls	r2, r1, #3
 8008492:	4610      	mov	r0, r2
 8008494:	4619      	mov	r1, r3
 8008496:	4603      	mov	r3, r0
 8008498:	4642      	mov	r2, r8
 800849a:	189b      	adds	r3, r3, r2
 800849c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084a0:	464b      	mov	r3, r9
 80084a2:	460a      	mov	r2, r1
 80084a4:	eb42 0303 	adc.w	r3, r2, r3
 80084a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80084bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80084c0:	460b      	mov	r3, r1
 80084c2:	18db      	adds	r3, r3, r3
 80084c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084c6:	4613      	mov	r3, r2
 80084c8:	eb42 0303 	adc.w	r3, r2, r3
 80084cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80084d6:	f7f7 ff03 	bl	80002e0 <__aeabi_uldivmod>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	4b0d      	ldr	r3, [pc, #52]	@ (8008514 <UART_SetConfig+0x2d4>)
 80084e0:	fba3 1302 	umull	r1, r3, r3, r2
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	2164      	movs	r1, #100	@ 0x64
 80084e8:	fb01 f303 	mul.w	r3, r1, r3
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	3332      	adds	r3, #50	@ 0x32
 80084f2:	4a08      	ldr	r2, [pc, #32]	@ (8008514 <UART_SetConfig+0x2d4>)
 80084f4:	fba2 2303 	umull	r2, r3, r2, r3
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	f003 0207 	and.w	r2, r3, #7
 80084fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4422      	add	r2, r4
 8008506:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008508:	e106      	b.n	8008718 <UART_SetConfig+0x4d8>
 800850a:	bf00      	nop
 800850c:	40011000 	.word	0x40011000
 8008510:	40011400 	.word	0x40011400
 8008514:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800851c:	2200      	movs	r2, #0
 800851e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008522:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008526:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800852a:	4642      	mov	r2, r8
 800852c:	464b      	mov	r3, r9
 800852e:	1891      	adds	r1, r2, r2
 8008530:	6239      	str	r1, [r7, #32]
 8008532:	415b      	adcs	r3, r3
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
 8008536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800853a:	4641      	mov	r1, r8
 800853c:	1854      	adds	r4, r2, r1
 800853e:	4649      	mov	r1, r9
 8008540:	eb43 0501 	adc.w	r5, r3, r1
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	00eb      	lsls	r3, r5, #3
 800854e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008552:	00e2      	lsls	r2, r4, #3
 8008554:	4614      	mov	r4, r2
 8008556:	461d      	mov	r5, r3
 8008558:	4643      	mov	r3, r8
 800855a:	18e3      	adds	r3, r4, r3
 800855c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008560:	464b      	mov	r3, r9
 8008562:	eb45 0303 	adc.w	r3, r5, r3
 8008566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800856a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008576:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800857a:	f04f 0200 	mov.w	r2, #0
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008586:	4629      	mov	r1, r5
 8008588:	008b      	lsls	r3, r1, #2
 800858a:	4621      	mov	r1, r4
 800858c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008590:	4621      	mov	r1, r4
 8008592:	008a      	lsls	r2, r1, #2
 8008594:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008598:	f7f7 fea2 	bl	80002e0 <__aeabi_uldivmod>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4b60      	ldr	r3, [pc, #384]	@ (8008724 <UART_SetConfig+0x4e4>)
 80085a2:	fba3 2302 	umull	r2, r3, r3, r2
 80085a6:	095b      	lsrs	r3, r3, #5
 80085a8:	011c      	lsls	r4, r3, #4
 80085aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80085b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80085b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80085bc:	4642      	mov	r2, r8
 80085be:	464b      	mov	r3, r9
 80085c0:	1891      	adds	r1, r2, r2
 80085c2:	61b9      	str	r1, [r7, #24]
 80085c4:	415b      	adcs	r3, r3
 80085c6:	61fb      	str	r3, [r7, #28]
 80085c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085cc:	4641      	mov	r1, r8
 80085ce:	1851      	adds	r1, r2, r1
 80085d0:	6139      	str	r1, [r7, #16]
 80085d2:	4649      	mov	r1, r9
 80085d4:	414b      	adcs	r3, r1
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	f04f 0300 	mov.w	r3, #0
 80085e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085e4:	4659      	mov	r1, fp
 80085e6:	00cb      	lsls	r3, r1, #3
 80085e8:	4651      	mov	r1, sl
 80085ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ee:	4651      	mov	r1, sl
 80085f0:	00ca      	lsls	r2, r1, #3
 80085f2:	4610      	mov	r0, r2
 80085f4:	4619      	mov	r1, r3
 80085f6:	4603      	mov	r3, r0
 80085f8:	4642      	mov	r2, r8
 80085fa:	189b      	adds	r3, r3, r2
 80085fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008600:	464b      	mov	r3, r9
 8008602:	460a      	mov	r2, r1
 8008604:	eb42 0303 	adc.w	r3, r2, r3
 8008608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800860c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008616:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008618:	f04f 0200 	mov.w	r2, #0
 800861c:	f04f 0300 	mov.w	r3, #0
 8008620:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008624:	4649      	mov	r1, r9
 8008626:	008b      	lsls	r3, r1, #2
 8008628:	4641      	mov	r1, r8
 800862a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800862e:	4641      	mov	r1, r8
 8008630:	008a      	lsls	r2, r1, #2
 8008632:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008636:	f7f7 fe53 	bl	80002e0 <__aeabi_uldivmod>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4611      	mov	r1, r2
 8008640:	4b38      	ldr	r3, [pc, #224]	@ (8008724 <UART_SetConfig+0x4e4>)
 8008642:	fba3 2301 	umull	r2, r3, r3, r1
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	2264      	movs	r2, #100	@ 0x64
 800864a:	fb02 f303 	mul.w	r3, r2, r3
 800864e:	1acb      	subs	r3, r1, r3
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	3332      	adds	r3, #50	@ 0x32
 8008654:	4a33      	ldr	r2, [pc, #204]	@ (8008724 <UART_SetConfig+0x4e4>)
 8008656:	fba2 2303 	umull	r2, r3, r2, r3
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008660:	441c      	add	r4, r3
 8008662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008666:	2200      	movs	r2, #0
 8008668:	673b      	str	r3, [r7, #112]	@ 0x70
 800866a:	677a      	str	r2, [r7, #116]	@ 0x74
 800866c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008670:	4642      	mov	r2, r8
 8008672:	464b      	mov	r3, r9
 8008674:	1891      	adds	r1, r2, r2
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	415b      	adcs	r3, r3
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008680:	4641      	mov	r1, r8
 8008682:	1851      	adds	r1, r2, r1
 8008684:	6039      	str	r1, [r7, #0]
 8008686:	4649      	mov	r1, r9
 8008688:	414b      	adcs	r3, r1
 800868a:	607b      	str	r3, [r7, #4]
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	f04f 0300 	mov.w	r3, #0
 8008694:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008698:	4659      	mov	r1, fp
 800869a:	00cb      	lsls	r3, r1, #3
 800869c:	4651      	mov	r1, sl
 800869e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086a2:	4651      	mov	r1, sl
 80086a4:	00ca      	lsls	r2, r1, #3
 80086a6:	4610      	mov	r0, r2
 80086a8:	4619      	mov	r1, r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	4642      	mov	r2, r8
 80086ae:	189b      	adds	r3, r3, r2
 80086b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086b2:	464b      	mov	r3, r9
 80086b4:	460a      	mov	r2, r1
 80086b6:	eb42 0303 	adc.w	r3, r2, r3
 80086ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80086c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	f04f 0300 	mov.w	r3, #0
 80086d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80086d4:	4649      	mov	r1, r9
 80086d6:	008b      	lsls	r3, r1, #2
 80086d8:	4641      	mov	r1, r8
 80086da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086de:	4641      	mov	r1, r8
 80086e0:	008a      	lsls	r2, r1, #2
 80086e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80086e6:	f7f7 fdfb 	bl	80002e0 <__aeabi_uldivmod>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008724 <UART_SetConfig+0x4e4>)
 80086f0:	fba3 1302 	umull	r1, r3, r3, r2
 80086f4:	095b      	lsrs	r3, r3, #5
 80086f6:	2164      	movs	r1, #100	@ 0x64
 80086f8:	fb01 f303 	mul.w	r3, r1, r3
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	3332      	adds	r3, #50	@ 0x32
 8008702:	4a08      	ldr	r2, [pc, #32]	@ (8008724 <UART_SetConfig+0x4e4>)
 8008704:	fba2 2303 	umull	r2, r3, r2, r3
 8008708:	095b      	lsrs	r3, r3, #5
 800870a:	f003 020f 	and.w	r2, r3, #15
 800870e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4422      	add	r2, r4
 8008716:	609a      	str	r2, [r3, #8]
}
 8008718:	bf00      	nop
 800871a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800871e:	46bd      	mov	sp, r7
 8008720:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008724:	51eb851f 	.word	0x51eb851f

08008728 <std>:
 8008728:	2300      	movs	r3, #0
 800872a:	b510      	push	{r4, lr}
 800872c:	4604      	mov	r4, r0
 800872e:	e9c0 3300 	strd	r3, r3, [r0]
 8008732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008736:	6083      	str	r3, [r0, #8]
 8008738:	8181      	strh	r1, [r0, #12]
 800873a:	6643      	str	r3, [r0, #100]	@ 0x64
 800873c:	81c2      	strh	r2, [r0, #14]
 800873e:	6183      	str	r3, [r0, #24]
 8008740:	4619      	mov	r1, r3
 8008742:	2208      	movs	r2, #8
 8008744:	305c      	adds	r0, #92	@ 0x5c
 8008746:	f000 f926 	bl	8008996 <memset>
 800874a:	4b0d      	ldr	r3, [pc, #52]	@ (8008780 <std+0x58>)
 800874c:	6263      	str	r3, [r4, #36]	@ 0x24
 800874e:	4b0d      	ldr	r3, [pc, #52]	@ (8008784 <std+0x5c>)
 8008750:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008752:	4b0d      	ldr	r3, [pc, #52]	@ (8008788 <std+0x60>)
 8008754:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008756:	4b0d      	ldr	r3, [pc, #52]	@ (800878c <std+0x64>)
 8008758:	6323      	str	r3, [r4, #48]	@ 0x30
 800875a:	4b0d      	ldr	r3, [pc, #52]	@ (8008790 <std+0x68>)
 800875c:	6224      	str	r4, [r4, #32]
 800875e:	429c      	cmp	r4, r3
 8008760:	d006      	beq.n	8008770 <std+0x48>
 8008762:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008766:	4294      	cmp	r4, r2
 8008768:	d002      	beq.n	8008770 <std+0x48>
 800876a:	33d0      	adds	r3, #208	@ 0xd0
 800876c:	429c      	cmp	r4, r3
 800876e:	d105      	bne.n	800877c <std+0x54>
 8008770:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008778:	f000 b986 	b.w	8008a88 <__retarget_lock_init_recursive>
 800877c:	bd10      	pop	{r4, pc}
 800877e:	bf00      	nop
 8008780:	08008911 	.word	0x08008911
 8008784:	08008933 	.word	0x08008933
 8008788:	0800896b 	.word	0x0800896b
 800878c:	0800898f 	.word	0x0800898f
 8008790:	20012fe0 	.word	0x20012fe0

08008794 <stdio_exit_handler>:
 8008794:	4a02      	ldr	r2, [pc, #8]	@ (80087a0 <stdio_exit_handler+0xc>)
 8008796:	4903      	ldr	r1, [pc, #12]	@ (80087a4 <stdio_exit_handler+0x10>)
 8008798:	4803      	ldr	r0, [pc, #12]	@ (80087a8 <stdio_exit_handler+0x14>)
 800879a:	f000 b869 	b.w	8008870 <_fwalk_sglue>
 800879e:	bf00      	nop
 80087a0:	20000064 	.word	0x20000064
 80087a4:	080095f5 	.word	0x080095f5
 80087a8:	20000074 	.word	0x20000074

080087ac <cleanup_stdio>:
 80087ac:	6841      	ldr	r1, [r0, #4]
 80087ae:	4b0c      	ldr	r3, [pc, #48]	@ (80087e0 <cleanup_stdio+0x34>)
 80087b0:	4299      	cmp	r1, r3
 80087b2:	b510      	push	{r4, lr}
 80087b4:	4604      	mov	r4, r0
 80087b6:	d001      	beq.n	80087bc <cleanup_stdio+0x10>
 80087b8:	f000 ff1c 	bl	80095f4 <_fflush_r>
 80087bc:	68a1      	ldr	r1, [r4, #8]
 80087be:	4b09      	ldr	r3, [pc, #36]	@ (80087e4 <cleanup_stdio+0x38>)
 80087c0:	4299      	cmp	r1, r3
 80087c2:	d002      	beq.n	80087ca <cleanup_stdio+0x1e>
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 ff15 	bl	80095f4 <_fflush_r>
 80087ca:	68e1      	ldr	r1, [r4, #12]
 80087cc:	4b06      	ldr	r3, [pc, #24]	@ (80087e8 <cleanup_stdio+0x3c>)
 80087ce:	4299      	cmp	r1, r3
 80087d0:	d004      	beq.n	80087dc <cleanup_stdio+0x30>
 80087d2:	4620      	mov	r0, r4
 80087d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d8:	f000 bf0c 	b.w	80095f4 <_fflush_r>
 80087dc:	bd10      	pop	{r4, pc}
 80087de:	bf00      	nop
 80087e0:	20012fe0 	.word	0x20012fe0
 80087e4:	20013048 	.word	0x20013048
 80087e8:	200130b0 	.word	0x200130b0

080087ec <global_stdio_init.part.0>:
 80087ec:	b510      	push	{r4, lr}
 80087ee:	4b0b      	ldr	r3, [pc, #44]	@ (800881c <global_stdio_init.part.0+0x30>)
 80087f0:	4c0b      	ldr	r4, [pc, #44]	@ (8008820 <global_stdio_init.part.0+0x34>)
 80087f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008824 <global_stdio_init.part.0+0x38>)
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	4620      	mov	r0, r4
 80087f8:	2200      	movs	r2, #0
 80087fa:	2104      	movs	r1, #4
 80087fc:	f7ff ff94 	bl	8008728 <std>
 8008800:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008804:	2201      	movs	r2, #1
 8008806:	2109      	movs	r1, #9
 8008808:	f7ff ff8e 	bl	8008728 <std>
 800880c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008810:	2202      	movs	r2, #2
 8008812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008816:	2112      	movs	r1, #18
 8008818:	f7ff bf86 	b.w	8008728 <std>
 800881c:	20013118 	.word	0x20013118
 8008820:	20012fe0 	.word	0x20012fe0
 8008824:	08008795 	.word	0x08008795

08008828 <__sfp_lock_acquire>:
 8008828:	4801      	ldr	r0, [pc, #4]	@ (8008830 <__sfp_lock_acquire+0x8>)
 800882a:	f000 b92e 	b.w	8008a8a <__retarget_lock_acquire_recursive>
 800882e:	bf00      	nop
 8008830:	20013121 	.word	0x20013121

08008834 <__sfp_lock_release>:
 8008834:	4801      	ldr	r0, [pc, #4]	@ (800883c <__sfp_lock_release+0x8>)
 8008836:	f000 b929 	b.w	8008a8c <__retarget_lock_release_recursive>
 800883a:	bf00      	nop
 800883c:	20013121 	.word	0x20013121

08008840 <__sinit>:
 8008840:	b510      	push	{r4, lr}
 8008842:	4604      	mov	r4, r0
 8008844:	f7ff fff0 	bl	8008828 <__sfp_lock_acquire>
 8008848:	6a23      	ldr	r3, [r4, #32]
 800884a:	b11b      	cbz	r3, 8008854 <__sinit+0x14>
 800884c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008850:	f7ff bff0 	b.w	8008834 <__sfp_lock_release>
 8008854:	4b04      	ldr	r3, [pc, #16]	@ (8008868 <__sinit+0x28>)
 8008856:	6223      	str	r3, [r4, #32]
 8008858:	4b04      	ldr	r3, [pc, #16]	@ (800886c <__sinit+0x2c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1f5      	bne.n	800884c <__sinit+0xc>
 8008860:	f7ff ffc4 	bl	80087ec <global_stdio_init.part.0>
 8008864:	e7f2      	b.n	800884c <__sinit+0xc>
 8008866:	bf00      	nop
 8008868:	080087ad 	.word	0x080087ad
 800886c:	20013118 	.word	0x20013118

08008870 <_fwalk_sglue>:
 8008870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008874:	4607      	mov	r7, r0
 8008876:	4688      	mov	r8, r1
 8008878:	4614      	mov	r4, r2
 800887a:	2600      	movs	r6, #0
 800887c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008880:	f1b9 0901 	subs.w	r9, r9, #1
 8008884:	d505      	bpl.n	8008892 <_fwalk_sglue+0x22>
 8008886:	6824      	ldr	r4, [r4, #0]
 8008888:	2c00      	cmp	r4, #0
 800888a:	d1f7      	bne.n	800887c <_fwalk_sglue+0xc>
 800888c:	4630      	mov	r0, r6
 800888e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008892:	89ab      	ldrh	r3, [r5, #12]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d907      	bls.n	80088a8 <_fwalk_sglue+0x38>
 8008898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800889c:	3301      	adds	r3, #1
 800889e:	d003      	beq.n	80088a8 <_fwalk_sglue+0x38>
 80088a0:	4629      	mov	r1, r5
 80088a2:	4638      	mov	r0, r7
 80088a4:	47c0      	blx	r8
 80088a6:	4306      	orrs	r6, r0
 80088a8:	3568      	adds	r5, #104	@ 0x68
 80088aa:	e7e9      	b.n	8008880 <_fwalk_sglue+0x10>

080088ac <iprintf>:
 80088ac:	b40f      	push	{r0, r1, r2, r3}
 80088ae:	b507      	push	{r0, r1, r2, lr}
 80088b0:	4906      	ldr	r1, [pc, #24]	@ (80088cc <iprintf+0x20>)
 80088b2:	ab04      	add	r3, sp, #16
 80088b4:	6808      	ldr	r0, [r1, #0]
 80088b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ba:	6881      	ldr	r1, [r0, #8]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	f000 fb6f 	bl	8008fa0 <_vfiprintf_r>
 80088c2:	b003      	add	sp, #12
 80088c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c8:	b004      	add	sp, #16
 80088ca:	4770      	bx	lr
 80088cc:	20000070 	.word	0x20000070

080088d0 <siprintf>:
 80088d0:	b40e      	push	{r1, r2, r3}
 80088d2:	b500      	push	{lr}
 80088d4:	b09c      	sub	sp, #112	@ 0x70
 80088d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80088d8:	9002      	str	r0, [sp, #8]
 80088da:	9006      	str	r0, [sp, #24]
 80088dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80088e0:	4809      	ldr	r0, [pc, #36]	@ (8008908 <siprintf+0x38>)
 80088e2:	9107      	str	r1, [sp, #28]
 80088e4:	9104      	str	r1, [sp, #16]
 80088e6:	4909      	ldr	r1, [pc, #36]	@ (800890c <siprintf+0x3c>)
 80088e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ec:	9105      	str	r1, [sp, #20]
 80088ee:	6800      	ldr	r0, [r0, #0]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	a902      	add	r1, sp, #8
 80088f4:	f000 fa2e 	bl	8008d54 <_svfiprintf_r>
 80088f8:	9b02      	ldr	r3, [sp, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	b01c      	add	sp, #112	@ 0x70
 8008900:	f85d eb04 	ldr.w	lr, [sp], #4
 8008904:	b003      	add	sp, #12
 8008906:	4770      	bx	lr
 8008908:	20000070 	.word	0x20000070
 800890c:	ffff0208 	.word	0xffff0208

08008910 <__sread>:
 8008910:	b510      	push	{r4, lr}
 8008912:	460c      	mov	r4, r1
 8008914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008918:	f000 f868 	bl	80089ec <_read_r>
 800891c:	2800      	cmp	r0, #0
 800891e:	bfab      	itete	ge
 8008920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008922:	89a3      	ldrhlt	r3, [r4, #12]
 8008924:	181b      	addge	r3, r3, r0
 8008926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800892a:	bfac      	ite	ge
 800892c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800892e:	81a3      	strhlt	r3, [r4, #12]
 8008930:	bd10      	pop	{r4, pc}

08008932 <__swrite>:
 8008932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	461f      	mov	r7, r3
 8008938:	898b      	ldrh	r3, [r1, #12]
 800893a:	05db      	lsls	r3, r3, #23
 800893c:	4605      	mov	r5, r0
 800893e:	460c      	mov	r4, r1
 8008940:	4616      	mov	r6, r2
 8008942:	d505      	bpl.n	8008950 <__swrite+0x1e>
 8008944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008948:	2302      	movs	r3, #2
 800894a:	2200      	movs	r2, #0
 800894c:	f000 f83c 	bl	80089c8 <_lseek_r>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008956:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	4632      	mov	r2, r6
 800895e:	463b      	mov	r3, r7
 8008960:	4628      	mov	r0, r5
 8008962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008966:	f000 b853 	b.w	8008a10 <_write_r>

0800896a <__sseek>:
 800896a:	b510      	push	{r4, lr}
 800896c:	460c      	mov	r4, r1
 800896e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008972:	f000 f829 	bl	80089c8 <_lseek_r>
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	bf15      	itete	ne
 800897c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800897e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008986:	81a3      	strheq	r3, [r4, #12]
 8008988:	bf18      	it	ne
 800898a:	81a3      	strhne	r3, [r4, #12]
 800898c:	bd10      	pop	{r4, pc}

0800898e <__sclose>:
 800898e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008992:	f000 b809 	b.w	80089a8 <_close_r>

08008996 <memset>:
 8008996:	4402      	add	r2, r0
 8008998:	4603      	mov	r3, r0
 800899a:	4293      	cmp	r3, r2
 800899c:	d100      	bne.n	80089a0 <memset+0xa>
 800899e:	4770      	bx	lr
 80089a0:	f803 1b01 	strb.w	r1, [r3], #1
 80089a4:	e7f9      	b.n	800899a <memset+0x4>
	...

080089a8 <_close_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	@ (80089c4 <_close_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7fc fb4b 	bl	800504e <_close>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_close_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_close_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	2001311c 	.word	0x2001311c

080089c8 <_lseek_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4d07      	ldr	r5, [pc, #28]	@ (80089e8 <_lseek_r+0x20>)
 80089cc:	4604      	mov	r4, r0
 80089ce:	4608      	mov	r0, r1
 80089d0:	4611      	mov	r1, r2
 80089d2:	2200      	movs	r2, #0
 80089d4:	602a      	str	r2, [r5, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	f7fc fb60 	bl	800509c <_lseek>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_lseek_r+0x1e>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_lseek_r+0x1e>
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	2001311c 	.word	0x2001311c

080089ec <_read_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d07      	ldr	r5, [pc, #28]	@ (8008a0c <_read_r+0x20>)
 80089f0:	4604      	mov	r4, r0
 80089f2:	4608      	mov	r0, r1
 80089f4:	4611      	mov	r1, r2
 80089f6:	2200      	movs	r2, #0
 80089f8:	602a      	str	r2, [r5, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	f7fc faee 	bl	8004fdc <_read>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d102      	bne.n	8008a0a <_read_r+0x1e>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	b103      	cbz	r3, 8008a0a <_read_r+0x1e>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	2001311c 	.word	0x2001311c

08008a10 <_write_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d07      	ldr	r5, [pc, #28]	@ (8008a30 <_write_r+0x20>)
 8008a14:	4604      	mov	r4, r0
 8008a16:	4608      	mov	r0, r1
 8008a18:	4611      	mov	r1, r2
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	602a      	str	r2, [r5, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f7fc faf9 	bl	8005016 <_write>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d102      	bne.n	8008a2e <_write_r+0x1e>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	b103      	cbz	r3, 8008a2e <_write_r+0x1e>
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	2001311c 	.word	0x2001311c

08008a34 <__errno>:
 8008a34:	4b01      	ldr	r3, [pc, #4]	@ (8008a3c <__errno+0x8>)
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	20000070 	.word	0x20000070

08008a40 <__libc_init_array>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4d0d      	ldr	r5, [pc, #52]	@ (8008a78 <__libc_init_array+0x38>)
 8008a44:	4c0d      	ldr	r4, [pc, #52]	@ (8008a7c <__libc_init_array+0x3c>)
 8008a46:	1b64      	subs	r4, r4, r5
 8008a48:	10a4      	asrs	r4, r4, #2
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	d109      	bne.n	8008a64 <__libc_init_array+0x24>
 8008a50:	4d0b      	ldr	r5, [pc, #44]	@ (8008a80 <__libc_init_array+0x40>)
 8008a52:	4c0c      	ldr	r4, [pc, #48]	@ (8008a84 <__libc_init_array+0x44>)
 8008a54:	f000 ff6e 	bl	8009934 <_init>
 8008a58:	1b64      	subs	r4, r4, r5
 8008a5a:	10a4      	asrs	r4, r4, #2
 8008a5c:	2600      	movs	r6, #0
 8008a5e:	42a6      	cmp	r6, r4
 8008a60:	d105      	bne.n	8008a6e <__libc_init_array+0x2e>
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a68:	4798      	blx	r3
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	e7ee      	b.n	8008a4c <__libc_init_array+0xc>
 8008a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a72:	4798      	blx	r3
 8008a74:	3601      	adds	r6, #1
 8008a76:	e7f2      	b.n	8008a5e <__libc_init_array+0x1e>
 8008a78:	08009fc8 	.word	0x08009fc8
 8008a7c:	08009fc8 	.word	0x08009fc8
 8008a80:	08009fc8 	.word	0x08009fc8
 8008a84:	08009fcc 	.word	0x08009fcc

08008a88 <__retarget_lock_init_recursive>:
 8008a88:	4770      	bx	lr

08008a8a <__retarget_lock_acquire_recursive>:
 8008a8a:	4770      	bx	lr

08008a8c <__retarget_lock_release_recursive>:
 8008a8c:	4770      	bx	lr

08008a8e <memcpy>:
 8008a8e:	440a      	add	r2, r1
 8008a90:	4291      	cmp	r1, r2
 8008a92:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a96:	d100      	bne.n	8008a9a <memcpy+0xc>
 8008a98:	4770      	bx	lr
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aa4:	4291      	cmp	r1, r2
 8008aa6:	d1f9      	bne.n	8008a9c <memcpy+0xe>
 8008aa8:	bd10      	pop	{r4, pc}
	...

08008aac <_free_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4605      	mov	r5, r0
 8008ab0:	2900      	cmp	r1, #0
 8008ab2:	d041      	beq.n	8008b38 <_free_r+0x8c>
 8008ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab8:	1f0c      	subs	r4, r1, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfb8      	it	lt
 8008abe:	18e4      	addlt	r4, r4, r3
 8008ac0:	f000 f8e0 	bl	8008c84 <__malloc_lock>
 8008ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b3c <_free_r+0x90>)
 8008ac6:	6813      	ldr	r3, [r2, #0]
 8008ac8:	b933      	cbnz	r3, 8008ad8 <_free_r+0x2c>
 8008aca:	6063      	str	r3, [r4, #4]
 8008acc:	6014      	str	r4, [r2, #0]
 8008ace:	4628      	mov	r0, r5
 8008ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ad4:	f000 b8dc 	b.w	8008c90 <__malloc_unlock>
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d908      	bls.n	8008aee <_free_r+0x42>
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	1821      	adds	r1, r4, r0
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	bf01      	itttt	eq
 8008ae4:	6819      	ldreq	r1, [r3, #0]
 8008ae6:	685b      	ldreq	r3, [r3, #4]
 8008ae8:	1809      	addeq	r1, r1, r0
 8008aea:	6021      	streq	r1, [r4, #0]
 8008aec:	e7ed      	b.n	8008aca <_free_r+0x1e>
 8008aee:	461a      	mov	r2, r3
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	b10b      	cbz	r3, 8008af8 <_free_r+0x4c>
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d9fa      	bls.n	8008aee <_free_r+0x42>
 8008af8:	6811      	ldr	r1, [r2, #0]
 8008afa:	1850      	adds	r0, r2, r1
 8008afc:	42a0      	cmp	r0, r4
 8008afe:	d10b      	bne.n	8008b18 <_free_r+0x6c>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	4401      	add	r1, r0
 8008b04:	1850      	adds	r0, r2, r1
 8008b06:	4283      	cmp	r3, r0
 8008b08:	6011      	str	r1, [r2, #0]
 8008b0a:	d1e0      	bne.n	8008ace <_free_r+0x22>
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	6053      	str	r3, [r2, #4]
 8008b12:	4408      	add	r0, r1
 8008b14:	6010      	str	r0, [r2, #0]
 8008b16:	e7da      	b.n	8008ace <_free_r+0x22>
 8008b18:	d902      	bls.n	8008b20 <_free_r+0x74>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	602b      	str	r3, [r5, #0]
 8008b1e:	e7d6      	b.n	8008ace <_free_r+0x22>
 8008b20:	6820      	ldr	r0, [r4, #0]
 8008b22:	1821      	adds	r1, r4, r0
 8008b24:	428b      	cmp	r3, r1
 8008b26:	bf04      	itt	eq
 8008b28:	6819      	ldreq	r1, [r3, #0]
 8008b2a:	685b      	ldreq	r3, [r3, #4]
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	bf04      	itt	eq
 8008b30:	1809      	addeq	r1, r1, r0
 8008b32:	6021      	streq	r1, [r4, #0]
 8008b34:	6054      	str	r4, [r2, #4]
 8008b36:	e7ca      	b.n	8008ace <_free_r+0x22>
 8008b38:	bd38      	pop	{r3, r4, r5, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20013128 	.word	0x20013128

08008b40 <sbrk_aligned>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	4e0f      	ldr	r6, [pc, #60]	@ (8008b80 <sbrk_aligned+0x40>)
 8008b44:	460c      	mov	r4, r1
 8008b46:	6831      	ldr	r1, [r6, #0]
 8008b48:	4605      	mov	r5, r0
 8008b4a:	b911      	cbnz	r1, 8008b52 <sbrk_aligned+0x12>
 8008b4c:	f000 fe28 	bl	80097a0 <_sbrk_r>
 8008b50:	6030      	str	r0, [r6, #0]
 8008b52:	4621      	mov	r1, r4
 8008b54:	4628      	mov	r0, r5
 8008b56:	f000 fe23 	bl	80097a0 <_sbrk_r>
 8008b5a:	1c43      	adds	r3, r0, #1
 8008b5c:	d103      	bne.n	8008b66 <sbrk_aligned+0x26>
 8008b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b62:	4620      	mov	r0, r4
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
 8008b66:	1cc4      	adds	r4, r0, #3
 8008b68:	f024 0403 	bic.w	r4, r4, #3
 8008b6c:	42a0      	cmp	r0, r4
 8008b6e:	d0f8      	beq.n	8008b62 <sbrk_aligned+0x22>
 8008b70:	1a21      	subs	r1, r4, r0
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 fe14 	bl	80097a0 <_sbrk_r>
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d1f2      	bne.n	8008b62 <sbrk_aligned+0x22>
 8008b7c:	e7ef      	b.n	8008b5e <sbrk_aligned+0x1e>
 8008b7e:	bf00      	nop
 8008b80:	20013124 	.word	0x20013124

08008b84 <_malloc_r>:
 8008b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b88:	1ccd      	adds	r5, r1, #3
 8008b8a:	f025 0503 	bic.w	r5, r5, #3
 8008b8e:	3508      	adds	r5, #8
 8008b90:	2d0c      	cmp	r5, #12
 8008b92:	bf38      	it	cc
 8008b94:	250c      	movcc	r5, #12
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	4606      	mov	r6, r0
 8008b9a:	db01      	blt.n	8008ba0 <_malloc_r+0x1c>
 8008b9c:	42a9      	cmp	r1, r5
 8008b9e:	d904      	bls.n	8008baa <_malloc_r+0x26>
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	6033      	str	r3, [r6, #0]
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008baa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c80 <_malloc_r+0xfc>
 8008bae:	f000 f869 	bl	8008c84 <__malloc_lock>
 8008bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb6:	461c      	mov	r4, r3
 8008bb8:	bb44      	cbnz	r4, 8008c0c <_malloc_r+0x88>
 8008bba:	4629      	mov	r1, r5
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7ff ffbf 	bl	8008b40 <sbrk_aligned>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	d158      	bne.n	8008c7a <_malloc_r+0xf6>
 8008bc8:	f8d8 4000 	ldr.w	r4, [r8]
 8008bcc:	4627      	mov	r7, r4
 8008bce:	2f00      	cmp	r7, #0
 8008bd0:	d143      	bne.n	8008c5a <_malloc_r+0xd6>
 8008bd2:	2c00      	cmp	r4, #0
 8008bd4:	d04b      	beq.n	8008c6e <_malloc_r+0xea>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	4639      	mov	r1, r7
 8008bda:	4630      	mov	r0, r6
 8008bdc:	eb04 0903 	add.w	r9, r4, r3
 8008be0:	f000 fdde 	bl	80097a0 <_sbrk_r>
 8008be4:	4581      	cmp	r9, r0
 8008be6:	d142      	bne.n	8008c6e <_malloc_r+0xea>
 8008be8:	6821      	ldr	r1, [r4, #0]
 8008bea:	1a6d      	subs	r5, r5, r1
 8008bec:	4629      	mov	r1, r5
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ffa6 	bl	8008b40 <sbrk_aligned>
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d03a      	beq.n	8008c6e <_malloc_r+0xea>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	442b      	add	r3, r5
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	bb62      	cbnz	r2, 8008c60 <_malloc_r+0xdc>
 8008c06:	f8c8 7000 	str.w	r7, [r8]
 8008c0a:	e00f      	b.n	8008c2c <_malloc_r+0xa8>
 8008c0c:	6822      	ldr	r2, [r4, #0]
 8008c0e:	1b52      	subs	r2, r2, r5
 8008c10:	d420      	bmi.n	8008c54 <_malloc_r+0xd0>
 8008c12:	2a0b      	cmp	r2, #11
 8008c14:	d917      	bls.n	8008c46 <_malloc_r+0xc2>
 8008c16:	1961      	adds	r1, r4, r5
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	6025      	str	r5, [r4, #0]
 8008c1c:	bf18      	it	ne
 8008c1e:	6059      	strne	r1, [r3, #4]
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	bf08      	it	eq
 8008c24:	f8c8 1000 	streq.w	r1, [r8]
 8008c28:	5162      	str	r2, [r4, r5]
 8008c2a:	604b      	str	r3, [r1, #4]
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 f82f 	bl	8008c90 <__malloc_unlock>
 8008c32:	f104 000b 	add.w	r0, r4, #11
 8008c36:	1d23      	adds	r3, r4, #4
 8008c38:	f020 0007 	bic.w	r0, r0, #7
 8008c3c:	1ac2      	subs	r2, r0, r3
 8008c3e:	bf1c      	itt	ne
 8008c40:	1a1b      	subne	r3, r3, r0
 8008c42:	50a3      	strne	r3, [r4, r2]
 8008c44:	e7af      	b.n	8008ba6 <_malloc_r+0x22>
 8008c46:	6862      	ldr	r2, [r4, #4]
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	bf0c      	ite	eq
 8008c4c:	f8c8 2000 	streq.w	r2, [r8]
 8008c50:	605a      	strne	r2, [r3, #4]
 8008c52:	e7eb      	b.n	8008c2c <_malloc_r+0xa8>
 8008c54:	4623      	mov	r3, r4
 8008c56:	6864      	ldr	r4, [r4, #4]
 8008c58:	e7ae      	b.n	8008bb8 <_malloc_r+0x34>
 8008c5a:	463c      	mov	r4, r7
 8008c5c:	687f      	ldr	r7, [r7, #4]
 8008c5e:	e7b6      	b.n	8008bce <_malloc_r+0x4a>
 8008c60:	461a      	mov	r2, r3
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d1fb      	bne.n	8008c60 <_malloc_r+0xdc>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6053      	str	r3, [r2, #4]
 8008c6c:	e7de      	b.n	8008c2c <_malloc_r+0xa8>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	6033      	str	r3, [r6, #0]
 8008c72:	4630      	mov	r0, r6
 8008c74:	f000 f80c 	bl	8008c90 <__malloc_unlock>
 8008c78:	e794      	b.n	8008ba4 <_malloc_r+0x20>
 8008c7a:	6005      	str	r5, [r0, #0]
 8008c7c:	e7d6      	b.n	8008c2c <_malloc_r+0xa8>
 8008c7e:	bf00      	nop
 8008c80:	20013128 	.word	0x20013128

08008c84 <__malloc_lock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	@ (8008c8c <__malloc_lock+0x8>)
 8008c86:	f7ff bf00 	b.w	8008a8a <__retarget_lock_acquire_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	20013120 	.word	0x20013120

08008c90 <__malloc_unlock>:
 8008c90:	4801      	ldr	r0, [pc, #4]	@ (8008c98 <__malloc_unlock+0x8>)
 8008c92:	f7ff befb 	b.w	8008a8c <__retarget_lock_release_recursive>
 8008c96:	bf00      	nop
 8008c98:	20013120 	.word	0x20013120

08008c9c <__ssputs_r>:
 8008c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca0:	688e      	ldr	r6, [r1, #8]
 8008ca2:	461f      	mov	r7, r3
 8008ca4:	42be      	cmp	r6, r7
 8008ca6:	680b      	ldr	r3, [r1, #0]
 8008ca8:	4682      	mov	sl, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	4690      	mov	r8, r2
 8008cae:	d82d      	bhi.n	8008d0c <__ssputs_r+0x70>
 8008cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cb8:	d026      	beq.n	8008d08 <__ssputs_r+0x6c>
 8008cba:	6965      	ldr	r5, [r4, #20]
 8008cbc:	6909      	ldr	r1, [r1, #16]
 8008cbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cc2:	eba3 0901 	sub.w	r9, r3, r1
 8008cc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cca:	1c7b      	adds	r3, r7, #1
 8008ccc:	444b      	add	r3, r9
 8008cce:	106d      	asrs	r5, r5, #1
 8008cd0:	429d      	cmp	r5, r3
 8008cd2:	bf38      	it	cc
 8008cd4:	461d      	movcc	r5, r3
 8008cd6:	0553      	lsls	r3, r2, #21
 8008cd8:	d527      	bpl.n	8008d2a <__ssputs_r+0x8e>
 8008cda:	4629      	mov	r1, r5
 8008cdc:	f7ff ff52 	bl	8008b84 <_malloc_r>
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	b360      	cbz	r0, 8008d3e <__ssputs_r+0xa2>
 8008ce4:	6921      	ldr	r1, [r4, #16]
 8008ce6:	464a      	mov	r2, r9
 8008ce8:	f7ff fed1 	bl	8008a8e <memcpy>
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	6126      	str	r6, [r4, #16]
 8008cfa:	6165      	str	r5, [r4, #20]
 8008cfc:	444e      	add	r6, r9
 8008cfe:	eba5 0509 	sub.w	r5, r5, r9
 8008d02:	6026      	str	r6, [r4, #0]
 8008d04:	60a5      	str	r5, [r4, #8]
 8008d06:	463e      	mov	r6, r7
 8008d08:	42be      	cmp	r6, r7
 8008d0a:	d900      	bls.n	8008d0e <__ssputs_r+0x72>
 8008d0c:	463e      	mov	r6, r7
 8008d0e:	6820      	ldr	r0, [r4, #0]
 8008d10:	4632      	mov	r2, r6
 8008d12:	4641      	mov	r1, r8
 8008d14:	f000 fd2a 	bl	800976c <memmove>
 8008d18:	68a3      	ldr	r3, [r4, #8]
 8008d1a:	1b9b      	subs	r3, r3, r6
 8008d1c:	60a3      	str	r3, [r4, #8]
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	4433      	add	r3, r6
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	2000      	movs	r0, #0
 8008d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	f000 fd48 	bl	80097c0 <_realloc_r>
 8008d30:	4606      	mov	r6, r0
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d1e0      	bne.n	8008cf8 <__ssputs_r+0x5c>
 8008d36:	6921      	ldr	r1, [r4, #16]
 8008d38:	4650      	mov	r0, sl
 8008d3a:	f7ff feb7 	bl	8008aac <_free_r>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	f8ca 3000 	str.w	r3, [sl]
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d4a:	81a3      	strh	r3, [r4, #12]
 8008d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d50:	e7e9      	b.n	8008d26 <__ssputs_r+0x8a>
	...

08008d54 <_svfiprintf_r>:
 8008d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	4698      	mov	r8, r3
 8008d5a:	898b      	ldrh	r3, [r1, #12]
 8008d5c:	061b      	lsls	r3, r3, #24
 8008d5e:	b09d      	sub	sp, #116	@ 0x74
 8008d60:	4607      	mov	r7, r0
 8008d62:	460d      	mov	r5, r1
 8008d64:	4614      	mov	r4, r2
 8008d66:	d510      	bpl.n	8008d8a <_svfiprintf_r+0x36>
 8008d68:	690b      	ldr	r3, [r1, #16]
 8008d6a:	b973      	cbnz	r3, 8008d8a <_svfiprintf_r+0x36>
 8008d6c:	2140      	movs	r1, #64	@ 0x40
 8008d6e:	f7ff ff09 	bl	8008b84 <_malloc_r>
 8008d72:	6028      	str	r0, [r5, #0]
 8008d74:	6128      	str	r0, [r5, #16]
 8008d76:	b930      	cbnz	r0, 8008d86 <_svfiprintf_r+0x32>
 8008d78:	230c      	movs	r3, #12
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d80:	b01d      	add	sp, #116	@ 0x74
 8008d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d86:	2340      	movs	r3, #64	@ 0x40
 8008d88:	616b      	str	r3, [r5, #20]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d8e:	2320      	movs	r3, #32
 8008d90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d98:	2330      	movs	r3, #48	@ 0x30
 8008d9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f38 <_svfiprintf_r+0x1e4>
 8008d9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008da2:	f04f 0901 	mov.w	r9, #1
 8008da6:	4623      	mov	r3, r4
 8008da8:	469a      	mov	sl, r3
 8008daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dae:	b10a      	cbz	r2, 8008db4 <_svfiprintf_r+0x60>
 8008db0:	2a25      	cmp	r2, #37	@ 0x25
 8008db2:	d1f9      	bne.n	8008da8 <_svfiprintf_r+0x54>
 8008db4:	ebba 0b04 	subs.w	fp, sl, r4
 8008db8:	d00b      	beq.n	8008dd2 <_svfiprintf_r+0x7e>
 8008dba:	465b      	mov	r3, fp
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f7ff ff6b 	bl	8008c9c <__ssputs_r>
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	f000 80a7 	beq.w	8008f1a <_svfiprintf_r+0x1c6>
 8008dcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dce:	445a      	add	r2, fp
 8008dd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 809f 	beq.w	8008f1a <_svfiprintf_r+0x1c6>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f04f 32ff 	mov.w	r2, #4294967295
 8008de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de6:	f10a 0a01 	add.w	sl, sl, #1
 8008dea:	9304      	str	r3, [sp, #16]
 8008dec:	9307      	str	r3, [sp, #28]
 8008dee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008df2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008df4:	4654      	mov	r4, sl
 8008df6:	2205      	movs	r2, #5
 8008df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfc:	484e      	ldr	r0, [pc, #312]	@ (8008f38 <_svfiprintf_r+0x1e4>)
 8008dfe:	f7f7 fa1f 	bl	8000240 <memchr>
 8008e02:	9a04      	ldr	r2, [sp, #16]
 8008e04:	b9d8      	cbnz	r0, 8008e3e <_svfiprintf_r+0xea>
 8008e06:	06d0      	lsls	r0, r2, #27
 8008e08:	bf44      	itt	mi
 8008e0a:	2320      	movmi	r3, #32
 8008e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e10:	0711      	lsls	r1, r2, #28
 8008e12:	bf44      	itt	mi
 8008e14:	232b      	movmi	r3, #43	@ 0x2b
 8008e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e20:	d015      	beq.n	8008e4e <_svfiprintf_r+0xfa>
 8008e22:	9a07      	ldr	r2, [sp, #28]
 8008e24:	4654      	mov	r4, sl
 8008e26:	2000      	movs	r0, #0
 8008e28:	f04f 0c0a 	mov.w	ip, #10
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e32:	3b30      	subs	r3, #48	@ 0x30
 8008e34:	2b09      	cmp	r3, #9
 8008e36:	d94b      	bls.n	8008ed0 <_svfiprintf_r+0x17c>
 8008e38:	b1b0      	cbz	r0, 8008e68 <_svfiprintf_r+0x114>
 8008e3a:	9207      	str	r2, [sp, #28]
 8008e3c:	e014      	b.n	8008e68 <_svfiprintf_r+0x114>
 8008e3e:	eba0 0308 	sub.w	r3, r0, r8
 8008e42:	fa09 f303 	lsl.w	r3, r9, r3
 8008e46:	4313      	orrs	r3, r2
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	46a2      	mov	sl, r4
 8008e4c:	e7d2      	b.n	8008df4 <_svfiprintf_r+0xa0>
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	1d19      	adds	r1, r3, #4
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	9103      	str	r1, [sp, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bfbb      	ittet	lt
 8008e5a:	425b      	neglt	r3, r3
 8008e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e60:	9307      	strge	r3, [sp, #28]
 8008e62:	9307      	strlt	r3, [sp, #28]
 8008e64:	bfb8      	it	lt
 8008e66:	9204      	strlt	r2, [sp, #16]
 8008e68:	7823      	ldrb	r3, [r4, #0]
 8008e6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e6c:	d10a      	bne.n	8008e84 <_svfiprintf_r+0x130>
 8008e6e:	7863      	ldrb	r3, [r4, #1]
 8008e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e72:	d132      	bne.n	8008eda <_svfiprintf_r+0x186>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	9203      	str	r2, [sp, #12]
 8008e7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e80:	3402      	adds	r4, #2
 8008e82:	9305      	str	r3, [sp, #20]
 8008e84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f48 <_svfiprintf_r+0x1f4>
 8008e88:	7821      	ldrb	r1, [r4, #0]
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	4650      	mov	r0, sl
 8008e8e:	f7f7 f9d7 	bl	8000240 <memchr>
 8008e92:	b138      	cbz	r0, 8008ea4 <_svfiprintf_r+0x150>
 8008e94:	9b04      	ldr	r3, [sp, #16]
 8008e96:	eba0 000a 	sub.w	r0, r0, sl
 8008e9a:	2240      	movs	r2, #64	@ 0x40
 8008e9c:	4082      	lsls	r2, r0
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	3401      	adds	r4, #1
 8008ea2:	9304      	str	r3, [sp, #16]
 8008ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea8:	4824      	ldr	r0, [pc, #144]	@ (8008f3c <_svfiprintf_r+0x1e8>)
 8008eaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eae:	2206      	movs	r2, #6
 8008eb0:	f7f7 f9c6 	bl	8000240 <memchr>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d036      	beq.n	8008f26 <_svfiprintf_r+0x1d2>
 8008eb8:	4b21      	ldr	r3, [pc, #132]	@ (8008f40 <_svfiprintf_r+0x1ec>)
 8008eba:	bb1b      	cbnz	r3, 8008f04 <_svfiprintf_r+0x1b0>
 8008ebc:	9b03      	ldr	r3, [sp, #12]
 8008ebe:	3307      	adds	r3, #7
 8008ec0:	f023 0307 	bic.w	r3, r3, #7
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	9303      	str	r3, [sp, #12]
 8008ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eca:	4433      	add	r3, r6
 8008ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ece:	e76a      	b.n	8008da6 <_svfiprintf_r+0x52>
 8008ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	2001      	movs	r0, #1
 8008ed8:	e7a8      	b.n	8008e2c <_svfiprintf_r+0xd8>
 8008eda:	2300      	movs	r3, #0
 8008edc:	3401      	adds	r4, #1
 8008ede:	9305      	str	r3, [sp, #20]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	f04f 0c0a 	mov.w	ip, #10
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eec:	3a30      	subs	r2, #48	@ 0x30
 8008eee:	2a09      	cmp	r2, #9
 8008ef0:	d903      	bls.n	8008efa <_svfiprintf_r+0x1a6>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0c6      	beq.n	8008e84 <_svfiprintf_r+0x130>
 8008ef6:	9105      	str	r1, [sp, #20]
 8008ef8:	e7c4      	b.n	8008e84 <_svfiprintf_r+0x130>
 8008efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8008efe:	4604      	mov	r4, r0
 8008f00:	2301      	movs	r3, #1
 8008f02:	e7f0      	b.n	8008ee6 <_svfiprintf_r+0x192>
 8008f04:	ab03      	add	r3, sp, #12
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	462a      	mov	r2, r5
 8008f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008f44 <_svfiprintf_r+0x1f0>)
 8008f0c:	a904      	add	r1, sp, #16
 8008f0e:	4638      	mov	r0, r7
 8008f10:	f3af 8000 	nop.w
 8008f14:	1c42      	adds	r2, r0, #1
 8008f16:	4606      	mov	r6, r0
 8008f18:	d1d6      	bne.n	8008ec8 <_svfiprintf_r+0x174>
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	065b      	lsls	r3, r3, #25
 8008f1e:	f53f af2d 	bmi.w	8008d7c <_svfiprintf_r+0x28>
 8008f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f24:	e72c      	b.n	8008d80 <_svfiprintf_r+0x2c>
 8008f26:	ab03      	add	r3, sp, #12
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	462a      	mov	r2, r5
 8008f2c:	4b05      	ldr	r3, [pc, #20]	@ (8008f44 <_svfiprintf_r+0x1f0>)
 8008f2e:	a904      	add	r1, sp, #16
 8008f30:	4638      	mov	r0, r7
 8008f32:	f000 f9bb 	bl	80092ac <_printf_i>
 8008f36:	e7ed      	b.n	8008f14 <_svfiprintf_r+0x1c0>
 8008f38:	08009f8c 	.word	0x08009f8c
 8008f3c:	08009f96 	.word	0x08009f96
 8008f40:	00000000 	.word	0x00000000
 8008f44:	08008c9d 	.word	0x08008c9d
 8008f48:	08009f92 	.word	0x08009f92

08008f4c <__sfputc_r>:
 8008f4c:	6893      	ldr	r3, [r2, #8]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	b410      	push	{r4}
 8008f54:	6093      	str	r3, [r2, #8]
 8008f56:	da08      	bge.n	8008f6a <__sfputc_r+0x1e>
 8008f58:	6994      	ldr	r4, [r2, #24]
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	db01      	blt.n	8008f62 <__sfputc_r+0x16>
 8008f5e:	290a      	cmp	r1, #10
 8008f60:	d103      	bne.n	8008f6a <__sfputc_r+0x1e>
 8008f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f66:	f000 bb6d 	b.w	8009644 <__swbuf_r>
 8008f6a:	6813      	ldr	r3, [r2, #0]
 8008f6c:	1c58      	adds	r0, r3, #1
 8008f6e:	6010      	str	r0, [r2, #0]
 8008f70:	7019      	strb	r1, [r3, #0]
 8008f72:	4608      	mov	r0, r1
 8008f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <__sfputs_r>:
 8008f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	4614      	mov	r4, r2
 8008f82:	18d5      	adds	r5, r2, r3
 8008f84:	42ac      	cmp	r4, r5
 8008f86:	d101      	bne.n	8008f8c <__sfputs_r+0x12>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e007      	b.n	8008f9c <__sfputs_r+0x22>
 8008f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f90:	463a      	mov	r2, r7
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff ffda 	bl	8008f4c <__sfputc_r>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d1f3      	bne.n	8008f84 <__sfputs_r+0xa>
 8008f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fa0 <_vfiprintf_r>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	b09d      	sub	sp, #116	@ 0x74
 8008fa8:	4614      	mov	r4, r2
 8008faa:	4698      	mov	r8, r3
 8008fac:	4606      	mov	r6, r0
 8008fae:	b118      	cbz	r0, 8008fb8 <_vfiprintf_r+0x18>
 8008fb0:	6a03      	ldr	r3, [r0, #32]
 8008fb2:	b90b      	cbnz	r3, 8008fb8 <_vfiprintf_r+0x18>
 8008fb4:	f7ff fc44 	bl	8008840 <__sinit>
 8008fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fba:	07d9      	lsls	r1, r3, #31
 8008fbc:	d405      	bmi.n	8008fca <_vfiprintf_r+0x2a>
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	059a      	lsls	r2, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_vfiprintf_r+0x2a>
 8008fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fc6:	f7ff fd60 	bl	8008a8a <__retarget_lock_acquire_recursive>
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	071b      	lsls	r3, r3, #28
 8008fce:	d501      	bpl.n	8008fd4 <_vfiprintf_r+0x34>
 8008fd0:	692b      	ldr	r3, [r5, #16]
 8008fd2:	b99b      	cbnz	r3, 8008ffc <_vfiprintf_r+0x5c>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 fb72 	bl	80096c0 <__swsetup_r>
 8008fdc:	b170      	cbz	r0, 8008ffc <_vfiprintf_r+0x5c>
 8008fde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fe0:	07dc      	lsls	r4, r3, #31
 8008fe2:	d504      	bpl.n	8008fee <_vfiprintf_r+0x4e>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	b01d      	add	sp, #116	@ 0x74
 8008fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fee:	89ab      	ldrh	r3, [r5, #12]
 8008ff0:	0598      	lsls	r0, r3, #22
 8008ff2:	d4f7      	bmi.n	8008fe4 <_vfiprintf_r+0x44>
 8008ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ff6:	f7ff fd49 	bl	8008a8c <__retarget_lock_release_recursive>
 8008ffa:	e7f3      	b.n	8008fe4 <_vfiprintf_r+0x44>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009000:	2320      	movs	r3, #32
 8009002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009006:	f8cd 800c 	str.w	r8, [sp, #12]
 800900a:	2330      	movs	r3, #48	@ 0x30
 800900c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091bc <_vfiprintf_r+0x21c>
 8009010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009014:	f04f 0901 	mov.w	r9, #1
 8009018:	4623      	mov	r3, r4
 800901a:	469a      	mov	sl, r3
 800901c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009020:	b10a      	cbz	r2, 8009026 <_vfiprintf_r+0x86>
 8009022:	2a25      	cmp	r2, #37	@ 0x25
 8009024:	d1f9      	bne.n	800901a <_vfiprintf_r+0x7a>
 8009026:	ebba 0b04 	subs.w	fp, sl, r4
 800902a:	d00b      	beq.n	8009044 <_vfiprintf_r+0xa4>
 800902c:	465b      	mov	r3, fp
 800902e:	4622      	mov	r2, r4
 8009030:	4629      	mov	r1, r5
 8009032:	4630      	mov	r0, r6
 8009034:	f7ff ffa1 	bl	8008f7a <__sfputs_r>
 8009038:	3001      	adds	r0, #1
 800903a:	f000 80a7 	beq.w	800918c <_vfiprintf_r+0x1ec>
 800903e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009040:	445a      	add	r2, fp
 8009042:	9209      	str	r2, [sp, #36]	@ 0x24
 8009044:	f89a 3000 	ldrb.w	r3, [sl]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 809f 	beq.w	800918c <_vfiprintf_r+0x1ec>
 800904e:	2300      	movs	r3, #0
 8009050:	f04f 32ff 	mov.w	r2, #4294967295
 8009054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009058:	f10a 0a01 	add.w	sl, sl, #1
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	9307      	str	r3, [sp, #28]
 8009060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009064:	931a      	str	r3, [sp, #104]	@ 0x68
 8009066:	4654      	mov	r4, sl
 8009068:	2205      	movs	r2, #5
 800906a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906e:	4853      	ldr	r0, [pc, #332]	@ (80091bc <_vfiprintf_r+0x21c>)
 8009070:	f7f7 f8e6 	bl	8000240 <memchr>
 8009074:	9a04      	ldr	r2, [sp, #16]
 8009076:	b9d8      	cbnz	r0, 80090b0 <_vfiprintf_r+0x110>
 8009078:	06d1      	lsls	r1, r2, #27
 800907a:	bf44      	itt	mi
 800907c:	2320      	movmi	r3, #32
 800907e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009082:	0713      	lsls	r3, r2, #28
 8009084:	bf44      	itt	mi
 8009086:	232b      	movmi	r3, #43	@ 0x2b
 8009088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800908c:	f89a 3000 	ldrb.w	r3, [sl]
 8009090:	2b2a      	cmp	r3, #42	@ 0x2a
 8009092:	d015      	beq.n	80090c0 <_vfiprintf_r+0x120>
 8009094:	9a07      	ldr	r2, [sp, #28]
 8009096:	4654      	mov	r4, sl
 8009098:	2000      	movs	r0, #0
 800909a:	f04f 0c0a 	mov.w	ip, #10
 800909e:	4621      	mov	r1, r4
 80090a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090a4:	3b30      	subs	r3, #48	@ 0x30
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d94b      	bls.n	8009142 <_vfiprintf_r+0x1a2>
 80090aa:	b1b0      	cbz	r0, 80090da <_vfiprintf_r+0x13a>
 80090ac:	9207      	str	r2, [sp, #28]
 80090ae:	e014      	b.n	80090da <_vfiprintf_r+0x13a>
 80090b0:	eba0 0308 	sub.w	r3, r0, r8
 80090b4:	fa09 f303 	lsl.w	r3, r9, r3
 80090b8:	4313      	orrs	r3, r2
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	46a2      	mov	sl, r4
 80090be:	e7d2      	b.n	8009066 <_vfiprintf_r+0xc6>
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	1d19      	adds	r1, r3, #4
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	9103      	str	r1, [sp, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bfbb      	ittet	lt
 80090cc:	425b      	neglt	r3, r3
 80090ce:	f042 0202 	orrlt.w	r2, r2, #2
 80090d2:	9307      	strge	r3, [sp, #28]
 80090d4:	9307      	strlt	r3, [sp, #28]
 80090d6:	bfb8      	it	lt
 80090d8:	9204      	strlt	r2, [sp, #16]
 80090da:	7823      	ldrb	r3, [r4, #0]
 80090dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80090de:	d10a      	bne.n	80090f6 <_vfiprintf_r+0x156>
 80090e0:	7863      	ldrb	r3, [r4, #1]
 80090e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e4:	d132      	bne.n	800914c <_vfiprintf_r+0x1ac>
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	1d1a      	adds	r2, r3, #4
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	9203      	str	r2, [sp, #12]
 80090ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090f2:	3402      	adds	r4, #2
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091cc <_vfiprintf_r+0x22c>
 80090fa:	7821      	ldrb	r1, [r4, #0]
 80090fc:	2203      	movs	r2, #3
 80090fe:	4650      	mov	r0, sl
 8009100:	f7f7 f89e 	bl	8000240 <memchr>
 8009104:	b138      	cbz	r0, 8009116 <_vfiprintf_r+0x176>
 8009106:	9b04      	ldr	r3, [sp, #16]
 8009108:	eba0 000a 	sub.w	r0, r0, sl
 800910c:	2240      	movs	r2, #64	@ 0x40
 800910e:	4082      	lsls	r2, r0
 8009110:	4313      	orrs	r3, r2
 8009112:	3401      	adds	r4, #1
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911a:	4829      	ldr	r0, [pc, #164]	@ (80091c0 <_vfiprintf_r+0x220>)
 800911c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009120:	2206      	movs	r2, #6
 8009122:	f7f7 f88d 	bl	8000240 <memchr>
 8009126:	2800      	cmp	r0, #0
 8009128:	d03f      	beq.n	80091aa <_vfiprintf_r+0x20a>
 800912a:	4b26      	ldr	r3, [pc, #152]	@ (80091c4 <_vfiprintf_r+0x224>)
 800912c:	bb1b      	cbnz	r3, 8009176 <_vfiprintf_r+0x1d6>
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	3307      	adds	r3, #7
 8009132:	f023 0307 	bic.w	r3, r3, #7
 8009136:	3308      	adds	r3, #8
 8009138:	9303      	str	r3, [sp, #12]
 800913a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913c:	443b      	add	r3, r7
 800913e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009140:	e76a      	b.n	8009018 <_vfiprintf_r+0x78>
 8009142:	fb0c 3202 	mla	r2, ip, r2, r3
 8009146:	460c      	mov	r4, r1
 8009148:	2001      	movs	r0, #1
 800914a:	e7a8      	b.n	800909e <_vfiprintf_r+0xfe>
 800914c:	2300      	movs	r3, #0
 800914e:	3401      	adds	r4, #1
 8009150:	9305      	str	r3, [sp, #20]
 8009152:	4619      	mov	r1, r3
 8009154:	f04f 0c0a 	mov.w	ip, #10
 8009158:	4620      	mov	r0, r4
 800915a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800915e:	3a30      	subs	r2, #48	@ 0x30
 8009160:	2a09      	cmp	r2, #9
 8009162:	d903      	bls.n	800916c <_vfiprintf_r+0x1cc>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0c6      	beq.n	80090f6 <_vfiprintf_r+0x156>
 8009168:	9105      	str	r1, [sp, #20]
 800916a:	e7c4      	b.n	80090f6 <_vfiprintf_r+0x156>
 800916c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009170:	4604      	mov	r4, r0
 8009172:	2301      	movs	r3, #1
 8009174:	e7f0      	b.n	8009158 <_vfiprintf_r+0x1b8>
 8009176:	ab03      	add	r3, sp, #12
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	462a      	mov	r2, r5
 800917c:	4b12      	ldr	r3, [pc, #72]	@ (80091c8 <_vfiprintf_r+0x228>)
 800917e:	a904      	add	r1, sp, #16
 8009180:	4630      	mov	r0, r6
 8009182:	f3af 8000 	nop.w
 8009186:	4607      	mov	r7, r0
 8009188:	1c78      	adds	r0, r7, #1
 800918a:	d1d6      	bne.n	800913a <_vfiprintf_r+0x19a>
 800918c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800918e:	07d9      	lsls	r1, r3, #31
 8009190:	d405      	bmi.n	800919e <_vfiprintf_r+0x1fe>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	059a      	lsls	r2, r3, #22
 8009196:	d402      	bmi.n	800919e <_vfiprintf_r+0x1fe>
 8009198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800919a:	f7ff fc77 	bl	8008a8c <__retarget_lock_release_recursive>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	065b      	lsls	r3, r3, #25
 80091a2:	f53f af1f 	bmi.w	8008fe4 <_vfiprintf_r+0x44>
 80091a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091a8:	e71e      	b.n	8008fe8 <_vfiprintf_r+0x48>
 80091aa:	ab03      	add	r3, sp, #12
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	462a      	mov	r2, r5
 80091b0:	4b05      	ldr	r3, [pc, #20]	@ (80091c8 <_vfiprintf_r+0x228>)
 80091b2:	a904      	add	r1, sp, #16
 80091b4:	4630      	mov	r0, r6
 80091b6:	f000 f879 	bl	80092ac <_printf_i>
 80091ba:	e7e4      	b.n	8009186 <_vfiprintf_r+0x1e6>
 80091bc:	08009f8c 	.word	0x08009f8c
 80091c0:	08009f96 	.word	0x08009f96
 80091c4:	00000000 	.word	0x00000000
 80091c8:	08008f7b 	.word	0x08008f7b
 80091cc:	08009f92 	.word	0x08009f92

080091d0 <_printf_common>:
 80091d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	4616      	mov	r6, r2
 80091d6:	4698      	mov	r8, r3
 80091d8:	688a      	ldr	r2, [r1, #8]
 80091da:	690b      	ldr	r3, [r1, #16]
 80091dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091e0:	4293      	cmp	r3, r2
 80091e2:	bfb8      	it	lt
 80091e4:	4613      	movlt	r3, r2
 80091e6:	6033      	str	r3, [r6, #0]
 80091e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091ec:	4607      	mov	r7, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	b10a      	cbz	r2, 80091f6 <_printf_common+0x26>
 80091f2:	3301      	adds	r3, #1
 80091f4:	6033      	str	r3, [r6, #0]
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	0699      	lsls	r1, r3, #26
 80091fa:	bf42      	ittt	mi
 80091fc:	6833      	ldrmi	r3, [r6, #0]
 80091fe:	3302      	addmi	r3, #2
 8009200:	6033      	strmi	r3, [r6, #0]
 8009202:	6825      	ldr	r5, [r4, #0]
 8009204:	f015 0506 	ands.w	r5, r5, #6
 8009208:	d106      	bne.n	8009218 <_printf_common+0x48>
 800920a:	f104 0a19 	add.w	sl, r4, #25
 800920e:	68e3      	ldr	r3, [r4, #12]
 8009210:	6832      	ldr	r2, [r6, #0]
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	42ab      	cmp	r3, r5
 8009216:	dc26      	bgt.n	8009266 <_printf_common+0x96>
 8009218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800921c:	6822      	ldr	r2, [r4, #0]
 800921e:	3b00      	subs	r3, #0
 8009220:	bf18      	it	ne
 8009222:	2301      	movne	r3, #1
 8009224:	0692      	lsls	r2, r2, #26
 8009226:	d42b      	bmi.n	8009280 <_printf_common+0xb0>
 8009228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800922c:	4641      	mov	r1, r8
 800922e:	4638      	mov	r0, r7
 8009230:	47c8      	blx	r9
 8009232:	3001      	adds	r0, #1
 8009234:	d01e      	beq.n	8009274 <_printf_common+0xa4>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	6922      	ldr	r2, [r4, #16]
 800923a:	f003 0306 	and.w	r3, r3, #6
 800923e:	2b04      	cmp	r3, #4
 8009240:	bf02      	ittt	eq
 8009242:	68e5      	ldreq	r5, [r4, #12]
 8009244:	6833      	ldreq	r3, [r6, #0]
 8009246:	1aed      	subeq	r5, r5, r3
 8009248:	68a3      	ldr	r3, [r4, #8]
 800924a:	bf0c      	ite	eq
 800924c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009250:	2500      	movne	r5, #0
 8009252:	4293      	cmp	r3, r2
 8009254:	bfc4      	itt	gt
 8009256:	1a9b      	subgt	r3, r3, r2
 8009258:	18ed      	addgt	r5, r5, r3
 800925a:	2600      	movs	r6, #0
 800925c:	341a      	adds	r4, #26
 800925e:	42b5      	cmp	r5, r6
 8009260:	d11a      	bne.n	8009298 <_printf_common+0xc8>
 8009262:	2000      	movs	r0, #0
 8009264:	e008      	b.n	8009278 <_printf_common+0xa8>
 8009266:	2301      	movs	r3, #1
 8009268:	4652      	mov	r2, sl
 800926a:	4641      	mov	r1, r8
 800926c:	4638      	mov	r0, r7
 800926e:	47c8      	blx	r9
 8009270:	3001      	adds	r0, #1
 8009272:	d103      	bne.n	800927c <_printf_common+0xac>
 8009274:	f04f 30ff 	mov.w	r0, #4294967295
 8009278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927c:	3501      	adds	r5, #1
 800927e:	e7c6      	b.n	800920e <_printf_common+0x3e>
 8009280:	18e1      	adds	r1, r4, r3
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	2030      	movs	r0, #48	@ 0x30
 8009286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800928a:	4422      	add	r2, r4
 800928c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009294:	3302      	adds	r3, #2
 8009296:	e7c7      	b.n	8009228 <_printf_common+0x58>
 8009298:	2301      	movs	r3, #1
 800929a:	4622      	mov	r2, r4
 800929c:	4641      	mov	r1, r8
 800929e:	4638      	mov	r0, r7
 80092a0:	47c8      	blx	r9
 80092a2:	3001      	adds	r0, #1
 80092a4:	d0e6      	beq.n	8009274 <_printf_common+0xa4>
 80092a6:	3601      	adds	r6, #1
 80092a8:	e7d9      	b.n	800925e <_printf_common+0x8e>
	...

080092ac <_printf_i>:
 80092ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	7e0f      	ldrb	r7, [r1, #24]
 80092b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092b4:	2f78      	cmp	r7, #120	@ 0x78
 80092b6:	4691      	mov	r9, r2
 80092b8:	4680      	mov	r8, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	469a      	mov	sl, r3
 80092be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092c2:	d807      	bhi.n	80092d4 <_printf_i+0x28>
 80092c4:	2f62      	cmp	r7, #98	@ 0x62
 80092c6:	d80a      	bhi.n	80092de <_printf_i+0x32>
 80092c8:	2f00      	cmp	r7, #0
 80092ca:	f000 80d2 	beq.w	8009472 <_printf_i+0x1c6>
 80092ce:	2f58      	cmp	r7, #88	@ 0x58
 80092d0:	f000 80b9 	beq.w	8009446 <_printf_i+0x19a>
 80092d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092dc:	e03a      	b.n	8009354 <_printf_i+0xa8>
 80092de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092e2:	2b15      	cmp	r3, #21
 80092e4:	d8f6      	bhi.n	80092d4 <_printf_i+0x28>
 80092e6:	a101      	add	r1, pc, #4	@ (adr r1, 80092ec <_printf_i+0x40>)
 80092e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092ec:	08009345 	.word	0x08009345
 80092f0:	08009359 	.word	0x08009359
 80092f4:	080092d5 	.word	0x080092d5
 80092f8:	080092d5 	.word	0x080092d5
 80092fc:	080092d5 	.word	0x080092d5
 8009300:	080092d5 	.word	0x080092d5
 8009304:	08009359 	.word	0x08009359
 8009308:	080092d5 	.word	0x080092d5
 800930c:	080092d5 	.word	0x080092d5
 8009310:	080092d5 	.word	0x080092d5
 8009314:	080092d5 	.word	0x080092d5
 8009318:	08009459 	.word	0x08009459
 800931c:	08009383 	.word	0x08009383
 8009320:	08009413 	.word	0x08009413
 8009324:	080092d5 	.word	0x080092d5
 8009328:	080092d5 	.word	0x080092d5
 800932c:	0800947b 	.word	0x0800947b
 8009330:	080092d5 	.word	0x080092d5
 8009334:	08009383 	.word	0x08009383
 8009338:	080092d5 	.word	0x080092d5
 800933c:	080092d5 	.word	0x080092d5
 8009340:	0800941b 	.word	0x0800941b
 8009344:	6833      	ldr	r3, [r6, #0]
 8009346:	1d1a      	adds	r2, r3, #4
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6032      	str	r2, [r6, #0]
 800934c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009354:	2301      	movs	r3, #1
 8009356:	e09d      	b.n	8009494 <_printf_i+0x1e8>
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	6820      	ldr	r0, [r4, #0]
 800935c:	1d19      	adds	r1, r3, #4
 800935e:	6031      	str	r1, [r6, #0]
 8009360:	0606      	lsls	r6, r0, #24
 8009362:	d501      	bpl.n	8009368 <_printf_i+0xbc>
 8009364:	681d      	ldr	r5, [r3, #0]
 8009366:	e003      	b.n	8009370 <_printf_i+0xc4>
 8009368:	0645      	lsls	r5, r0, #25
 800936a:	d5fb      	bpl.n	8009364 <_printf_i+0xb8>
 800936c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009370:	2d00      	cmp	r5, #0
 8009372:	da03      	bge.n	800937c <_printf_i+0xd0>
 8009374:	232d      	movs	r3, #45	@ 0x2d
 8009376:	426d      	negs	r5, r5
 8009378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800937c:	4859      	ldr	r0, [pc, #356]	@ (80094e4 <_printf_i+0x238>)
 800937e:	230a      	movs	r3, #10
 8009380:	e011      	b.n	80093a6 <_printf_i+0xfa>
 8009382:	6821      	ldr	r1, [r4, #0]
 8009384:	6833      	ldr	r3, [r6, #0]
 8009386:	0608      	lsls	r0, r1, #24
 8009388:	f853 5b04 	ldr.w	r5, [r3], #4
 800938c:	d402      	bmi.n	8009394 <_printf_i+0xe8>
 800938e:	0649      	lsls	r1, r1, #25
 8009390:	bf48      	it	mi
 8009392:	b2ad      	uxthmi	r5, r5
 8009394:	2f6f      	cmp	r7, #111	@ 0x6f
 8009396:	4853      	ldr	r0, [pc, #332]	@ (80094e4 <_printf_i+0x238>)
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	bf14      	ite	ne
 800939c:	230a      	movne	r3, #10
 800939e:	2308      	moveq	r3, #8
 80093a0:	2100      	movs	r1, #0
 80093a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093a6:	6866      	ldr	r6, [r4, #4]
 80093a8:	60a6      	str	r6, [r4, #8]
 80093aa:	2e00      	cmp	r6, #0
 80093ac:	bfa2      	ittt	ge
 80093ae:	6821      	ldrge	r1, [r4, #0]
 80093b0:	f021 0104 	bicge.w	r1, r1, #4
 80093b4:	6021      	strge	r1, [r4, #0]
 80093b6:	b90d      	cbnz	r5, 80093bc <_printf_i+0x110>
 80093b8:	2e00      	cmp	r6, #0
 80093ba:	d04b      	beq.n	8009454 <_printf_i+0x1a8>
 80093bc:	4616      	mov	r6, r2
 80093be:	fbb5 f1f3 	udiv	r1, r5, r3
 80093c2:	fb03 5711 	mls	r7, r3, r1, r5
 80093c6:	5dc7      	ldrb	r7, [r0, r7]
 80093c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093cc:	462f      	mov	r7, r5
 80093ce:	42bb      	cmp	r3, r7
 80093d0:	460d      	mov	r5, r1
 80093d2:	d9f4      	bls.n	80093be <_printf_i+0x112>
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d10b      	bne.n	80093f0 <_printf_i+0x144>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	07df      	lsls	r7, r3, #31
 80093dc:	d508      	bpl.n	80093f0 <_printf_i+0x144>
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	6861      	ldr	r1, [r4, #4]
 80093e2:	4299      	cmp	r1, r3
 80093e4:	bfde      	ittt	le
 80093e6:	2330      	movle	r3, #48	@ 0x30
 80093e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093f0:	1b92      	subs	r2, r2, r6
 80093f2:	6122      	str	r2, [r4, #16]
 80093f4:	f8cd a000 	str.w	sl, [sp]
 80093f8:	464b      	mov	r3, r9
 80093fa:	aa03      	add	r2, sp, #12
 80093fc:	4621      	mov	r1, r4
 80093fe:	4640      	mov	r0, r8
 8009400:	f7ff fee6 	bl	80091d0 <_printf_common>
 8009404:	3001      	adds	r0, #1
 8009406:	d14a      	bne.n	800949e <_printf_i+0x1f2>
 8009408:	f04f 30ff 	mov.w	r0, #4294967295
 800940c:	b004      	add	sp, #16
 800940e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	f043 0320 	orr.w	r3, r3, #32
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	4833      	ldr	r0, [pc, #204]	@ (80094e8 <_printf_i+0x23c>)
 800941c:	2778      	movs	r7, #120	@ 0x78
 800941e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	6831      	ldr	r1, [r6, #0]
 8009426:	061f      	lsls	r7, r3, #24
 8009428:	f851 5b04 	ldr.w	r5, [r1], #4
 800942c:	d402      	bmi.n	8009434 <_printf_i+0x188>
 800942e:	065f      	lsls	r7, r3, #25
 8009430:	bf48      	it	mi
 8009432:	b2ad      	uxthmi	r5, r5
 8009434:	6031      	str	r1, [r6, #0]
 8009436:	07d9      	lsls	r1, r3, #31
 8009438:	bf44      	itt	mi
 800943a:	f043 0320 	orrmi.w	r3, r3, #32
 800943e:	6023      	strmi	r3, [r4, #0]
 8009440:	b11d      	cbz	r5, 800944a <_printf_i+0x19e>
 8009442:	2310      	movs	r3, #16
 8009444:	e7ac      	b.n	80093a0 <_printf_i+0xf4>
 8009446:	4827      	ldr	r0, [pc, #156]	@ (80094e4 <_printf_i+0x238>)
 8009448:	e7e9      	b.n	800941e <_printf_i+0x172>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	f023 0320 	bic.w	r3, r3, #32
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	e7f6      	b.n	8009442 <_printf_i+0x196>
 8009454:	4616      	mov	r6, r2
 8009456:	e7bd      	b.n	80093d4 <_printf_i+0x128>
 8009458:	6833      	ldr	r3, [r6, #0]
 800945a:	6825      	ldr	r5, [r4, #0]
 800945c:	6961      	ldr	r1, [r4, #20]
 800945e:	1d18      	adds	r0, r3, #4
 8009460:	6030      	str	r0, [r6, #0]
 8009462:	062e      	lsls	r6, r5, #24
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	d501      	bpl.n	800946c <_printf_i+0x1c0>
 8009468:	6019      	str	r1, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0x1c6>
 800946c:	0668      	lsls	r0, r5, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0x1bc>
 8009470:	8019      	strh	r1, [r3, #0]
 8009472:	2300      	movs	r3, #0
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	4616      	mov	r6, r2
 8009478:	e7bc      	b.n	80093f4 <_printf_i+0x148>
 800947a:	6833      	ldr	r3, [r6, #0]
 800947c:	1d1a      	adds	r2, r3, #4
 800947e:	6032      	str	r2, [r6, #0]
 8009480:	681e      	ldr	r6, [r3, #0]
 8009482:	6862      	ldr	r2, [r4, #4]
 8009484:	2100      	movs	r1, #0
 8009486:	4630      	mov	r0, r6
 8009488:	f7f6 feda 	bl	8000240 <memchr>
 800948c:	b108      	cbz	r0, 8009492 <_printf_i+0x1e6>
 800948e:	1b80      	subs	r0, r0, r6
 8009490:	6060      	str	r0, [r4, #4]
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	2300      	movs	r3, #0
 8009498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800949c:	e7aa      	b.n	80093f4 <_printf_i+0x148>
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	4632      	mov	r2, r6
 80094a2:	4649      	mov	r1, r9
 80094a4:	4640      	mov	r0, r8
 80094a6:	47d0      	blx	sl
 80094a8:	3001      	adds	r0, #1
 80094aa:	d0ad      	beq.n	8009408 <_printf_i+0x15c>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	079b      	lsls	r3, r3, #30
 80094b0:	d413      	bmi.n	80094da <_printf_i+0x22e>
 80094b2:	68e0      	ldr	r0, [r4, #12]
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	4298      	cmp	r0, r3
 80094b8:	bfb8      	it	lt
 80094ba:	4618      	movlt	r0, r3
 80094bc:	e7a6      	b.n	800940c <_printf_i+0x160>
 80094be:	2301      	movs	r3, #1
 80094c0:	4632      	mov	r2, r6
 80094c2:	4649      	mov	r1, r9
 80094c4:	4640      	mov	r0, r8
 80094c6:	47d0      	blx	sl
 80094c8:	3001      	adds	r0, #1
 80094ca:	d09d      	beq.n	8009408 <_printf_i+0x15c>
 80094cc:	3501      	adds	r5, #1
 80094ce:	68e3      	ldr	r3, [r4, #12]
 80094d0:	9903      	ldr	r1, [sp, #12]
 80094d2:	1a5b      	subs	r3, r3, r1
 80094d4:	42ab      	cmp	r3, r5
 80094d6:	dcf2      	bgt.n	80094be <_printf_i+0x212>
 80094d8:	e7eb      	b.n	80094b2 <_printf_i+0x206>
 80094da:	2500      	movs	r5, #0
 80094dc:	f104 0619 	add.w	r6, r4, #25
 80094e0:	e7f5      	b.n	80094ce <_printf_i+0x222>
 80094e2:	bf00      	nop
 80094e4:	08009f9d 	.word	0x08009f9d
 80094e8:	08009fae 	.word	0x08009fae

080094ec <__sflush_r>:
 80094ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f4:	0716      	lsls	r6, r2, #28
 80094f6:	4605      	mov	r5, r0
 80094f8:	460c      	mov	r4, r1
 80094fa:	d454      	bmi.n	80095a6 <__sflush_r+0xba>
 80094fc:	684b      	ldr	r3, [r1, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dc02      	bgt.n	8009508 <__sflush_r+0x1c>
 8009502:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	dd48      	ble.n	800959a <__sflush_r+0xae>
 8009508:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800950a:	2e00      	cmp	r6, #0
 800950c:	d045      	beq.n	800959a <__sflush_r+0xae>
 800950e:	2300      	movs	r3, #0
 8009510:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009514:	682f      	ldr	r7, [r5, #0]
 8009516:	6a21      	ldr	r1, [r4, #32]
 8009518:	602b      	str	r3, [r5, #0]
 800951a:	d030      	beq.n	800957e <__sflush_r+0x92>
 800951c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	0759      	lsls	r1, r3, #29
 8009522:	d505      	bpl.n	8009530 <__sflush_r+0x44>
 8009524:	6863      	ldr	r3, [r4, #4]
 8009526:	1ad2      	subs	r2, r2, r3
 8009528:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800952a:	b10b      	cbz	r3, 8009530 <__sflush_r+0x44>
 800952c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	2300      	movs	r3, #0
 8009532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009534:	6a21      	ldr	r1, [r4, #32]
 8009536:	4628      	mov	r0, r5
 8009538:	47b0      	blx	r6
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	d106      	bne.n	800954e <__sflush_r+0x62>
 8009540:	6829      	ldr	r1, [r5, #0]
 8009542:	291d      	cmp	r1, #29
 8009544:	d82b      	bhi.n	800959e <__sflush_r+0xb2>
 8009546:	4a2a      	ldr	r2, [pc, #168]	@ (80095f0 <__sflush_r+0x104>)
 8009548:	410a      	asrs	r2, r1
 800954a:	07d6      	lsls	r6, r2, #31
 800954c:	d427      	bmi.n	800959e <__sflush_r+0xb2>
 800954e:	2200      	movs	r2, #0
 8009550:	6062      	str	r2, [r4, #4]
 8009552:	04d9      	lsls	r1, r3, #19
 8009554:	6922      	ldr	r2, [r4, #16]
 8009556:	6022      	str	r2, [r4, #0]
 8009558:	d504      	bpl.n	8009564 <__sflush_r+0x78>
 800955a:	1c42      	adds	r2, r0, #1
 800955c:	d101      	bne.n	8009562 <__sflush_r+0x76>
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	b903      	cbnz	r3, 8009564 <__sflush_r+0x78>
 8009562:	6560      	str	r0, [r4, #84]	@ 0x54
 8009564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009566:	602f      	str	r7, [r5, #0]
 8009568:	b1b9      	cbz	r1, 800959a <__sflush_r+0xae>
 800956a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800956e:	4299      	cmp	r1, r3
 8009570:	d002      	beq.n	8009578 <__sflush_r+0x8c>
 8009572:	4628      	mov	r0, r5
 8009574:	f7ff fa9a 	bl	8008aac <_free_r>
 8009578:	2300      	movs	r3, #0
 800957a:	6363      	str	r3, [r4, #52]	@ 0x34
 800957c:	e00d      	b.n	800959a <__sflush_r+0xae>
 800957e:	2301      	movs	r3, #1
 8009580:	4628      	mov	r0, r5
 8009582:	47b0      	blx	r6
 8009584:	4602      	mov	r2, r0
 8009586:	1c50      	adds	r0, r2, #1
 8009588:	d1c9      	bne.n	800951e <__sflush_r+0x32>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0c6      	beq.n	800951e <__sflush_r+0x32>
 8009590:	2b1d      	cmp	r3, #29
 8009592:	d001      	beq.n	8009598 <__sflush_r+0xac>
 8009594:	2b16      	cmp	r3, #22
 8009596:	d11e      	bne.n	80095d6 <__sflush_r+0xea>
 8009598:	602f      	str	r7, [r5, #0]
 800959a:	2000      	movs	r0, #0
 800959c:	e022      	b.n	80095e4 <__sflush_r+0xf8>
 800959e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095a2:	b21b      	sxth	r3, r3
 80095a4:	e01b      	b.n	80095de <__sflush_r+0xf2>
 80095a6:	690f      	ldr	r7, [r1, #16]
 80095a8:	2f00      	cmp	r7, #0
 80095aa:	d0f6      	beq.n	800959a <__sflush_r+0xae>
 80095ac:	0793      	lsls	r3, r2, #30
 80095ae:	680e      	ldr	r6, [r1, #0]
 80095b0:	bf08      	it	eq
 80095b2:	694b      	ldreq	r3, [r1, #20]
 80095b4:	600f      	str	r7, [r1, #0]
 80095b6:	bf18      	it	ne
 80095b8:	2300      	movne	r3, #0
 80095ba:	eba6 0807 	sub.w	r8, r6, r7
 80095be:	608b      	str	r3, [r1, #8]
 80095c0:	f1b8 0f00 	cmp.w	r8, #0
 80095c4:	dde9      	ble.n	800959a <__sflush_r+0xae>
 80095c6:	6a21      	ldr	r1, [r4, #32]
 80095c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095ca:	4643      	mov	r3, r8
 80095cc:	463a      	mov	r2, r7
 80095ce:	4628      	mov	r0, r5
 80095d0:	47b0      	blx	r6
 80095d2:	2800      	cmp	r0, #0
 80095d4:	dc08      	bgt.n	80095e8 <__sflush_r+0xfc>
 80095d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e8:	4407      	add	r7, r0
 80095ea:	eba8 0800 	sub.w	r8, r8, r0
 80095ee:	e7e7      	b.n	80095c0 <__sflush_r+0xd4>
 80095f0:	dfbffffe 	.word	0xdfbffffe

080095f4 <_fflush_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	690b      	ldr	r3, [r1, #16]
 80095f8:	4605      	mov	r5, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	b913      	cbnz	r3, 8009604 <_fflush_r+0x10>
 80095fe:	2500      	movs	r5, #0
 8009600:	4628      	mov	r0, r5
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	b118      	cbz	r0, 800960e <_fflush_r+0x1a>
 8009606:	6a03      	ldr	r3, [r0, #32]
 8009608:	b90b      	cbnz	r3, 800960e <_fflush_r+0x1a>
 800960a:	f7ff f919 	bl	8008840 <__sinit>
 800960e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0f3      	beq.n	80095fe <_fflush_r+0xa>
 8009616:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009618:	07d0      	lsls	r0, r2, #31
 800961a:	d404      	bmi.n	8009626 <_fflush_r+0x32>
 800961c:	0599      	lsls	r1, r3, #22
 800961e:	d402      	bmi.n	8009626 <_fflush_r+0x32>
 8009620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009622:	f7ff fa32 	bl	8008a8a <__retarget_lock_acquire_recursive>
 8009626:	4628      	mov	r0, r5
 8009628:	4621      	mov	r1, r4
 800962a:	f7ff ff5f 	bl	80094ec <__sflush_r>
 800962e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009630:	07da      	lsls	r2, r3, #31
 8009632:	4605      	mov	r5, r0
 8009634:	d4e4      	bmi.n	8009600 <_fflush_r+0xc>
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	059b      	lsls	r3, r3, #22
 800963a:	d4e1      	bmi.n	8009600 <_fflush_r+0xc>
 800963c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800963e:	f7ff fa25 	bl	8008a8c <__retarget_lock_release_recursive>
 8009642:	e7dd      	b.n	8009600 <_fflush_r+0xc>

08009644 <__swbuf_r>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	460e      	mov	r6, r1
 8009648:	4614      	mov	r4, r2
 800964a:	4605      	mov	r5, r0
 800964c:	b118      	cbz	r0, 8009656 <__swbuf_r+0x12>
 800964e:	6a03      	ldr	r3, [r0, #32]
 8009650:	b90b      	cbnz	r3, 8009656 <__swbuf_r+0x12>
 8009652:	f7ff f8f5 	bl	8008840 <__sinit>
 8009656:	69a3      	ldr	r3, [r4, #24]
 8009658:	60a3      	str	r3, [r4, #8]
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	071a      	lsls	r2, r3, #28
 800965e:	d501      	bpl.n	8009664 <__swbuf_r+0x20>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	b943      	cbnz	r3, 8009676 <__swbuf_r+0x32>
 8009664:	4621      	mov	r1, r4
 8009666:	4628      	mov	r0, r5
 8009668:	f000 f82a 	bl	80096c0 <__swsetup_r>
 800966c:	b118      	cbz	r0, 8009676 <__swbuf_r+0x32>
 800966e:	f04f 37ff 	mov.w	r7, #4294967295
 8009672:	4638      	mov	r0, r7
 8009674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	6922      	ldr	r2, [r4, #16]
 800967a:	1a98      	subs	r0, r3, r2
 800967c:	6963      	ldr	r3, [r4, #20]
 800967e:	b2f6      	uxtb	r6, r6
 8009680:	4283      	cmp	r3, r0
 8009682:	4637      	mov	r7, r6
 8009684:	dc05      	bgt.n	8009692 <__swbuf_r+0x4e>
 8009686:	4621      	mov	r1, r4
 8009688:	4628      	mov	r0, r5
 800968a:	f7ff ffb3 	bl	80095f4 <_fflush_r>
 800968e:	2800      	cmp	r0, #0
 8009690:	d1ed      	bne.n	800966e <__swbuf_r+0x2a>
 8009692:	68a3      	ldr	r3, [r4, #8]
 8009694:	3b01      	subs	r3, #1
 8009696:	60a3      	str	r3, [r4, #8]
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	6022      	str	r2, [r4, #0]
 800969e:	701e      	strb	r6, [r3, #0]
 80096a0:	6962      	ldr	r2, [r4, #20]
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d004      	beq.n	80096b2 <__swbuf_r+0x6e>
 80096a8:	89a3      	ldrh	r3, [r4, #12]
 80096aa:	07db      	lsls	r3, r3, #31
 80096ac:	d5e1      	bpl.n	8009672 <__swbuf_r+0x2e>
 80096ae:	2e0a      	cmp	r6, #10
 80096b0:	d1df      	bne.n	8009672 <__swbuf_r+0x2e>
 80096b2:	4621      	mov	r1, r4
 80096b4:	4628      	mov	r0, r5
 80096b6:	f7ff ff9d 	bl	80095f4 <_fflush_r>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0d9      	beq.n	8009672 <__swbuf_r+0x2e>
 80096be:	e7d6      	b.n	800966e <__swbuf_r+0x2a>

080096c0 <__swsetup_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4b29      	ldr	r3, [pc, #164]	@ (8009768 <__swsetup_r+0xa8>)
 80096c4:	4605      	mov	r5, r0
 80096c6:	6818      	ldr	r0, [r3, #0]
 80096c8:	460c      	mov	r4, r1
 80096ca:	b118      	cbz	r0, 80096d4 <__swsetup_r+0x14>
 80096cc:	6a03      	ldr	r3, [r0, #32]
 80096ce:	b90b      	cbnz	r3, 80096d4 <__swsetup_r+0x14>
 80096d0:	f7ff f8b6 	bl	8008840 <__sinit>
 80096d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d8:	0719      	lsls	r1, r3, #28
 80096da:	d422      	bmi.n	8009722 <__swsetup_r+0x62>
 80096dc:	06da      	lsls	r2, r3, #27
 80096de:	d407      	bmi.n	80096f0 <__swsetup_r+0x30>
 80096e0:	2209      	movs	r2, #9
 80096e2:	602a      	str	r2, [r5, #0]
 80096e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096e8:	81a3      	strh	r3, [r4, #12]
 80096ea:	f04f 30ff 	mov.w	r0, #4294967295
 80096ee:	e033      	b.n	8009758 <__swsetup_r+0x98>
 80096f0:	0758      	lsls	r0, r3, #29
 80096f2:	d512      	bpl.n	800971a <__swsetup_r+0x5a>
 80096f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096f6:	b141      	cbz	r1, 800970a <__swsetup_r+0x4a>
 80096f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096fc:	4299      	cmp	r1, r3
 80096fe:	d002      	beq.n	8009706 <__swsetup_r+0x46>
 8009700:	4628      	mov	r0, r5
 8009702:	f7ff f9d3 	bl	8008aac <_free_r>
 8009706:	2300      	movs	r3, #0
 8009708:	6363      	str	r3, [r4, #52]	@ 0x34
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	2300      	movs	r3, #0
 8009714:	6063      	str	r3, [r4, #4]
 8009716:	6923      	ldr	r3, [r4, #16]
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f043 0308 	orr.w	r3, r3, #8
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	6923      	ldr	r3, [r4, #16]
 8009724:	b94b      	cbnz	r3, 800973a <__swsetup_r+0x7a>
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800972c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009730:	d003      	beq.n	800973a <__swsetup_r+0x7a>
 8009732:	4621      	mov	r1, r4
 8009734:	4628      	mov	r0, r5
 8009736:	f000 f897 	bl	8009868 <__smakebuf_r>
 800973a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800973e:	f013 0201 	ands.w	r2, r3, #1
 8009742:	d00a      	beq.n	800975a <__swsetup_r+0x9a>
 8009744:	2200      	movs	r2, #0
 8009746:	60a2      	str	r2, [r4, #8]
 8009748:	6962      	ldr	r2, [r4, #20]
 800974a:	4252      	negs	r2, r2
 800974c:	61a2      	str	r2, [r4, #24]
 800974e:	6922      	ldr	r2, [r4, #16]
 8009750:	b942      	cbnz	r2, 8009764 <__swsetup_r+0xa4>
 8009752:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009756:	d1c5      	bne.n	80096e4 <__swsetup_r+0x24>
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	0799      	lsls	r1, r3, #30
 800975c:	bf58      	it	pl
 800975e:	6962      	ldrpl	r2, [r4, #20]
 8009760:	60a2      	str	r2, [r4, #8]
 8009762:	e7f4      	b.n	800974e <__swsetup_r+0x8e>
 8009764:	2000      	movs	r0, #0
 8009766:	e7f7      	b.n	8009758 <__swsetup_r+0x98>
 8009768:	20000070 	.word	0x20000070

0800976c <memmove>:
 800976c:	4288      	cmp	r0, r1
 800976e:	b510      	push	{r4, lr}
 8009770:	eb01 0402 	add.w	r4, r1, r2
 8009774:	d902      	bls.n	800977c <memmove+0x10>
 8009776:	4284      	cmp	r4, r0
 8009778:	4623      	mov	r3, r4
 800977a:	d807      	bhi.n	800978c <memmove+0x20>
 800977c:	1e43      	subs	r3, r0, #1
 800977e:	42a1      	cmp	r1, r4
 8009780:	d008      	beq.n	8009794 <memmove+0x28>
 8009782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800978a:	e7f8      	b.n	800977e <memmove+0x12>
 800978c:	4402      	add	r2, r0
 800978e:	4601      	mov	r1, r0
 8009790:	428a      	cmp	r2, r1
 8009792:	d100      	bne.n	8009796 <memmove+0x2a>
 8009794:	bd10      	pop	{r4, pc}
 8009796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800979a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800979e:	e7f7      	b.n	8009790 <memmove+0x24>

080097a0 <_sbrk_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d06      	ldr	r5, [pc, #24]	@ (80097bc <_sbrk_r+0x1c>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	602b      	str	r3, [r5, #0]
 80097ac:	f7fb fc84 	bl	80050b8 <_sbrk>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_sbrk_r+0x1a>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_sbrk_r+0x1a>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	2001311c 	.word	0x2001311c

080097c0 <_realloc_r>:
 80097c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c4:	4680      	mov	r8, r0
 80097c6:	4615      	mov	r5, r2
 80097c8:	460c      	mov	r4, r1
 80097ca:	b921      	cbnz	r1, 80097d6 <_realloc_r+0x16>
 80097cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097d0:	4611      	mov	r1, r2
 80097d2:	f7ff b9d7 	b.w	8008b84 <_malloc_r>
 80097d6:	b92a      	cbnz	r2, 80097e4 <_realloc_r+0x24>
 80097d8:	f7ff f968 	bl	8008aac <_free_r>
 80097dc:	2400      	movs	r4, #0
 80097de:	4620      	mov	r0, r4
 80097e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e4:	f000 f89e 	bl	8009924 <_malloc_usable_size_r>
 80097e8:	4285      	cmp	r5, r0
 80097ea:	4606      	mov	r6, r0
 80097ec:	d802      	bhi.n	80097f4 <_realloc_r+0x34>
 80097ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80097f2:	d8f4      	bhi.n	80097de <_realloc_r+0x1e>
 80097f4:	4629      	mov	r1, r5
 80097f6:	4640      	mov	r0, r8
 80097f8:	f7ff f9c4 	bl	8008b84 <_malloc_r>
 80097fc:	4607      	mov	r7, r0
 80097fe:	2800      	cmp	r0, #0
 8009800:	d0ec      	beq.n	80097dc <_realloc_r+0x1c>
 8009802:	42b5      	cmp	r5, r6
 8009804:	462a      	mov	r2, r5
 8009806:	4621      	mov	r1, r4
 8009808:	bf28      	it	cs
 800980a:	4632      	movcs	r2, r6
 800980c:	f7ff f93f 	bl	8008a8e <memcpy>
 8009810:	4621      	mov	r1, r4
 8009812:	4640      	mov	r0, r8
 8009814:	f7ff f94a 	bl	8008aac <_free_r>
 8009818:	463c      	mov	r4, r7
 800981a:	e7e0      	b.n	80097de <_realloc_r+0x1e>

0800981c <__swhatbuf_r>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	460c      	mov	r4, r1
 8009820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009824:	2900      	cmp	r1, #0
 8009826:	b096      	sub	sp, #88	@ 0x58
 8009828:	4615      	mov	r5, r2
 800982a:	461e      	mov	r6, r3
 800982c:	da0d      	bge.n	800984a <__swhatbuf_r+0x2e>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009834:	f04f 0100 	mov.w	r1, #0
 8009838:	bf14      	ite	ne
 800983a:	2340      	movne	r3, #64	@ 0x40
 800983c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009840:	2000      	movs	r0, #0
 8009842:	6031      	str	r1, [r6, #0]
 8009844:	602b      	str	r3, [r5, #0]
 8009846:	b016      	add	sp, #88	@ 0x58
 8009848:	bd70      	pop	{r4, r5, r6, pc}
 800984a:	466a      	mov	r2, sp
 800984c:	f000 f848 	bl	80098e0 <_fstat_r>
 8009850:	2800      	cmp	r0, #0
 8009852:	dbec      	blt.n	800982e <__swhatbuf_r+0x12>
 8009854:	9901      	ldr	r1, [sp, #4]
 8009856:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800985a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800985e:	4259      	negs	r1, r3
 8009860:	4159      	adcs	r1, r3
 8009862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009866:	e7eb      	b.n	8009840 <__swhatbuf_r+0x24>

08009868 <__smakebuf_r>:
 8009868:	898b      	ldrh	r3, [r1, #12]
 800986a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800986c:	079d      	lsls	r5, r3, #30
 800986e:	4606      	mov	r6, r0
 8009870:	460c      	mov	r4, r1
 8009872:	d507      	bpl.n	8009884 <__smakebuf_r+0x1c>
 8009874:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	6123      	str	r3, [r4, #16]
 800987c:	2301      	movs	r3, #1
 800987e:	6163      	str	r3, [r4, #20]
 8009880:	b003      	add	sp, #12
 8009882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009884:	ab01      	add	r3, sp, #4
 8009886:	466a      	mov	r2, sp
 8009888:	f7ff ffc8 	bl	800981c <__swhatbuf_r>
 800988c:	9f00      	ldr	r7, [sp, #0]
 800988e:	4605      	mov	r5, r0
 8009890:	4639      	mov	r1, r7
 8009892:	4630      	mov	r0, r6
 8009894:	f7ff f976 	bl	8008b84 <_malloc_r>
 8009898:	b948      	cbnz	r0, 80098ae <__smakebuf_r+0x46>
 800989a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989e:	059a      	lsls	r2, r3, #22
 80098a0:	d4ee      	bmi.n	8009880 <__smakebuf_r+0x18>
 80098a2:	f023 0303 	bic.w	r3, r3, #3
 80098a6:	f043 0302 	orr.w	r3, r3, #2
 80098aa:	81a3      	strh	r3, [r4, #12]
 80098ac:	e7e2      	b.n	8009874 <__smakebuf_r+0xc>
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	6020      	str	r0, [r4, #0]
 80098b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	9b01      	ldr	r3, [sp, #4]
 80098ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098be:	b15b      	cbz	r3, 80098d8 <__smakebuf_r+0x70>
 80098c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c4:	4630      	mov	r0, r6
 80098c6:	f000 f81d 	bl	8009904 <_isatty_r>
 80098ca:	b128      	cbz	r0, 80098d8 <__smakebuf_r+0x70>
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	f023 0303 	bic.w	r3, r3, #3
 80098d2:	f043 0301 	orr.w	r3, r3, #1
 80098d6:	81a3      	strh	r3, [r4, #12]
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	431d      	orrs	r5, r3
 80098dc:	81a5      	strh	r5, [r4, #12]
 80098de:	e7cf      	b.n	8009880 <__smakebuf_r+0x18>

080098e0 <_fstat_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4d07      	ldr	r5, [pc, #28]	@ (8009900 <_fstat_r+0x20>)
 80098e4:	2300      	movs	r3, #0
 80098e6:	4604      	mov	r4, r0
 80098e8:	4608      	mov	r0, r1
 80098ea:	4611      	mov	r1, r2
 80098ec:	602b      	str	r3, [r5, #0]
 80098ee:	f7fb fbba 	bl	8005066 <_fstat>
 80098f2:	1c43      	adds	r3, r0, #1
 80098f4:	d102      	bne.n	80098fc <_fstat_r+0x1c>
 80098f6:	682b      	ldr	r3, [r5, #0]
 80098f8:	b103      	cbz	r3, 80098fc <_fstat_r+0x1c>
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	bd38      	pop	{r3, r4, r5, pc}
 80098fe:	bf00      	nop
 8009900:	2001311c 	.word	0x2001311c

08009904 <_isatty_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4d06      	ldr	r5, [pc, #24]	@ (8009920 <_isatty_r+0x1c>)
 8009908:	2300      	movs	r3, #0
 800990a:	4604      	mov	r4, r0
 800990c:	4608      	mov	r0, r1
 800990e:	602b      	str	r3, [r5, #0]
 8009910:	f7fb fbb9 	bl	8005086 <_isatty>
 8009914:	1c43      	adds	r3, r0, #1
 8009916:	d102      	bne.n	800991e <_isatty_r+0x1a>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	b103      	cbz	r3, 800991e <_isatty_r+0x1a>
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	bd38      	pop	{r3, r4, r5, pc}
 8009920:	2001311c 	.word	0x2001311c

08009924 <_malloc_usable_size_r>:
 8009924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009928:	1f18      	subs	r0, r3, #4
 800992a:	2b00      	cmp	r3, #0
 800992c:	bfbc      	itt	lt
 800992e:	580b      	ldrlt	r3, [r1, r0]
 8009930:	18c0      	addlt	r0, r0, r3
 8009932:	4770      	bx	lr

08009934 <_init>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	bf00      	nop
 8009938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993a:	bc08      	pop	{r3}
 800993c:	469e      	mov	lr, r3
 800993e:	4770      	bx	lr

08009940 <_fini>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr
